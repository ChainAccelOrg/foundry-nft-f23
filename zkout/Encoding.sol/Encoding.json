{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"Encoding.sol:Encoding\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[4]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tptr.add\tr1, r4, stack[@ptr_return_data]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r4, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.gt\t@.BB0_13\n\tsub.s!\t@CPI0_10[0], r2, r3\n\tjump.gt\t@.BB0_10\n\tsub.s!\t@CPI0_14[0], r2, r1\n\tjump.eq\t@.BB0_20\n\tsub.s!\t@CPI0_15[0], r2, r1\n\tjump.eq\t@.BB0_22\n\tsub.s!\t@CPI0_16[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_17[0], r0, r1\n\tst.1\t160, r1\n\tadd\t11, r0, r1\n\tjump\t@.BB0_26\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_13:\n\tsub.s!\t@CPI0_3[0], r2, r1\n\tjump.gt\t@.BB0_17\n\tsub.s!\t@CPI0_7[0], r2, r1\n\tjump.eq\t@.BB0_58\n\tsub.s!\t@CPI0_8[0], r2, r1\n\tjump.eq\t@.BB0_61\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_encodeString, @DEFAULT_UNWIND\n\tjump\t@.BB0_60\n.BB0_10:\n\tsub.s!\t@CPI0_11[0], r2, r3\n\tjump.eq\t@.BB0_29\n\tsub.s!\t@CPI0_12[0], r2, r3\n\tjump.eq\t@.BB0_31\n\tsub.s!\t@CPI0_13[0], r2, r1\n\tjump.eq\t@.BB0_54\n\tjump\t@.BB0_2\n.BB0_17:\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.eq\t@.BB0_54\n\tsub.s!\t@CPI0_5[0], r2, r1\n\tjump.eq\t@.BB0_65\n\tsub.s!\t@CPI0_6[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_encodeString, @DEFAULT_UNWIND\n\tjump\t@.BB0_56\n.BB0_54:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_multiEncodePacked, @DEFAULT_UNWIND\n\tjump\t@.BB0_56\n.BB0_20:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_31[0], r0, r1\n\tst.1\t160, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tst.1\t168, r1\n\tadd\t17, r0, r1\n.BB0_26:\n\tst.1\t128, r1\n\tadd\t192, r0, r1\n\tst.1\t64, r1\n\tjump\t@.BB0_27\n.BB0_22:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tst.1\t160, r1\n\tadd\t32, r0, r1\n\tst.1\t128, r1\n\tadd\t192, r0, r2\n\tst.1\t64, r2\n\tjump\t@.BB0_28\n.BB0_58:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_multiEncodePacked, @DEFAULT_UNWIND\n.BB0_60:\n\tld.1.inc\tr1, r2, r1\n\tadd\tr1, r2, r2\n\tnear_call\tr0, @abi_decode_string_fromMemory, @DEFAULT_UNWIND\n\tjump\t@.BB0_56\n.BB0_61:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_multiEncode, @DEFAULT_UNWIND\n.BB0_56:\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[4]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n.BB0_57:\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_29:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t192, r0, r1\n\tst.1\t64, r1\n\tadd\t11, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tst.1\t160, r1\n.BB0_27:\n\tadd\t32, r0, r1\n.BB0_28:\n\tst.1\t192, r1\n\tadd\t128, r0, r1\n\tadd\t224, r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tsub.s\t192, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\t@CPI0_30[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r4, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r2\n\tsub.s!\t@CPI0_19[0], r2, r1\n\tjump.gt\t@.BB0_2\n\tadd\tr2, r0, stack-[4]\n\tadd\t@CPI0_20[0], r0, r1\n\tst.2\t0, r1\n\tcontext.this\tr1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_21[0], r1, r1\n\tadd\t32778, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_35\n\tld\tr1, r3\n\tcontext.gas_left\tr1\n\tadd\tstack-[4], r0, r5\n\tsub.s!\t4, r5, r2\n\tjump.ne\t@.BB0_37\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r1\n\tjump\t@.BB0_39\n.BB0_65:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[3]\n\tst.1\t160, r1\n\tadd\t11, r0, r1\n\tst.1\t224, r1\n\tadd\t@CPI0_17[0], r0, r2\n\tst.1\t256, r2\n\tst.1\t192, r3\n\tadd\t12, r0, r3\n\tst.1\t288, r3\n\tadd\t@CPI0_18[0], r0, r3\n\tst.1\t320, r3\n\tadd\t192, r0, r3\n\tst.1\t128, r3\n\tadd\t416, r0, r3\n\tst.1\t64, r3\n\tst.1\t352, r1\n\tst.1\t384, r2\n\tst.1\t395, r0\n\tadd\t288, r0, r1\n\tadd\t352, r0, r2\n\tadd\tr2, r0, stack-[1]\n\tnear_call\tr0, @abi_decode_string_memory_ptr_fromMemory, @DEFAULT_UNWIND\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[4]\n\tadd\tstack-[3], r0, r2\n\tst.1.inc\tr3, r2, r2\n\tadd\tr2, r0, stack-[2]\n\tadd\tr1, r0, stack-[3]\n\tadd\t64, r3, r2\n\tadd\tstack-[1], r0, r1\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tsub.s\tstack-[4], r2, r1\n\tadd\tstack-[2], r0, r3\n\tst.1\tr3, r1\n\tadd\tstack-[3], r0, r1\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tjump\t@.BB0_57\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_35:\n\trevert\n.BB0_37:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_42\n\tadd\tr5, r0, r2\n\tjump\t@.BB0_41\n.BB0_42:\n\tor\t@CPI0_22[0], r1, r1\n\tadd\t32777, r0, r2\n\tadd\tr5, r0, r4\n\tadd\tr0, r0, r5\n.BB0_41:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r1\n.BB0_39:\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_44\n.BB0_43:\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_52\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_44:\n\tsub.s!\t@CPI0_23[0], r1, r3\n\tjump.ge\t@.BB0_45\n\tadd\t31, r1, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r3\n\tadd\t63, r3, r3\n\tand\tr3, r4, r3\n\tld.1\t64, r4\n\tadd\tr4, r3, r3\n\tsub!\tr3, r4, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_24[0], r3, r6\n\tjump.gt\t@.BB0_45\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_45\n\tst.1\t64, r3\n\tand\t31, r1, r3\n\tst.1.inc\tr4, r1, r4\n\tptr.add\tstack[@ptr_return_data], r0, r5\n\tshr.s!\t5, r1, r1\n\tjump.eq\t@.BB0_69\n\tadd\tr0, r0, r6\n.BB0_50:\n\tshl.s\t5, r6, r7\n\tadd\tr4, r7, r8\n\tptr.add\tr5, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB0_50\n.BB0_69:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_43\n\tshl.s\t5, r1, r1\n\tptr.add\tr5, r1, r5\n\tadd\tr4, r1, r1\n\tshl.s\t3, r3, r3\n\tld.1\tr1, r4\n\tshl\tr4, r3, r4\n\tshr\tr4, r3, r4\n\tld\tr5, r5\n\tsub\t256, r3, r3\n\tshr\tr5, r3, r5\n\tshl\tr5, r3, r3\n\tor\tr3, r4, r3\n\tst.1\tr1, r3\n\tjump\t@.BB0_43\n.BB0_45:\n\tadd\t@CPI0_25[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_26[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_52:\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_27[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t15, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_28[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_29[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r2\n.BB1_2:\n\tadd\tr2, r1, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr3, r1, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\nfun_encodeString:\n.func_begin2:\n\tld.1\t64, r1\n\tadd\t96, r1, r2\n\tadd\t@CPI2_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t11, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t96, r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI2_1[0], r1, r2\n\tjump.ge\t@.BB2_1\n\tadd\t128, r1, r2\n\tst.1\t64, r2\n\tret\n.BB2_1:\n\tadd\t@CPI2_2[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nabi_decode_string_memory_ptr_fromMemory:\n.func_begin3:\n\tadd\t31, r1, r3\n\tadd\t@CPI3_0[0], r0, r4\n\tsub!\tr3, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI3_0[0], r2, r6\n\tand\t@CPI3_0[0], r3, r3\n\tsub!\tr3, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr3, r6, r3\n\tsub.s!\t@CPI3_0[0], r3, r3\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.eq\t@.BB3_1\n\tld.1.inc\tr1, r3, r4\n\tsub.s!\t@CPI3_1[0], r3, r1\n\tjump.ge\t@.BB3_3\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI3_2[0], r5, r7\n\tjump.gt\t@.BB3_3\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB3_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r3, r5\n\tadd\tr4, r3, r6\n\tsub!\tr6, r2, r2\n\tjump.gt\t@.BB3_1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB3_10\n\tadd\tr0, r0, r2\n.BB3_9:\n\tadd\tr2, r5, r6\n\tadd\tr4, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r6\n\tjump.lt\t@.BB3_9\n.BB3_10:\n\tadd\tr5, r3, r2\n\tst.1\tr2, r0\n\tret\n.BB3_3:\n\tadd\t@CPI3_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nabi_decode_string_fromMemory:\n.func_begin4:\n\tsub\tr2, r1, r3\n\tadd\t@CPI4_0[0], r0, r4\n\tsub.s!\t31, r3, r5\n\tadd\tr0, r0, r5\n\tadd.gt\tr4, r0, r5\n\tand\t@CPI4_0[0], r3, r3\n\tsub!\tr3, r0, r6\n\tadd.ge\tr0, r0, r4\n\tsub.s!\t@CPI4_0[0], r3, r3\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.eq\t@.BB4_1\n\tld.1\tr1, r3\n\tsub.s!\t@CPI4_1[0], r3, r4\n\tjump.gt\t@.BB4_1\n\tadd\tr3, r1, r1\n\tadd\t31, r1, r3\n\tadd\t@CPI4_0[0], r0, r4\n\tsub!\tr3, r2, r5\n\tadd\tr0, r0, r5\n\tadd.ge\tr4, r0, r5\n\tand\t@CPI4_0[0], r3, r3\n\tand\t@CPI4_0[0], r2, r6\n\tsub!\tr3, r6, r7\n\tadd.ge\tr0, r0, r4\n\txor\tr3, r6, r3\n\tsub.s!\t@CPI4_0[0], r3, r3\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.ne\t@.BB4_1\n\tld.1.inc\tr1, r3, r4\n\tsub.s!\t@CPI4_2[0], r3, r1\n\tjump.ge\t@.BB4_5\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI4_1[0], r5, r7\n\tjump.gt\t@.BB4_5\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB4_5\n\tst.1\t64, r5\n\tst.1.inc\tr1, r3, r5\n\tadd\tr3, r4, r6\n\tsub!\tr6, r2, r2\n\tjump.gt\t@.BB4_1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB4_12\n\tadd\tr0, r0, r2\n.BB4_11:\n\tadd\tr2, r5, r6\n\tadd\tr2, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r6\n\tjump.lt\t@.BB4_11\n.BB4_12:\n\tadd\tr5, r3, r2\n\tst.1\tr2, r0\n\tret\n.BB4_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_5:\n\tadd\t@CPI4_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nfun_multiEncode:\n.func_begin5:\n\tld.1\t64, r1\n\tadd\t128, r1, r2\n\tadd\t@CPI5_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t96, r1, r2\n\tadd\t11, r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t64, r0, r3\n\tst.1\tr2, r3\n\tadd\t192, r1, r2\n\tadd\t@CPI5_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t160, r1, r2\n\tadd\t12, r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t128, r0, r3\n\tst.1\tr2, r3\n\tadd\t192, r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI5_2[0], r1, r2\n\tjump.ge\t@.BB5_1\n\tadd\t224, r1, r2\n\tst.1\t64, r2\n\tret\n.BB5_1:\n\tadd\t@CPI5_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nfun_multiEncodePacked:\n.func_begin6:\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tadd\t@CPI6_0[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t43, r1, r2\n\tadd\t@CPI6_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t23, r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI6_2[0], r1, r2\n\tjump.ge\t@.BB6_1\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tret\n.BB6_1:\n\tadd\t@CPI6_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\n__cxa_throw:\n.func_begin7:\n\trevert\n.func_end7:\n\n__farcall:\n.func_begin8:\n.tmp0:\n\tfar_call\tr1, r2, @.BB8_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB8_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end8:\n\n__staticcall:\n.func_begin9:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB9_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB9_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end9:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 2459664509\nCPI0_3:\n\t.cell 3027535639\nCPI0_4:\n\t.cell 3027535640\nCPI0_5:\n\t.cell 3293763483\nCPI0_6:\n\t.cell 3982357349\nCPI0_7:\n\t.cell 2459664510\nCPI0_8:\n\t.cell 2799454648\nCPI0_9:\n\t.cell 2809856864\nCPI0_10:\n\t.cell 1081002481\nCPI0_11:\n\t.cell 1081002482\nCPI0_12:\n\t.cell 1372584153\nCPI0_13:\n\t.cell 1626228419\nCPI0_14:\n\t.cell 290092560\nCPI0_15:\n\t.cell 361274650\nCPI0_16:\n\t.cell 545649849\nCPI0_17:\nCPI2_0:\nCPI5_0:\nCPI6_0:\n\t.cell 52212852627989937589588187571583718649925059162745576667421777459444046626816\nCPI0_18:\nCPI5_1:\nCPI6_1:\n\t.cell 47698075632669132488361580363556454935468547799027711735041180566737192484864\nCPI0_19:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_20:\n\t.cell -44877977326897262784168444354156441158329539312518651612887364914072161059015\nCPI0_21:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_22:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_23:\nCPI3_1:\nCPI4_2:\n\t.cell 18446744073709551616\nCPI0_24:\nCPI3_2:\nCPI4_1:\n\t.cell 18446744073709551615\nCPI0_25:\nCPI2_2:\nCPI3_3:\nCPI4_3:\nCPI5_3:\nCPI6_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_26:\nCPI2_3:\nCPI3_4:\nCPI4_4:\nCPI5_4:\nCPI6_4:\n\t.cell 2852213850513516153367582212096\nCPI0_27:\n\t.cell 38196372293521921433408698003185460201718923726972693216817860568431187722240\nCPI0_28:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_29:\n\t.cell 7922816251426433759354395033600\nCPI0_30:\n\t.cell 3541774862152233910272\nCPI0_31:\n\t.cell 32752266983330458590345614539989736403826523891599922304467695854631881015296\nCPI0_32:\n\t.cell 35014405087356938848435866919201406523318977213496398100119825345444896047104\nCPI2_1:\n\t.cell 18446744073709551488\nCPI3_0:\nCPI4_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI5_2:\n\t.cell 18446744073709551392\nCPI6_2:\n\t.cell 18446744073709551552\n","methodIdentifiers":{"combineStrings()":"114a7610","decodeString()":"a77b0360","encodeNumber()":"15889d1a","encodeString()":"ed5df365","encodeStringBytes()":"406ec9f2","encodeStringPacked()":"2085f4b9","multiDecode()":"c452d79b","multiDecodePacked()":"929b807e","multiEncode()":"a6dc49b8","multiEncodePacked()":"b4748718","multiStringCastPacked()":"60ee46c3","withdraw(address)":"51cff8d9"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"combineStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decodeString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodeNumber\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodeString\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodeStringBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodeStringPacked\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiDecode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiDecodePacked\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiEncode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiEncodePacked\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiStringCastPacked\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recentWinner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/sublesson/Encoding.sol\":\"Encoding\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/sublesson/Encoding.sol\":{\"keccak256\":\"0xc2c3fdeca3869ee5ad6b314e59937aeb411b045b640bffa8f12038ed0eaf29b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4d8a246876c3a41e1e172cecbc7cbdb8a7417deff250c4a9a801d495064250be\",\"dweb:/ipfs/QmNi9NHdfu9Ao1TECUYYLvqRPy6uataMJBfdFvNa5jvZzp\"]}},\"version\":1}","solc_version":"0.8.20","solc_zkvm_edition":null,"zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 46:\"src/sublesson/Encoding.sol\"\nobject \"Encoding_51515\" {\n    code {\n        {\n            /// @src 46:188:6740  \"contract Encoding {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Encoding_51515_deployed\")\n            codecopy(_1, dataoffset(\"Encoding_51515_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 46:\"src/sublesson/Encoding.sol\"\n    object \"Encoding_51515_deployed\" {\n        code {\n            {\n                /// @src 46:188:6740  \"contract Encoding {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x114a7610 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        mstore(/** @src 46:298:339  \"abi.encodePacked(\\\"Hi Mom! \\\", \\\"Miss you.\\\")\" */ add(_1, 0x20), /** @src 46:188:6740  \"contract Encoding {...\" */ \"Hi Mom! \")\n                        mstore(add(/** @src 46:298:339  \"abi.encodePacked(\\\"Hi Mom! \\\", \\\"Miss you.\\\")\" */ _1, /** @src 46:188:6740  \"contract Encoding {...\" */ 40), \"Miss you.\")\n                        /// @src 46:298:339  \"abi.encodePacked(\\\"Hi Mom! \\\", \\\"Miss you.\\\")\"\n                        mstore(_1, 17)\n                        finalize_allocation_3154(_1)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        let memPos := mload(_2)\n                        mstore(memPos, /** @src 46:298:339  \"abi.encodePacked(\\\"Hi Mom! \\\", \\\"Miss you.\\\")\" */ 0x20)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        return(memPos, sub(abi_encode_string(_1, add(memPos, /** @src 46:298:339  \"abi.encodePacked(\\\"Hi Mom! \\\", \\\"Miss you.\\\")\" */ 0x20)), /** @src 46:188:6740  \"contract Encoding {...\" */ memPos))\n                    }\n                    case 0x15889d1a {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 46:2513:2526  \"abi.encode(1)\"\n                        let expr_mpos := /** @src 46:188:6740  \"contract Encoding {...\" */ mload(_2)\n                        mstore(/** @src 46:2513:2526  \"abi.encode(1)\" */ add(expr_mpos, 0x20), /** @src 46:2524:2525  \"1\" */ 0x01)\n                        /// @src 46:2513:2526  \"abi.encode(1)\"\n                        mstore(expr_mpos, 0x20)\n                        finalize_allocation_3154(expr_mpos)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, /** @src 46:2513:2526  \"abi.encode(1)\" */ 0x20)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        return(memPos_1, sub(abi_encode_string(expr_mpos, add(memPos_1, /** @src 46:2513:2526  \"abi.encode(1)\" */ 0x20)), /** @src 46:188:6740  \"contract Encoding {...\" */ memPos_1))\n                    }\n                    case 0x2085f4b9 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 46:3165:3196  \"abi.encodePacked(\\\"some string\\\")\"\n                        let expr_mpos_1 := /** @src 46:188:6740  \"contract Encoding {...\" */ mload(_2)\n                        mstore(/** @src 46:3165:3196  \"abi.encodePacked(\\\"some string\\\")\" */ add(expr_mpos_1, 0x20), /** @src 46:188:6740  \"contract Encoding {...\" */ \"some string\")\n                        /// @src 46:3165:3196  \"abi.encodePacked(\\\"some string\\\")\"\n                        mstore(expr_mpos_1, 11)\n                        finalize_allocation_3154(expr_mpos_1)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, /** @src 46:3165:3196  \"abi.encodePacked(\\\"some string\\\")\" */ 0x20)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        return(memPos_2, sub(abi_encode_string(expr_mpos_1, add(memPos_2, /** @src 46:3165:3196  \"abi.encodePacked(\\\"some string\\\")\" */ 0x20)), /** @src 46:188:6740  \"contract Encoding {...\" */ memPos_2))\n                    }\n                    case 0x406ec9f2 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let memPtr := mload(_2)\n                        finalize_allocation_3154(memPtr)\n                        mstore(memPtr, 11)\n                        mstore(add(memPtr, 32), \"some string\")\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, 32)\n                        return(memPos_3, sub(abi_encode_string(memPtr, add(memPos_3, 32)), memPos_3))\n                    }\n                    case 0x51cff8d9 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                        let value := calldataload(4)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(_3, _3) }\n                        /// @src 46:6183:6234  \"recentWinner.call{value: address(this).balance}(\\\"\\\")\"\n                        let expr_component := call(gas(), value, /** @src 46:6208:6229  \"address(this).balance\" */ selfbalance(), /** @src 46:188:6740  \"contract Encoding {...\" */ _3, _3, _3, _3)\n                        switch returndatasize()\n                        case 0 { }\n                        default {\n                            let _4 := returndatasize()\n                            let _5 := array_allocation_size_string(_4)\n                            let memPtr_1 := mload(_2)\n                            finalize_allocation(memPtr_1, _5)\n                            mstore(memPtr_1, _4)\n                            returndatacopy(add(memPtr_1, 32), _3, returndatasize())\n                        }\n                        if iszero(expr_component)\n                        {\n                            let memPtr_2 := mload(_2)\n                            mstore(memPtr_2, shl(229, 4594637))\n                            mstore(add(memPtr_2, 4), 32)\n                            mstore(add(memPtr_2, 36), 15)\n                            mstore(add(memPtr_2, 68), \"Transfer Failed\")\n                            revert(memPtr_2, 100)\n                        }\n                        return(_3, _3)\n                    }\n                    case 0x60ee46c3 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 46:4673:4692  \"multiEncodePacked()\"\n                        let _6 := fun_multiEncodePacked()\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, 32)\n                        return(memPos_4, sub(abi_encode_string(_6, add(memPos_4, 32)), memPos_4))\n                    }\n                    case 0x929b807e {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 46:4454:4473  \"multiEncodePacked()\"\n                        let expr_mpos_2 := fun_multiEncodePacked()\n                        /// @src 46:4494:4511  \"return someString\"\n                        let var_mpos := /** @src 46:4443:4484  \"abi.decode(multiEncodePacked(), (string))\" */ abi_decode_string_fromMemory(add(expr_mpos_2, 32), add(add(expr_mpos_2, /** @src 46:188:6740  \"contract Encoding {...\" */ mload(/** @src 46:4443:4484  \"abi.decode(multiEncodePacked(), (string))\" */ expr_mpos_2)), 32))\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, /** @src 46:4443:4484  \"abi.decode(multiEncodePacked(), (string))\" */ 32)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        return(memPos_5, sub(abi_encode_string(var_mpos, add(memPos_5, /** @src 46:4443:4484  \"abi.decode(multiEncodePacked(), (string))\" */ 32)), /** @src 46:188:6740  \"contract Encoding {...\" */ memPos_5))\n                    }\n                    case 0xa6dc49b8 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let ret := fun_multiEncode()\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, 32)\n                        return(memPos_6, sub(abi_encode_string(ret, add(memPos_6, 32)), memPos_6))\n                    }\n                    case 0xa77b0360 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 46:3624:3638  \"encodeString()\"\n                        let expr_mpos_3 := fun_encodeString()\n                        /// @src 46:3659:3676  \"return someString\"\n                        let var_mpos_1 := /** @src 46:3613:3649  \"abi.decode(encodeString(), (string))\" */ abi_decode_string_fromMemory(add(expr_mpos_3, 32), add(add(expr_mpos_3, /** @src 46:188:6740  \"contract Encoding {...\" */ mload(/** @src 46:3613:3649  \"abi.decode(encodeString(), (string))\" */ expr_mpos_3)), 32))\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        let memPos_7 := mload(_2)\n                        mstore(memPos_7, /** @src 46:3613:3649  \"abi.decode(encodeString(), (string))\" */ 32)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        return(memPos_7, sub(abi_encode_string(var_mpos_1, add(memPos_7, /** @src 46:3613:3649  \"abi.decode(encodeString(), (string))\" */ 32)), /** @src 46:188:6740  \"contract Encoding {...\" */ memPos_7))\n                    }\n                    case 0xb4748718 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let ret_1 := fun_multiEncodePacked()\n                        let memPos_8 := mload(_2)\n                        mstore(memPos_8, 32)\n                        return(memPos_8, sub(abi_encode_string(ret_1, add(memPos_8, 32)), memPos_8))\n                    }\n                    case 0xc452d79b {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 46:4037:4050  \"multiEncode()\"\n                        let expr_mpos_4 := fun_multiEncode()\n                        /// @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\"\n                        let _7 := add(expr_mpos_4, /** @src 46:188:6740  \"contract Encoding {...\" */ mload(/** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ expr_mpos_4))\n                        let _8 := add(_7, 32)\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        if slt(sub(/** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ _7, expr_mpos_4), /** @src 46:188:6740  \"contract Encoding {...\" */ _2) { revert(_3, _3) }\n                        let offset := mload(/** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ add(expr_mpos_4, 32))\n                        /// @src 46:188:6740  \"contract Encoding {...\"\n                        let _9 := 0xffffffffffffffff\n                        if gt(offset, _9) { revert(_3, _3) }\n                        let value0 := abi_decode_string_memory_ptr_fromMemory(add(add(/** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ expr_mpos_4, /** @src 46:188:6740  \"contract Encoding {...\" */ offset), /** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ 32), /** @src 46:188:6740  \"contract Encoding {...\" */ _8)\n                        let offset_1 := mload(add(/** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ expr_mpos_4, /** @src 46:188:6740  \"contract Encoding {...\" */ _2))\n                        if gt(offset_1, _9) { revert(_3, _3) }\n                        let value1 := abi_decode_string_memory_ptr_fromMemory(add(add(/** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ expr_mpos_4, /** @src 46:188:6740  \"contract Encoding {...\" */ offset_1), /** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ 32), /** @src 46:188:6740  \"contract Encoding {...\" */ _8)\n                        let memPos_9 := mload(_2)\n                        mstore(memPos_9, _2)\n                        let tail := abi_encode_string(value0, add(memPos_9, _2))\n                        mstore(add(memPos_9, /** @src 46:4026:4069  \"abi.decode(multiEncode(), (string, string))\" */ 32), /** @src 46:188:6740  \"contract Encoding {...\" */ sub(tail, memPos_9))\n                        return(memPos_9, sub(abi_encode_string(value1, tail), memPos_9))\n                    }\n                    case 0xed5df365 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let ret_2 := fun_encodeString()\n                        let memPos_10 := mload(_2)\n                        mstore(memPos_10, 32)\n                        return(memPos_10, sub(abi_encode_string(ret_2, add(memPos_10, 32)), memPos_10))\n                    }\n                }\n                revert(0, 0)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function finalize_allocation_3154(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_encode_stringliteral_83c7(pos) -> end\n            {\n                mstore(pos, 11)\n                mstore(add(pos, 0x20), \"some string\")\n                end := add(pos, 64)\n            }\n            /// @ast-id 51347 @src 46:2611:2765  \"function encodeString() public pure returns (bytes memory) {...\"\n            function fun_encodeString() -> var_mpos\n            {\n                /// @src 46:2706:2731  \"abi.encode(\\\"some string\\\")\"\n                let expr_mpos := /** @src 46:188:6740  \"contract Encoding {...\" */ mload(64)\n                mstore(/** @src 46:2706:2731  \"abi.encode(\\\"some string\\\")\" */ add(expr_mpos, 0x20), 0x20)\n                let _1 := sub(/** @src 46:188:6740  \"contract Encoding {...\" */ abi_encode_stringliteral_83c7(add(/** @src 46:2706:2731  \"abi.encode(\\\"some string\\\")\" */ expr_mpos, /** @src 46:188:6740  \"contract Encoding {...\" */ 64)), /** @src 46:2706:2731  \"abi.encode(\\\"some string\\\")\" */ expr_mpos)\n                mstore(expr_mpos, add(_1, /** @src 46:188:6740  \"contract Encoding {...\" */ not(31)))\n                /// @src 46:2706:2731  \"abi.encode(\\\"some string\\\")\"\n                finalize_allocation(expr_mpos, _1)\n                /// @src 46:2741:2758  \"return someString\"\n                var_mpos := expr_mpos\n            }\n            /// @src 46:188:6740  \"contract Encoding {...\"\n            function array_allocation_size_string(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(and(add(length, 31), not(31)), 0x20)\n            }\n            function abi_decode_string_memory_ptr_fromMemory(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := mload(offset)\n                let _2 := array_allocation_size_string(_1)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _2)\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 46:188:6740  \"contract Encoding {...\"\n                copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(memPtr, 0x20), _1)\n                array := memPtr\n            }\n            function abi_decode_string_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let offset := mload(headStart)\n                if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                value0 := abi_decode_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n            }\n            /// @ast-id 51412 @src 46:3689:3858  \"function multiEncode() public pure returns (bytes memory) {...\"\n            function fun_multiEncode() -> var_51399_mpos\n            {\n                /// @src 46:3783:3824  \"abi.encode(\\\"some string\\\", \\\"it's bigger!\\\")\"\n                let expr_51407_mpos := /** @src 46:188:6740  \"contract Encoding {...\" */ mload(64)\n                mstore(/** @src 46:3783:3824  \"abi.encode(\\\"some string\\\", \\\"it's bigger!\\\")\" */ add(expr_51407_mpos, 0x20), /** @src 46:188:6740  \"contract Encoding {...\" */ 64)\n                let tail := abi_encode_stringliteral_83c7(add(/** @src 46:3783:3824  \"abi.encode(\\\"some string\\\", \\\"it's bigger!\\\")\" */ expr_51407_mpos, /** @src 46:188:6740  \"contract Encoding {...\" */ 96))\n                let _1 := sub(tail, /** @src 46:3783:3824  \"abi.encode(\\\"some string\\\", \\\"it's bigger!\\\")\" */ expr_51407_mpos)\n                /// @src 46:188:6740  \"contract Encoding {...\"\n                mstore(add(/** @src 46:3783:3824  \"abi.encode(\\\"some string\\\", \\\"it's bigger!\\\")\" */ expr_51407_mpos, /** @src 46:188:6740  \"contract Encoding {...\" */ 64), add(_1, not(31)))\n                mstore(tail, 12)\n                mstore(add(tail, /** @src 46:3783:3824  \"abi.encode(\\\"some string\\\", \\\"it's bigger!\\\")\" */ 0x20), /** @src 46:188:6740  \"contract Encoding {...\" */ \"it's bigger!\")\n                /// @src 46:3783:3824  \"abi.encode(\\\"some string\\\", \\\"it's bigger!\\\")\"\n                mstore(expr_51407_mpos, add(_1, 0x20))\n                finalize_allocation(expr_51407_mpos, add(_1, /** @src 46:188:6740  \"contract Encoding {...\" */ 64))\n                /// @src 46:3834:3851  \"return someString\"\n                var_51399_mpos := expr_51407_mpos\n            }\n            /// @ast-id 51455 @src 46:4128:4309  \"function multiEncodePacked() public pure returns (bytes memory) {...\"\n            function fun_multiEncodePacked() -> var_51442_mpos\n            {\n                /// @src 46:4228:4275  \"abi.encodePacked(\\\"some string\\\", \\\"it's bigger!\\\")\"\n                let expr_51450_mpos := /** @src 46:188:6740  \"contract Encoding {...\" */ mload(64)\n                mstore(/** @src 46:4228:4275  \"abi.encodePacked(\\\"some string\\\", \\\"it's bigger!\\\")\" */ add(expr_51450_mpos, 0x20), /** @src 46:188:6740  \"contract Encoding {...\" */ \"some string\")\n                mstore(add(/** @src 46:4228:4275  \"abi.encodePacked(\\\"some string\\\", \\\"it's bigger!\\\")\" */ expr_51450_mpos, /** @src 46:188:6740  \"contract Encoding {...\" */ 43), \"it's bigger!\")\n                /// @src 46:4228:4275  \"abi.encodePacked(\\\"some string\\\", \\\"it's bigger!\\\")\"\n                mstore(expr_51450_mpos, 23)\n                finalize_allocation_3154(expr_51450_mpos)\n                /// @src 46:4285:4302  \"return someString\"\n                var_51442_mpos := expr_51450_mpos\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000814000a\"\n    }\n}\n","hash":"010000b325ba75808e2f0aa003064663bb37188031cfde7129ca852ba3e2e229","factoryDependencies":{},"id":46}