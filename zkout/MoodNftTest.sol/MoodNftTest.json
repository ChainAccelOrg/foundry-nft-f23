{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"MoodNftTest.sol:MoodNftTest\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_10\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_265\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.le\t@.BB0_12\n\tsub.s!\t@CPI0_3[0], r2, r1\n\tjump.gt\t@.BB0_38\n\tsub.s!\t@CPI0_13[0], r2, r1\n\tjump.le\t@.BB0_65\n\tsub.s!\t@CPI0_14[0], r2, r1\n\tjump.gt\t@.BB0_99\n\tsub.s!\t@CPI0_17[0], r2, r1\n\tjump.eq\t@.BB0_146\n\tsub.s!\t@CPI0_18[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t34, r0, r1\n\tsload\tr1, r1\n\tshr.s\t8, r1, r1\n\tjump\t@.BB0_203\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t30, r0, r1\n\tsload\tr1, r2\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t324, r0, r1\n\tadd\t31, r0, r2\n\tsstore\tr2, r1\n\tadd\t300, r0, r1\n\tadd\t32, r0, r2\n\tsstore\tr2, r1\n\tadd\t260, r0, r1\n\tadd\t33, r0, r4\n\tsstore\tr4, r1\n\tadd\t34, r0, r1\n\tsload\tr1, r4\n\tand\tr4, r3, r3\n\tor\t1, r3, r3\n\tsstore\tr1, r3\n\tst.2\t256, r2\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tsub.s!\t@CPI0_22[0], r2, r4\n\tjump.le\t@.BB0_44\n\tsub.s!\t@CPI0_23[0], r2, r1\n\tjump.le\t@.BB0_60\n\tsub.s!\t@CPI0_24[0], r2, r1\n\tjump.gt\t@.BB0_91\n\tsub.s!\t@CPI0_27[0], r2, r1\n\tjump.eq\t@.BB0_132\n\tsub.s!\t@CPI0_28[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t@CPI0_57[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_59[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\t1, r0, r2\n\tadd\tr2, r0, stack-[13]\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_332\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t34, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tadd\t@CPI0_57[0], r0, r2\n\tst.2\t0, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_40[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_61[0], r0, r1\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.eq\t@.BB0_26\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tadd\tr4, r0, stack-[14]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_582\n.BB0_26:\n\tadd\tr4, r0, r2\n\tsub.s!\t@CPI0_47[0], r4, r1\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r2\n\tadd\t@CPI0_57[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_59[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[13], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_660\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_57[0], r0, r2\n\tst.2\t0, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_40[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r2\n\tadd\t@CPI0_99[0], r0, r1\n\tst.1\tr2, r1\n\tadd\tr2, r0, stack-[13]\n\tadd\t4, r2, r1\n\tadd\tr1, r0, stack-[11]\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.eq\t@.BB0_35\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[13], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_706\n.BB0_35:\n\tadd\tstack-[13], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[13], r0, r3\n\tst.1\t64, r3\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_63[0], r0, r1\n\tst.1\tr3, r1\n\tadd\tstack-[11], r0, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_40[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_711\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_712\n.BB0_38:\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.le\t@.BB0_84\n\tsub.s!\t@CPI0_5[0], r2, r1\n\tjump.gt\t@.BB0_112\n\tsub.s!\t@CPI0_8[0], r2, r1\n\tjump.eq\t@.BB0_152\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t36, r0, r1\n\tjump\t@.BB0_202\n.BB0_44:\n\tsub.s!\t@CPI0_32[0], r2, r4\n\tjump.gt\t@.BB0_51\n\tsub.s!\t@CPI0_36[0], r2, r1\n\tjump.eq\t@.BB0_127\n\tsub.s!\t@CPI0_37[0], r2, r1\n\tjump.eq\t@.BB0_116\n\tsub.s!\t@CPI0_38[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t22, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_50\n\tadd\t160, r0, r4\n\tadd\t@CPI0_125[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_230:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_40[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_230\n\tjump\t@.BB0_260\n.BB0_51:\n\tsub.s!\t@CPI0_33[0], r2, r4\n\tjump.eq\t@.BB0_129\n\tsub.s!\t@CPI0_34[0], r2, r1\n\tjump.eq\t@.BB0_120\n\tsub.s!\t@CPI0_35[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t2, r0, r1\n\tst.1\t128, r1\n\tadd\t4, r0, r2\n\tst.1\t224, r2\n\tadd\t@CPI0_103[0], r0, r2\n\tst.1\t256, r2\n\tadd\t224, r0, r2\n\tst.1\t160, r2\n\tadd\t352, r0, r2\n\tst.1\t64, r2\n\tadd\t24, r0, r2\n\tst.1\t288, r2\n\tadd\t@CPI0_104[0], r0, r2\n\tst.1\t320, r2\n\tadd\t288, r0, r2\n\tst.1\t192, r2\n\tadd\t@CPI0_105[0], r0, r2\n\tst.1\t352, r2\n\tadd\t32, r0, r2\n\tadd\tr2, r0, stack-[13]\n\tst.1\t356, r2\n\tst.1\t388, r1\n\tadd\t420, r0, r1\n\tadd\t484, r0, r4\n\tadd\t128, r0, r2\n\tadd\t1, r0, r3\n\tsub.s\t32, r0, r10\n\tjump\t@.BB0_57\n.BB0_56:\n\tadd\t31, r5, r6\n\tand\tr6, r10, r6\n\tadd\tr5, r4, r5\n\tst.1\tr5, r0\n\tadd\tr6, r4, r4\n\tand!\t1, r3, r3\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB0_204\n.BB0_57:\n\tsub.s\t420, r4, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t32, r2, r2\n\tld.1\tr2, r5\n\tld.1.inc\tr5, r5, r6\n\tst.1.inc\tr4, r5, r4\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_56\n\tadd\tr0, r0, r7\n.BB0_59:\n\tadd\tr7, r4, r8\n\tadd\tr6, r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB0_59\n\tjump\t@.BB0_56\n.BB0_60:\n\tsub.s!\t@CPI0_29[0], r2, r1\n\tjump.eq\t@.BB0_185\n\tsub.s!\t@CPI0_30[0], r2, r1\n\tjump.eq\t@.BB0_177\n\tsub.s!\t@CPI0_31[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tnear_call\tr0, @copy_literal_to_memory_fe40350ebfdea6067edc9712cc5f0efc7c62db199d168463c9702ecad8d7afae, @DEFAULT_UNWIND\n\tjump\t@.BB0_89\n.BB0_65:\n\tsub.s!\t@CPI0_19[0], r2, r1\n\tjump.eq\t@.BB0_188\n\tsub.s!\t@CPI0_20[0], r2, r1\n\tjump.eq\t@.BB0_180\n\tsub.s!\t@CPI0_21[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t26, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_47[0], r5, r2\n\tjump.gt\t@.BB0_250\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_48[0], r2, r2\n\tsub.s!\t@CPI0_49[0], r2, r3\n\tjump.gt\t@.BB0_250\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_173\n\tadd\t128, r0, r6\n\tadd\t@CPI0_56[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_73:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_410\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_79\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[11]\n\tadd\tr8, r0, stack-[12]\n\tadd\tr6, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_80\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_78:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_78\n\tjump\t@.BB0_81\n.BB0_79:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_81\n.BB0_80:\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n.BB0_81:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r3\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tadd\t32, r6, r6\n\tst.1\t64, r1\n\tst.1\tr6, r9\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_73\n\tjump\t@.BB0_172\n.BB0_84:\n\tsub.s!\t@CPI0_10[0], r2, r1\n\tjump.eq\t@.BB0_200\n\tsub.s!\t@CPI0_11[0], r2, r1\n\tjump.eq\t@.BB0_182\n\tsub.s!\t@CPI0_12[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tnear_call\tr0, @copy_literal_to_memory_be502a4d8d2d3c2d1d4a9c4a93a739b2b651b59e1442db32b5fea90e59187e03, @DEFAULT_UNWIND\n.BB0_89:\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[14]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string_to_string, @DEFAULT_UNWIND\n.BB0_90:\n\tadd\tstack-[14], r0, r4\n\tjump\t@.BB0_262\n.BB0_91:\n\tsub.s!\t@CPI0_25[0], r2, r1\n\tjump.eq\t@.BB0_144\n\tsub.s!\t@CPI0_26[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t27, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[5]\n\tsub.s!\t@CPI0_47[0], r2, r2\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[5], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_48[0], r2, r2\n\tsub.s!\t@CPI0_49[0], r2, r3\n\tjump.gt\t@.BB0_250\n\tadd\t128, r2, r15\n\tst.1\t64, r15\n\tadd\tstack-[5], r0, r3\n\tst.1\t128, r3\n\tst.1\t0, r1\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_337\n.BB0_97:\n\tadd\t32, r0, r1\n\tst.1.inc\tr15, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\t64, r15, r3\n\tshl.s\t5, r1, r2\n\tadd\tr2, r3, r2\n\tsub!\tr1, r0, r4\n\tjump.ne\t@.BB0_416\n.BB0_98:\n\tsub\tr2, r15, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r15, r3\n\tadd.ge\tr2, r0, r15\n\tshl.s\t64, r15, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_99:\n\tsub.s!\t@CPI0_15[0], r2, r1\n\tjump.eq\t@.BB0_155\n\tsub.s!\t@CPI0_16[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t8, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tjump.ne\t@.BB0_111\n\tadd\t@CPI0_43[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.1\t132, r1\n\tadd\t@CPI0_45[0], r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_106\n\tadd\tr0, r0, r7\n.BB0_105:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_105\n.BB0_106:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_108\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_108:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_277\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r4\n\tst.1\t64, r4\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_265\n\tld.1\t128, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n.BB0_111:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\tr4, r1\n\tshl.s\t64, r4, r1\n\tor\t@CPI0_42[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_112:\n\tsub.s!\t@CPI0_6[0], r2, r1\n\tjump.eq\t@.BB0_174\n\tsub.s!\t@CPI0_7[0], r2, r1\n\tjump.ne\t@.BB0_265\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t30, r0, r1\n\tjump\t@.BB0_176\n.BB0_116:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t@CPI0_126[0], r0, r1\n\tst.1\t164, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_127[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tadd\tr2, r0, stack-[10]\n\tst.1\t196, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_128[0], r1, r1\n\tst.1\t228, r0\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_266\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_237\n.BB0_120:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t29, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[1]\n\tsub.s!\t@CPI0_47[0], r2, r2\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[1], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_48[0], r2, r2\n\tsub.s!\t@CPI0_49[0], r2, r3\n\tjump.gt\t@.BB0_250\n\tadd\t128, r2, r3\n\tst.1\t64, r3\n\tadd\tstack-[1], r0, r4\n\tst.1\t128, r4\n\tst.1\t0, r1\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_306\n.BB0_124:\n\tadd\t32, r0, r1\n\tst.1.inc\tr3, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[14]\n\tadd\t64, r3, r2\n\tshl.s\t5, r1, r3\n\tadd\tr3, r2, r6\n\tadd\tr1, r0, stack-[13]\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_424\n\tadd\tr6, r0, r11\n.BB0_126:\n\tadd\tstack-[14], r0, r4\n\tsub\tr11, r4, r1\n\tjump\t@.BB0_263\n.BB0_127:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tnear_call\tr0, @fun_isZkSyncChain, @DEFAULT_UNWIND\n\tjump\t@.BB0_184\n.BB0_129:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_265\n\tadd\t34, r0, r2\n\tsload\tr2, r4\n\tadd\t@CPI0_120[0], r0, r2\n\tst.1\t128, r2\n\tcontext.gas_left\tr5\n\tshr.s\t8, r4, r4\n\tand\t@CPI0_40[0], r4, r2\n\tsub.s!\t4, r2, r4\n\tadd\tr2, r0, stack-[14]\n\tjump.ne\t@.BB0_243\n\tptr.add\tr1, r3, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_244\n.BB0_132:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t@CPI0_57[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_59[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\t1, r0, r2\n\tadd\tr2, r0, stack-[13]\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_327\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t34, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tadd\t@CPI0_57[0], r0, r2\n\tst.2\t0, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_40[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_61[0], r0, r1\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tadd\tr4, r0, stack-[11]\n\tjump.eq\t@.BB0_141\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[11], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_587\n.BB0_141:\n\tsub.s!\t@CPI0_47[0], r4, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[11], r0, r3\n\tst.1\t64, r3\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_100[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tadd\tstack-[13], r0, r3\n\tst.1\tr1, r3\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_40[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_597\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_603\n.BB0_144:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tnear_call\tr0, @fun_isOnZkSyncChainId, @DEFAULT_UNWIND\n\tjump\t@.BB0_184\n.BB0_146:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t28, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[6]\n\tsub.s!\t@CPI0_47[0], r2, r2\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[6], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_48[0], r2, r2\n\tsub.s!\t@CPI0_49[0], r2, r3\n\tjump.gt\t@.BB0_250\n\tadd\t128, r2, r11\n\tst.1\t64, r11\n\tadd\tstack-[6], r0, r3\n\tst.1\t128, r3\n\tst.1\t0, r1\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_375\n.BB0_150:\n\tadd\t32, r0, r1\n\tst.1.inc\tr11, r1, r1\n\tld.1\t128, r2\n\tst.1\tr1, r2\n\tadd\t64, r11, r3\n\tshl.s\t5, r2, r1\n\tadd\tr1, r3, r1\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_411\n.BB0_151:\n\tsub\tr1, r11, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r11, r3\n\tadd.ge\tr2, r0, r11\n\tshl.s\t64, r11, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_152:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t21, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_251\n\tjump\t@.BB0_50\n.BB0_155:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t25, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_47[0], r5, r2\n\tjump.gt\t@.BB0_250\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_48[0], r2, r2\n\tsub.s!\t@CPI0_49[0], r2, r3\n\tjump.gt\t@.BB0_250\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_173\n\tadd\t128, r0, r6\n\tadd\t@CPI0_50[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_160:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_410\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_166\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[11]\n\tadd\tr8, r0, stack-[12]\n\tadd\tr6, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_167\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_165:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_165\n\tjump\t@.BB0_168\n.BB0_166:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_168\n.BB0_167:\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[11], r0, r9\n.BB0_168:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r3\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tadd\t32, r6, r6\n\tst.1\t64, r1\n\tst.1\tr6, r9\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_160\n.BB0_172:\n\tld.1\t64, r1\n.BB0_173:\n\tadd\tr1, r0, stack-[14]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_array_string_dyn, @DEFAULT_UNWIND\n\tjump\t@.BB0_90\n.BB0_174:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t34, r0, r1\n.BB0_176:\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_39[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_177:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t23, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_254\n\tjump\t@.BB0_50\n.BB0_180:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_39[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_182:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tnear_call\tr0, @fun_isOnZkSyncPrecompiles, @DEFAULT_UNWIND\n.BB0_184:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_42[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_185:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t24, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_257\n.BB0_50:\n\tadd\t32, r0, r2\n\tjump\t@.BB0_261\n.BB0_188:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t@CPI0_57[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_59[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\t1, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_403\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t34, r0, r1\n\tadd\tr1, r0, stack-[13]\n\tsload\tr1, r1\n\tadd\t@CPI0_57[0], r0, r2\n\tst.2\t0, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_40[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_61[0], r0, r1\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tadd\tr4, r0, stack-[12]\n\tjump.eq\t@.BB0_197\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[12], r0, r4\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_592\n.BB0_197:\n\tsub.s!\t@CPI0_47[0], r4, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[12], r0, r3\n\tst.1\t64, r3\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_63[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_40[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_607\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_608\n.BB0_200:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t35, r0, r1\n.BB0_202:\n\tsload\tr1, r1\n.BB0_203:\n\tand\t@CPI0_40[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_39[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_204:\n\tadd\tr10, r0, stack-[14]\n\tsub.s\t352, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tshl.s\t96, r1, r1\n\tor\tr2, r1, r1\n\tor\t@CPI0_106[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s\t5, r3, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_231\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_208\n\tadd\tr0, r0, r2\n.BB0_207:\n\tshl.s\t5, r2, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t352, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r6\n\tjump.lt\t@.BB0_207\n.BB0_208:\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB0_210\n\tshl.s\t5, r5, r2\n\tptr.add\tr1, r2, r1\n\tshl.s\t3, r4, r4\n\tadd\t352, r2, r2\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_210:\n\tadd\t31, r3, r1\n\tand\t@CPI0_107[0], r1, r2\n\tadd\t352, r2, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r4\n\tjump.lt\t@.BB0_265\n\tld.1\t352, r5\n\tsub.s!\t@CPI0_47[0], r5, r4\n\tjump.gt\t@.BB0_265\n\tadd\t352, r3, r6\n\tadd\t383, r5, r4\n\tsub!\tr4, r6, r4\n\tjump.ge\t@.BB0_265\n\tadd\t352, r5, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI0_47[0], r4, r7\n\tjump.gt\t@.BB0_250\n\tadd\t31, r4, r7\n\tand\tstack-[14], r7, r7\n\tadd\t63, r7, r7\n\tand\tstack-[14], r7, r7\n\tadd\tr7, r1, r7\n\tsub.s!\t@CPI0_47[0], r7, r8\n\tjump.gt\t@.BB0_250\n\tadd\t384, r5, r5\n\tst.1\t64, r7\n\tst.1\tr1, r4\n\tadd\tr4, r5, r7\n\tsub!\tr7, r6, r6\n\tjump.gt\t@.BB0_265\n\tadd\t384, r2, r2\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_219\n\tadd\tr0, r0, r6\n.BB0_218:\n\tadd\tr6, r2, r7\n\tadd\tr6, r5, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_218\n.BB0_219:\n\tadd\tr4, r2, r4\n\tst.1\tr4, r0\n\tld.1\tr2, r2\n\tld.1\tr1, r1\n\tsub.s!\t31, r1, r4\n\tjump.gt\t@.BB0_221\n\tshl.s\t3, r1, r4\n\tsub\t256, r4, r4\n\tsub.s\t1, r0, r5\n\tshl\tr5, r4, r4\n\tsub!\tr1, r0, r1\n\tadd.eq\tr0, r0, r4\n\tand\tr4, r2, r2\n.BB0_221:\n\tld.1\t64, r4\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_543\n\tadd\tr4, r0, r2\n\tsub.s!\t@CPI0_111[0], r4, r1\n\tjump.gt\t@.BB0_250\n\tadd\tr2, r0, r6\n\tadd\t96, r6, r1\n\tst.1\t64, r1\n\tadd\t64, r6, r1\n\tadd\t@CPI0_115[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r6, r3\n\tadd\t@CPI0_116[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t44, r0, r1\n\tst.1\tr6, r1\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tadd\t@CPI0_117[0], r0, r4\n\tst.1\tr2, r4\n\tadd\t36, r1, r4\n\tadd\tstack-[13], r0, r5\n\tst.1\tr4, r5\n\tld.1\tr6, r4\n\tadd\t68, r1, r5\n\tst.1\tr5, r4\n\tadd\t100, r1, r5\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_226\n\tadd\tr0, r0, r6\n.BB0_225:\n\tadd\tr6, r5, r7\n\tadd\tr6, r3, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_225\n.BB0_226:\n\tadd\tr4, r5, r3\n\tst.1\tr3, r0\n\tadd\t31, r4, r3\n\tand\tstack-[14], r3, r3\n\tadd\t68, r3, r4\n\tst.1\tr1, r4\n\tadd\t131, r3, r3\n\tand\tstack-[14], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_47[0], r3, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr1, r2, r1\n\tadd\t@CPI0_118[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_231:\n\tld.1\t64, r2\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB0_234\n\tadd\tr0, r0, r6\n.BB0_233:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_233\n.BB0_234:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_236:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_237:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_240\n\tadd\tr0, r0, r6\n.BB0_239:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_239\n.BB0_240:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_242\n.BB0_241:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_242:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_243:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.ge\tr1, r0, r5\n\tshl.s\t192, r5, r1\n\tor\t@CPI0_121[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_272\n.BB0_244:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_247\n\tadd\tr0, r0, r5\n.BB0_246:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_246\n.BB0_247:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_249\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_249:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, stack-[13]\n\tand\tstack-[13], r1, r2\n\tsub.s!\t@CPI0_49[0], r2, r1\n\tjump.le\t@.BB0_264\n.BB0_250:\n\tadd\t@CPI0_114[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_60[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_251:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_41[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_252:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_40[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_252\n\tjump\t@.BB0_260\n.BB0_254:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_101[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_255:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_40[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_255\n\tjump\t@.BB0_260\n.BB0_257:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_102[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_258:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_40[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_258\n.BB0_260:\n\tsub.s\t96, r5, r2\n.BB0_261:\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[14]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @abi_encode_array_address_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n.BB0_262:\n\tsub\tr1, r4, r1\n.BB0_263:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_264:\n\tadd\t128, r2, r1\n\tadd\t@CPI0_64[0], r0, r4\n\tsub.s!\t32, r3, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI0_64[0], r3, r6\n\tsub!\tr6, r0, r7\n\tadd.le\tr0, r0, r4\n\tsub.s!\t@CPI0_64[0], r6, r6\n\tadd.ne\tr5, r0, r4\n\tst.1\t64, r1\n\tsub!\tr4, r0, r4\n\tjump.eq\t@.BB0_282\n.BB0_265:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_266:\n\tand\t@CPI0_40[0], r1, r1\n\tadd\t35, r0, r3\n\tsload\tr3, r2\n\tand\t@CPI0_129[0], r2, r2\n\tor\tr2, r1, r1\n\tadd\tr3, r0, stack-[9]\n\tsstore\tr3, r1\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_130[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_131[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub.s!\tstack-[14], r1, r2\n\tjump.eq\t@.BB0_270\n\tadd\t32, r0, r2\n\tadd\tr2, r0, stack-[8]\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tjump.eq\t@.BB0_270\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB0_448\n.BB0_270:\n\tadd\tstack-[9], r0, r1\n\tsload\tr1, r2\n\tld.1\t64, r10\n\tadd\t@CPI0_139[0], r0, r1\n\tst.1\tr10, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_40[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_432\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_438\n.BB0_272:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_275\n\tadd\tr0, r0, r6\n.BB0_274:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_274\n.BB0_275:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_277:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_280\n\tadd\tr0, r0, r6\n.BB0_279:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_279\n.BB0_280:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_282:\n\tld.1\t128, r4\n\tsub.s!\t@CPI0_47[0], r4, r5\n\tjump.gt\t@.BB0_265\n\tadd\t128, r3, r5\n\tadd\t159, r4, r3\n\tadd\t@CPI0_64[0], r0, r6\n\tsub!\tr3, r5, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI0_64[0], r5, r8\n\tand\t@CPI0_64[0], r3, r3\n\tsub!\tr3, r8, r9\n\tadd.ge\tr0, r0, r6\n\txor\tr3, r8, r3\n\tsub.s!\t@CPI0_64[0], r3, r3\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r3\n\tjump.ne\t@.BB0_265\n\tadd\t128, r4, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_47[0], r3, r6\n\tjump.gt\t@.BB0_250\n\tadd\t31, r3, r6\n\tand\tstack-[13], r6, r6\n\tadd\t63, r6, r6\n\tand\tstack-[13], r6, r6\n\tadd\tr6, r1, r7\n\tsub.s!\t@CPI0_47[0], r7, r6\n\tjump.gt\t@.BB0_250\n\tadd\t160, r4, r6\n\tst.1\t64, r7\n\tst.1\tr1, r3\n\tadd\tr3, r6, r4\n\tsub!\tr4, r5, r4\n\tjump.gt\t@.BB0_265\n\tadd\t160, r2, r4\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_290\n\tadd\tr0, r0, r2\n.BB0_289:\n\tadd\tr2, r4, r5\n\tadd\tr2, r6, r7\n\tld.1\tr7, r7\n\tst.1\tr5, r7\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB0_289\n.BB0_290:\n\tadd\tr3, r4, r2\n\tst.1\tr2, r0\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_293\n\tadd\tr0, r0, r5\n.BB0_292:\n\tadd\tr5, r3, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_292\n.BB0_293:\n\tadd\tr1, r3, r1\n\tst.1\tr1, r0\n\tsub\tr1, r2, r1\n\tsub.s\t32, r1, r4\n\tst.1\tr2, r4\n\tadd\t31, r1, r1\n\tand\tstack-[13], r1, r4\n\tadd\tr4, r2, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_47[0], r1, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_55[0], r1, r2\n\tjump.gt\t@.BB0_250\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\t32, r1, r3\n\tadd\t@CPI0_122[0], r0, r2\n\tst.1\tr3, r2\n\tadd!\t8, r0, r4\n\tst.1\tr1, r4\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tjump.eq\t@.BB0_300\n\tadd\tr0, r0, r5\n.BB0_299:\n\tadd\tr5, r2, r6\n\tadd\tr5, r3, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_299\n.BB0_300:\n\tadd\tr4, r2, r3\n\tst.1\tr3, r0\n\tsub\tr3, r1, r3\n\tsub.s\t32, r3, r4\n\tst.1\tr1, r4\n\tadd\t31, r3, r3\n\tand\tstack-[13], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_47[0], r3, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r1\n\tsub!\tstack-[12], r1, r1\n\tjump.ne\t@.BB0_639\n\tld.1\t64, r2\n\tadd\t@CPI0_123[0], r0, r1\n\tadd\tr2, r0, stack-[12]\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_670\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_671\n.BB0_306:\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_52[0], r2, r1\n\tjump.gt\t@.BB0_250\n\tadd\t@CPI0_119[0], r0, stack-[5]\n\tadd\t160, r0, stack-[4]\n\tadd\tr0, r0, stack-[3]\n.BB0_308:\n\tadd\tstack-[14], r0, r2\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[5], r0, r3\n\tsload\tr3, r1\n\tand\t@CPI0_40[0], r1, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t1, r3, r1\n\tsload\tr1, r5\n\tsub.s!\t@CPI0_47[0], r5, r2\n\tjump.gt\t@.BB0_250\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_48[0], r2, r2\n\tld.1\t64, r3\n\tadd\tr3, r2, r2\n\tadd\tr3, r0, stack-[6]\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI0_47[0], r2, r4\n\tjump.gt\t@.BB0_250\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r2\n\tadd\tr5, r0, stack-[7]\n\tadd\tstack-[6], r0, r2\n\tst.1\tr2, r5\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_325\n\tld\tr1, r6\n\tadd\tr0, r0, r7\n\tadd\tstack-[6], r0, r8\n.BB0_314:\n\tsload\tr6, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_410\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_320\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr9, r0, stack-[10]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr7, r0, stack-[12]\n\tadd\tr6, r0, stack-[13]\n\tst.1\t0, r6\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tadd\tstack-[9], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[12], r0, r7\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_321\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n\tadd\tstack-[8], r0, r11\n.BB0_319:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_319\n\tjump\t@.BB0_322\n.BB0_320:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_322\n.BB0_321:\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n.BB0_322:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r3\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tadd\t32, r8, r8\n\tst.1\t64, r1\n\tst.1\tr8, r9\n\tadd\t1, r6, r6\n\tadd\t1, r7, r7\n\tsub!\tr7, r5, r1\n\tjump.lt\t@.BB0_314\n.BB0_325:\n\tadd\tstack-[2], r0, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[4], r0, r2\n\tst.1.inc\tr2, r1, r2\n\tadd\tr2, r0, stack-[4]\n\tld.1\t64, r3\n\tadd\tstack-[3], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[3]\n\tsub.s!\tstack-[1], r2, r1\n\tjump.ge\t@.BB0_659\n\tadd\tstack-[5], r0, r1\n\tadd\t2, r1, stack-[5]\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_55[0], r3, r1\n\tjump.le\t@.BB0_308\n\tjump\t@.BB0_250\n.BB0_327:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_330\n\tadd\tr0, r0, r6\n.BB0_329:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_329\n.BB0_330:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_332:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_335\n\tadd\tr0, r0, r6\n.BB0_334:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_334\n.BB0_335:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_337:\n\tsub.s!\t@CPI0_52[0], r2, r1\n\tjump.gt\t@.BB0_250\n\tadd\t@CPI0_98[0], r0, r5\n\tadd\t160, r0, stack-[12]\n\tadd\tr0, r0, stack-[11]\n.BB0_339:\n\tadd\t64, r15, r6\n\tst.1\t64, r6\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_410\n\tst.1\tr6, r4\n\tadd\t96, r15, r3\n\tsub!\tr2, r0, r2\n\tadd\tr15, r0, stack-[14]\n\tadd\tr5, r0, stack-[13]\n\tjump.eq\t@.BB0_345\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr6, r0, stack-[10]\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tadd\tstack-[9], r0, r7\n\tsub!\tr7, r0, r2\n\tjump.eq\t@.BB0_346\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[10], r0, r6\n\tadd\tstack-[8], r0, r8\n.BB0_344:\n\tadd\tr1, r8, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r7, r3\n\tjump.lt\t@.BB0_344\n\tjump\t@.BB0_347\n.BB0_345:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_347\n.BB0_346:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[10], r0, r6\n.BB0_347:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, stack-[10]\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r3\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tst.1.inc\tr15, r6, r1\n\tadd\tr1, r0, stack-[6]\n\tadd\t1, r5, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r2\n\tadd\tstack-[7], r0, r8\n\tsub.s!\t8, r8, r1\n\tjump.lt\t@.BB0_368\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[8], r0, r7\n.BB0_352:\n\tadd\t224, r7, r3\n\tsload\tr2, r4\n\tand\t@CPI0_54[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t192, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t160, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t128, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t96, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t64, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t32, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr7, r3\n\tadd\t1, r2, r2\n\tadd\t256, r7, r7\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r8, r3\n\tjump.lt\t@.BB0_352\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_355\n.BB0_354:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr7, r3, r7\n\tor\t1, r1, r1\n.BB0_355:\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[9], r0, r4\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_357\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_370\n.BB0_358:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_359\n.BB0_371:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_372\n.BB0_360:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_361\n.BB0_373:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_374\n.BB0_362:\n\tsub!\tr1, r8, r1\n\tjump.ge\t@.BB0_364\n.BB0_363:\n\tand\t@CPI0_54[0], r2, r1\n\tst.1.inc\tr7, r1, r7\n.BB0_364:\n\tsub\tr7, r4, r1\n\tadd\t31, r1, r1\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r3\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\tr1, r4\n\tadd\tstack-[12], r0, r1\n\tst.1.inc\tr1, r6, r1\n\tadd\tr1, r0, stack-[12]\n\tld.1\t64, r15\n\tadd\tstack-[11], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[11]\n\tsub.s!\tstack-[5], r2, r1\n\tjump.ge\t@.BB0_542\n\tadd\t2, r5, r5\n\tsub.s!\t@CPI0_55[0], r15, r1\n\tjump.le\t@.BB0_339\n\tjump\t@.BB0_250\n.BB0_357:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_358\n.BB0_370:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_371\n.BB0_359:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_360\n.BB0_372:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_373\n.BB0_361:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_362\n.BB0_374:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r1\n\tjump.lt\t@.BB0_363\n\tjump\t@.BB0_364\n.BB0_368:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[8], r0, r7\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_354\n\tjump\t@.BB0_355\n.BB0_375:\n\tsub.s!\t@CPI0_52[0], r2, r1\n\tjump.gt\t@.BB0_250\n\tadd\t@CPI0_53[0], r0, r4\n\tadd\t160, r0, r5\n\tadd\t32784, r0, stack-[5]\n\tadd\tr0, r0, r7\n.BB0_377:\n\tadd\tr7, r0, stack-[11]\n\tadd\tr5, r0, stack-[12]\n\tadd\t64, r11, r1\n\tst.1\t64, r1\n\tsload\tr4, r1\n\tand\t@CPI0_40[0], r1, r1\n\tadd\tr11, r0, stack-[14]\n\tst.1.inc\tr11, r1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tr4, r0, stack-[13]\n\tadd\t1, r4, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r2\n\tadd\tstack-[8], r0, r10\n\tsub.s!\t8, r10, r1\n\tjump.lt\t@.BB0_396\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[11], r0, r7\n\tadd\tstack-[10], r0, r8\n\tadd\tstack-[9], r0, r9\n.BB0_380:\n\tadd\t224, r9, r3\n\tsload\tr2, r4\n\tand\t@CPI0_54[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t192, r9, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t160, r9, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t128, r9, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t96, r9, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t64, r9, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_54[0], r3, r3\n\tadd\t32, r9, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr9, r3\n\tadd\t1, r2, r2\n\tadd\t256, r9, r9\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r10, r3\n\tjump.lt\t@.BB0_380\n\tsload\tr2, r2\n\tsub!\tr1, r10, r3\n\tjump.ge\t@.BB0_383\n.BB0_382:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr9, r3, r9\n\tor\t1, r1, r1\n.BB0_383:\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[12], r0, r5\n\tsub!\tr1, r10, r3\n\tjump.ge\t@.BB0_385\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr9, r3, r9\n\tadd\t1, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_398\n.BB0_386:\n\tsub!\tr1, r10, r3\n\tjump.ge\t@.BB0_387\n.BB0_399:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr9, r3, r9\n\tadd\t1, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_400\n.BB0_388:\n\tsub!\tr1, r10, r3\n\tjump.ge\t@.BB0_389\n.BB0_401:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr9, r3, r9\n\tadd\t1, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_402\n.BB0_390:\n\tsub!\tr1, r10, r1\n\tjump.ge\t@.BB0_392\n.BB0_391:\n\tand\t@CPI0_54[0], r2, r1\n\tst.1.inc\tr9, r1, r9\n.BB0_392:\n\tsub\tr9, r8, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r8, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r3\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\tr1, r8\n\tst.1.inc\tr5, r6, r5\n\tld.1\t64, r11\n\tadd\t1, r7, r7\n\tsub.s!\tstack-[6], r7, r1\n\tjump.ge\t@.BB0_541\n\tadd\t2, r4, r4\n\tsub.s!\t@CPI0_55[0], r11, r1\n\tjump.le\t@.BB0_377\n\tjump\t@.BB0_250\n.BB0_385:\n\tsub!\tr1, r10, r3\n\tjump.ge\t@.BB0_386\n.BB0_398:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr9, r3, r9\n\tadd\t1, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_399\n.BB0_387:\n\tsub!\tr1, r10, r3\n\tjump.ge\t@.BB0_388\n.BB0_400:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr9, r3, r9\n\tadd\t1, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_401\n.BB0_389:\n\tsub!\tr1, r10, r3\n\tjump.ge\t@.BB0_390\n.BB0_402:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_54[0], r3, r3\n\tst.1.inc\tr9, r3, r9\n\tadd\t1, r1, r1\n\tsub!\tr1, r10, r1\n\tjump.lt\t@.BB0_391\n\tjump\t@.BB0_392\n.BB0_396:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[11], r0, r7\n\tadd\tstack-[10], r0, r8\n\tadd\tstack-[9], r0, r9\n\tsload\tr2, r2\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_382\n\tjump\t@.BB0_383\n.BB0_403:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_406\n\tadd\tr0, r0, r6\n.BB0_405:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_405\n.BB0_406:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n.BB0_408:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_409:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_410:\n\tadd\t@CPI0_114[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_60[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_411:\n\tadd\t128, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_413\n.BB0_412:\n\tadd\t1, r6, r6\n\tsub!\tr6, r2, r7\n\tjump.ge\t@.BB0_151\n.BB0_413:\n\tsub\tr1, r11, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tadd\t32, r4, r4\n\tld.1\tr4, r7\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_40[0], r7, r7\n\tst.1.inc\tr1, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r5\n\tadd\t64, r1, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r1, r1\n\tsub!\tr8, r0, r9\n\tjump.eq\t@.BB0_412\n\tadd\tr0, r0, r9\n.BB0_415:\n\tadd\t32, r7, r7\n\tld.1\tr7, r10\n\tand\t@CPI0_54[0], r10, r10\n\tst.1.inc\tr1, r10, r1\n\tadd\t1, r9, r9\n\tsub!\tr9, r8, r10\n\tjump.lt\t@.BB0_415\n\tjump\t@.BB0_412\n.BB0_416:\n\tadd\t128, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_418\n.BB0_417:\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.ge\t@.BB0_98\n.BB0_418:\n\tsub\tr2, r15, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tadd\t32, r4, r4\n\tld.1\tr4, r7\n\tld.1.inc\tr7, r9, r8\n\tst.1.inc\tr2, r5, r7\n\tadd\t64, r2, r12\n\tld.1.inc\tr9, r10, r11\n\tst.1\tr12, r10\n\tadd\t96, r2, r9\n\tsub!\tr10, r0, r12\n\tjump.eq\t@.BB0_421\n\tadd\tr0, r0, r12\n.BB0_420:\n\tadd\tr12, r9, r13\n\tadd\tr11, r12, r14\n\tld.1\tr14, r14\n\tst.1\tr13, r14\n\tadd\t32, r12, r12\n\tsub!\tr12, r10, r13\n\tjump.lt\t@.BB0_420\n.BB0_421:\n\tadd\tr10, r9, r11\n\tst.1\tr11, r0\n\tadd\t31, r10, r10\n\tsub.s\t32, r0, r11\n\tand\tr10, r11, r10\n\tadd\tr10, r9, r9\n\tld.1\tr8, r8\n\tsub\tr9, r2, r2\n\tst.1\tr7, r2\n\tld.1\tr8, r7\n\tst.1.inc\tr9, r7, r2\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_417\n\tadd\tr0, r0, r9\n.BB0_423:\n\tadd\t32, r8, r8\n\tld.1\tr8, r10\n\tand\t@CPI0_54[0], r10, r10\n\tst.1.inc\tr2, r10, r2\n\tadd\t1, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_423\n\tjump\t@.BB0_417\n.BB0_424:\n\tadd\t128, r0, r3\n\tadd\t64, r0, r4\n\tadd\tr0, r0, r5\n\tjump\t@.BB0_426\n.BB0_425:\n\tadd\t1, r5, r5\n\tsub.s!\tstack-[13], r5, r1\n\tadd\tr11, r0, r6\n\tjump.ge\t@.BB0_126\n.BB0_426:\n\tsub.s\tstack-[14], r6, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr2, r7, r2\n\tadd\t32, r3, r3\n\tld.1\tr3, r7\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_40[0], r7, r7\n\tst.1.inc\tr6, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r4\n\tadd\t64, r6, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r6, r9\n\tshl.s\t5, r8, r10\n\tadd\tr10, r9, r11\n\tsub!\tr8, r0, r10\n\tjump.eq\t@.BB0_425\n\tadd\tr0, r0, r10\n\tjump\t@.BB0_429\n.BB0_428:\n\tadd\t31, r12, r1\n\tsub.s\t32, r0, r13\n\tand\tr1, r13, r1\n\tadd\tr12, r11, r12\n\tst.1\tr12, r0\n\tadd\tr1, r11, r11\n\tadd\t1, r10, r10\n\tsub!\tr10, r8, r1\n\tjump.ge\t@.BB0_425\n.BB0_429:\n\tsub\tr11, r6, r12\n\tsub.s\t96, r12, r12\n\tst.1.inc\tr9, r12, r9\n\tadd\t32, r7, r7\n\tld.1\tr7, r12\n\tld.1.inc\tr12, r12, r13\n\tst.1.inc\tr11, r12, r11\n\tsub!\tr12, r0, r14\n\tjump.eq\t@.BB0_428\n\tadd\tr0, r0, r14\n.BB0_431:\n\tadd\tr14, r11, r15\n\tadd\tr13, r14, r1\n\tld.1\tr1, r1\n\tst.1\tr15, r1\n\tadd\t32, r14, r14\n\tsub!\tr14, r12, r1\n\tjump.lt\t@.BB0_431\n\tjump\t@.BB0_428\n.BB0_432:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\tr10, r0, stack-[14]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_435\n\tadd\tr0, r0, r7\n.BB0_434:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_434\n.BB0_435:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_437\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_437:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_443\n.BB0_438:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr10, r0, r5\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r4\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_265\n\tld.1\tr5, r1\n\tsub.s!\t@CPI0_40[0], r1, r2\n\tjump.gt\t@.BB0_265\n.BB0_442:\n\tshl.s\t8, r1, r1\n\tand\t@CPI0_140[0], r1, r1\n\tadd\t34, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_141[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_443:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_446\n\tadd\tr0, r0, r6\n.BB0_445:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_445\n.BB0_446:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_448:\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[13]\n\tsub.s!\t@CPI0_49[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[13], r0, r3\n\tadd\t128, r3, r1\n\tst.1\t64, r1\n\tadd\t96, r3, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r3, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r3, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr3, r1\n\tadd\t32777, r0, stack-[12]\n\tadd\t1, r0, stack-[11]\n\tadd\tr0, r0, r5\n\tjump\t@.BB0_451\n.BB0_450:\n\tsub.s!\t3, r5, r1\n\tadd\t1, r5, r5\n\tjump.ge\t@.BB0_270\n.BB0_451:\n\tshl.s\t5, r5, r1\n\tadd\tr1, r3, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI0_40[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB0_450\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\tstack-[12], r0, r2\n\tadd\tstack-[11], r0, r3\n\tadd\tr5, r0, stack-[14]\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r5\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tadd\tstack-[13], r0, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_450\n\tld.1\t64, r4\n\tadd\t68, r4, r1\n\tadd\t@CPI0_132[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\t27, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_133[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_134[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s\t5, r3, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_655\n\tsub!\tr5, r0, r2\n\tadd\tstack-[14], r0, r8\n\tjump.eq\t@.BB0_457\n\tadd\tr0, r0, r2\n.BB0_456:\n\tshl.s\t5, r2, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r6\n\tjump.lt\t@.BB0_456\n.BB0_457:\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB0_459\n\tshl.s\t5, r5, r2\n\tptr.add\tr1, r2, r1\n\tadd\tstack-[14], r2, r2\n\tshl.s\t3, r4, r4\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_459:\n\tadd\t31, r3, r1\n\tand\t@CPI0_107[0], r1, r1\n\tadd\tstack-[14], r1, r2\n\tsub!\tr2, r1, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tadd\tr2, r0, stack-[13]\n\tsub.s!\t@CPI0_47[0], r2, r2\n\tjump.gt\t@.BB0_250\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_250\n\tadd\tstack-[13], r0, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_265\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_47[0], r1, r2\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[14], r3, r3\n\tadd\tstack-[14], r1, r1\n\tadd\t31, r1, r2\n\tadd\t@CPI0_64[0], r0, r4\n\tsub!\tr2, r3, r5\n\tadd\tr0, r0, r5\n\tadd.ge\tr4, r0, r5\n\tand\t@CPI0_64[0], r2, r2\n\tand\t@CPI0_64[0], r3, r6\n\tsub!\tr2, r6, r7\n\tadd.ge\tr0, r0, r4\n\txor\tr2, r6, r2\n\tsub.s!\t@CPI0_64[0], r2, r2\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r2\n\tjump.ne\t@.BB0_265\n\tld.1.inc\tr1, r1, r2\n\tsub.s!\t@CPI0_47[0], r1, r4\n\tjump.gt\t@.BB0_250\n\tadd\t31, r1, r4\n\tsub.s\t32, r0, stack-[11]\n\tand\tstack-[11], r4, r4\n\tadd\t63, r4, r4\n\tand\tstack-[11], r4, r4\n\tadd\tstack-[13], r4, r4\n\tsub.s!\t@CPI0_47[0], r4, r5\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r4\n\tadd\tstack-[13], r0, r4\n\tst.1.inc\tr4, r1, r4\n\tadd\tr4, r0, stack-[14]\n\tadd\tr1, r2, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB0_265\n\tsub!\tr1, r0, r3\n\tadd\tstack-[14], r0, r6\n\tjump.eq\t@.BB0_470\n\tadd\tr0, r0, r3\n.BB0_469:\n\tadd\tr3, r6, r4\n\tadd\tr3, r2, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_469\n.BB0_470:\n\tadd\tr1, r6, r1\n\tst.1\tr1, r0\n\tld.1\t64, r4\n\tadd\t68, r4, r1\n\tadd\t@CPI0_135[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\t29, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_133[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[12]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_134[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s\t5, r3, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_750\n\tsub!\tr5, r0, r2\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_474\n\tadd\tr0, r0, r2\n.BB0_473:\n\tshl.s\t5, r2, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r6\n\tjump.lt\t@.BB0_473\n.BB0_474:\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB0_476\n\tshl.s\t5, r5, r2\n\tptr.add\tr1, r2, r5\n\tadd\tstack-[12], r2, r2\n\tshl.s\t3, r4, r4\n\tld.1\tr2, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr5, r5\n\tsub\t256, r4, r4\n\tshr\tr5, r4, r5\n\tshl\tr5, r4, r4\n\tor\tr4, r6, r4\n\tst.1\tr2, r4\n.BB0_476:\n\tadd\t31, r3, r2\n\tand\t@CPI0_107[0], r2, r4\n\tadd\tstack-[12], r4, r6\n\tsub!\tr6, r4, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tadd\tr6, r0, stack-[7]\n\tsub.s!\t@CPI0_47[0], r6, r6\n\tjump.gt\t@.BB0_250\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_250\n\tadd\tstack-[7], r0, r5\n\tst.1\t64, r5\n\tsub.s!\t32, r3, r5\n\tjump.lt\t@.BB0_265\n\tadd\tstack-[12], r0, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI0_47[0], r5, r6\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[12], r3, r7\n\tadd\tstack-[12], r5, r5\n\tadd\t31, r5, r6\n\tadd\t@CPI0_64[0], r0, r8\n\tsub!\tr6, r7, r9\n\tadd\tr0, r0, r9\n\tadd.ge\tr8, r0, r9\n\tand\t@CPI0_64[0], r6, r6\n\tand\t@CPI0_64[0], r7, r10\n\tsub!\tr6, r10, r11\n\tadd.ge\tr0, r0, r8\n\txor\tr6, r10, r6\n\tsub.s!\t@CPI0_64[0], r6, r6\n\tadd.ne\tr9, r0, r8\n\tsub!\tr8, r0, r6\n\tjump.ne\t@.BB0_265\n\tld.1.inc\tr5, r5, r6\n\tsub.s!\t@CPI0_47[0], r5, r8\n\tjump.gt\t@.BB0_250\n\tadd\t31, r5, r8\n\tand\tstack-[11], r8, r8\n\tadd\t63, r8, r8\n\tand\tstack-[11], r8, r8\n\tadd\tstack-[7], r8, r8\n\tsub.s!\t@CPI0_47[0], r8, r9\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r8\n\tadd\tstack-[7], r0, r8\n\tst.1.inc\tr8, r5, r8\n\tadd\tr8, r0, stack-[12]\n\tadd\tr5, r6, r8\n\tsub!\tr8, r7, r7\n\tjump.gt\t@.BB0_265\n\tsub!\tr5, r0, r7\n\tadd\tstack-[12], r0, r10\n\tjump.eq\t@.BB0_487\n\tadd\tr0, r0, r7\n.BB0_486:\n\tadd\tr7, r10, r8\n\tadd\tr7, r6, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB0_486\n.BB0_487:\n\tadd\tr5, r10, r5\n\tst.1\tr5, r0\n\tadd\tstack-[9], r0, r5\n\tsload\tr5, r7\n\tld.1\t64, r8\n\tadd\t@CPI0_136[0], r0, r5\n\tst.1\tr8, r5\n\tadd\t4, r8, r5\n\tadd\tstack-[8], r0, r6\n\tst.1\tr5, r6\n\tadd\tstack-[13], r0, r5\n\tld.1\tr5, r5\n\tadd\t36, r8, r6\n\tst.1\tr6, r5\n\tadd\tr8, r0, stack-[13]\n\tadd\t68, r8, r6\n\tand\t@CPI0_40[0], r7, stack-[9]\n\tsub!\tr5, r0, r7\n\tadd\tstack-[14], r0, r10\n\tjump.eq\t@.BB0_490\n\tadd\tr0, r0, r7\n.BB0_489:\n\tadd\tr7, r6, r8\n\tadd\tr7, r10, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB0_489\n.BB0_490:\n\tadd\tr5, r6, r6\n\tst.1\tr6, r0\n\tcontext.gas_left\tr6\n\tadd\tstack-[9], r0, r7\n\tsub.s!\t4, r7, r7\n\tjump.eq\t@.BB0_493\n\tadd\t31, r5, r1\n\tand\tstack-[11], r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tadd\tstack-[13], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr2, r0, r3\n\tadd.lt\tr4, r0, r3\n\tshl.s\t64, r3, r3\n\tadd\t68, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r3, r1\n\tsub.s!\t@CPI0_0[0], r6, r3\n\tadd.ge\tr2, r0, r6\n\tshl.s\t192, r6, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[9], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_765\n\tadd\t31, r3, r2\n\tand\t@CPI0_107[0], r2, r4\n.BB0_493:\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tadd\tstack-[13], r0, r10\n\tjump.eq\t@.BB0_496\n\tadd\tr0, r0, r7\n.BB0_495:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_495\n.BB0_496:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_498\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[13], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_498:\n\tadd\tstack-[13], r4, r5\n\tsub!\tr5, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tadd\tr5, r0, stack-[6]\n\tsub.s!\t@CPI0_47[0], r5, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_250\n\tadd\tstack-[6], r0, r4\n\tst.1\t64, r4\n\tsub.s!\t32, r3, r4\n\tjump.lt\t@.BB0_265\n\tadd\tstack-[13], r0, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI0_47[0], r4, r5\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[13], r3, r6\n\tadd\tstack-[13], r4, r4\n\tadd\t31, r4, r5\n\tadd\t@CPI0_64[0], r0, r7\n\tsub!\tr5, r6, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI0_64[0], r5, r5\n\tand\t@CPI0_64[0], r6, r9\n\tsub!\tr5, r9, r10\n\tadd.ge\tr0, r0, r7\n\txor\tr5, r9, r5\n\tsub.s!\t@CPI0_64[0], r5, r5\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r5\n\tjump.ne\t@.BB0_265\n\tld.1.inc\tr4, r4, r5\n\tsub.s!\t@CPI0_47[0], r4, r7\n\tjump.gt\t@.BB0_250\n\tadd\t31, r4, r7\n\tand\tstack-[11], r7, r7\n\tadd\t63, r7, r7\n\tand\tstack-[11], r7, r7\n\tadd\tstack-[6], r7, r7\n\tsub.s!\t@CPI0_47[0], r7, r8\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r7\n\tadd\tstack-[6], r0, r7\n\tst.1.inc\tr7, r4, r7\n\tadd\tr7, r0, stack-[14]\n\tadd\tr4, r5, r7\n\tsub!\tr7, r6, r6\n\tjump.gt\t@.BB0_265\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_509\n\tadd\tr0, r0, r6\n.BB0_508:\n\tadd\tstack-[14], r6, r7\n\tadd\tr6, r5, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_508\n.BB0_509:\n\tadd\tstack-[14], r4, r4\n\tst.1\tr4, r0\n\tadd\t@CPI0_136[0], r0, r4\n\tld.1\t64, r6\n\tst.1\tr6, r4\n\tadd\t4, r6, r4\n\tadd\tstack-[8], r0, r5\n\tst.1\tr4, r5\n\tadd\tstack-[7], r0, r4\n\tld.1\tr4, r4\n\tadd\t36, r6, r5\n\tst.1\tr5, r4\n\tadd\tr6, r0, stack-[13]\n\tadd\t68, r6, r5\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_512\n\tadd\tr0, r0, r6\n.BB0_511:\n\tadd\tr6, r5, r7\n\tadd\tstack-[12], r6, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_511\n.BB0_512:\n\tadd\tr4, r5, r5\n\tst.1\tr5, r0\n\tcontext.gas_left\tr5\n\tadd\tstack-[9], r0, r6\n\tsub.s!\t4, r6, r6\n\tjump.eq\t@.BB0_515\n\tadd\t31, r4, r1\n\tand\tstack-[11], r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tadd\tstack-[13], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr2, r0, r3\n\tadd.lt\tr4, r0, r3\n\tshl.s\t64, r3, r3\n\tadd\t68, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r3, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.ge\tr2, r0, r5\n\tshl.s\t192, r5, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[9], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_801\n\tadd\t31, r3, r2\n.BB0_515:\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_518\n\tadd\tr0, r0, r6\n.BB0_517:\n\tshl.s\t5, r6, r7\n\tadd\tstack-[13], r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_517\n.BB0_518:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_520\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tstack-[13], r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_520:\n\tand\t@CPI0_107[0], r2, r2\n\tadd\tstack-[13], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r4\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\t@CPI0_64[0], r0, r2\n\tsub.s!\t32, r3, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr2, r0, r4\n\tsub!\tr0, r0, r5\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_64[0], r0, r5\n\tadd.ne\tr4, r0, r2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_265\n\tadd\tstack-[13], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_47[0], r2, r4\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[13], r3, r5\n\tadd\tstack-[13], r2, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_64[0], r0, r4\n\tsub!\tr3, r5, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_64[0], r3, r3\n\tand\t@CPI0_64[0], r5, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\tr0, r0, r4\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_64[0], r3, r3\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.ne\t@.BB0_265\n\tld.1.inc\tr2, r3, r4\n\tsub.s!\t@CPI0_47[0], r3, r2\n\tjump.gt\t@.BB0_250\n\tadd\t31, r3, r2\n\tand\tstack-[11], r2, r2\n\tadd\t63, r2, r2\n\tand\tstack-[11], r2, r2\n\tadd\tr2, r1, r2\n\tsub.s!\t@CPI0_47[0], r2, r6\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r2\n\tst.1.inc\tr1, r3, r2\n\tadd\tr3, r4, r6\n\tsub!\tr6, r5, r5\n\tjump.gt\t@.BB0_265\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_531\n\tadd\tr0, r0, r5\n.BB0_530:\n\tadd\tr5, r2, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_530\n.BB0_531:\n\tadd\tr3, r2, r3\n\tst.1\tr3, r0\n\tld.1\t64, r3\n\tsub.s!\t@CPI0_137[0], r3, r4\n\tjump.gt\t@.BB0_250\n\tadd\t132, r3, r4\n\tadd\t36, r3, r5\n\tadd\t@CPI0_138[0], r0, r6\n\tst.1\tr5, r6\n\tadd\t64, r0, r5\n\tst.1\tr4, r5\n\tadd\tstack-[6], r0, r5\n\tld.1\tr5, r5\n\tadd\t196, r3, r6\n\tst.1\tr6, r5\n\tadd\t228, r3, r6\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_535\n\tadd\tr0, r0, r7\n.BB0_534:\n\tadd\tr7, r6, r8\n\tadd\tstack-[14], r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB0_534\n.BB0_535:\n\tadd\tr5, r6, r7\n\tst.1\tr7, r0\n\tadd\t31, r5, r5\n\tand\tstack-[11], r5, r5\n\tadd\tr5, r6, r5\n\tsub\tr5, r4, r4\n\tadd\t164, r3, r6\n\tst.1\tr6, r4\n\tld.1\tr1, r4\n\tst.1.inc\tr5, r4, r1\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_538\n\tadd\tr0, r0, r5\n.BB0_537:\n\tadd\tr5, r1, r6\n\tadd\tr5, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_537\n.BB0_538:\n\tadd\tr4, r1, r2\n\tst.1\tr2, r0\n\tadd\t68, r3, r2\n\tcontext.gas_left\tr5\n\tadd\tstack-[10], r0, r6\n\tst.1\tr2, r6\n\tadd\t31, r4, r2\n\tand\tstack-[11], r2, r2\n\tsub\tr1, r3, r1\n\tadd\tr2, r1, r1\n\tsub.s\t132, r1, r2\n\tadd\t100, r3, r4\n\tst.1\tr4, r2\n\tadd\t@CPI0_127[0], r0, r2\n\tst.1\tr3, r2\n\tadd\t4, r3, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t64, r3, r3\n\tor\tr1, r3, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.ge\tr2, r0, r5\n\tshl.s\t192, r5, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_806\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_442\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_807\n.BB0_541:\n\tjump\t@.BB0_150\n.BB0_542:\n\tjump\t@.BB0_97\n.BB0_543:\n\tadd\t34, r0, r1\n\tadd\tr1, r0, stack-[13]\n\tsload\tr1, r2\n\tadd\t@CPI0_108[0], r0, r1\n\tadd\tr4, r0, stack-[12]\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_40[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_545\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_551\n.BB0_545:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[12], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_62[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[12], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_548\n\tadd\tr0, r0, r7\n.BB0_547:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_547\n.BB0_548:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_550\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[12], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_550:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_640\n.BB0_551:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[12], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r4\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_265\n\tadd\tstack-[12], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tadd\t@CPI0_57[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_59[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\t1, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[11]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_665\n\tadd\tstack-[11], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[11], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_57[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t@CPI0_109[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[11]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_740\n\tadd\tstack-[11], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[11], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_57[0], r0, r2\n\tst.2\t0, r2\n\tshr.s\t8, r1, r1\n\tand\t@CPI0_40[0], r1, r1\n\tadd\tr1, r0, stack-[13]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r2\n\tadd\t@CPI0_61[0], r0, r1\n\tadd\tr2, r0, stack-[11]\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[13], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.eq\t@.BB0_566\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[11], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\tstack-[13], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_755\n.BB0_566:\n\tadd\tstack-[11], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[11], r0, r4\n\tst.1\t64, r4\n\tadd\t@CPI0_110[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s\t5, r3, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_760\n\tsub!\tr5, r0, r2\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_571\n\tadd\tr0, r0, r2\n.BB0_570:\n\tshl.s\t5, r2, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r6\n\tjump.lt\t@.BB0_570\n.BB0_571:\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB0_573\n\tshl.s\t5, r5, r2\n\tptr.add\tr1, r2, r1\n\tadd\tstack-[11], r2, r2\n\tshl.s\t3, r4, r4\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB0_573:\n\tadd\t31, r3, r1\n\tand\t@CPI0_107[0], r1, r1\n\tadd\tstack-[11], r1, r1\n\tadd\tr1, r0, stack-[10]\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[10], r0, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_265\n\tadd\tstack-[11], r0, r1\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_47[0], r1, r2\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[11], r3, r2\n\tadd\tstack-[11], r1, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\t31, r1, r1\n\tsub!\tr1, r2, r1\n\tjump.ge\t@.BB0_265\n\tadd\tstack-[13], r0, r1\n\tld.1.inc\tr1, r6, r4\n\tsub.s!\t@CPI0_47[0], r6, r1\n\tjump.gt\t@.BB0_250\n\tshl.s\t5, r6, r1\n\tadd\t63, r1, r5\n\tand\t@CPI0_48[0], r5, r5\n\tadd\tstack-[10], r5, r5\n\tsub.s!\t@CPI0_47[0], r5, r7\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r5\n\tadd\tstack-[10], r0, r3\n\tst.1\tr3, r6\n\tadd\tr1, r4, stack-[11]\n\tsub!\tstack-[11], r2, r1\n\tjump.gt\t@.BB0_265\n\tsub!\tr6, r0, r1\n\tjump.ne\t@.BB0_770\n.BB0_581:\n\tadd\t@CPI0_114[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_60[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_582:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_585\n\tadd\tr0, r0, r6\n.BB0_584:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_584\n.BB0_585:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_587:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_590\n\tadd\tr0, r0, r6\n.BB0_589:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_589\n.BB0_590:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_592:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_595\n\tadd\tr0, r0, r6\n.BB0_594:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_594\n.BB0_595:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_597:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[11], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_60[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[11], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_600\n\tadd\tr0, r0, r7\n.BB0_599:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_599\n.BB0_600:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_602\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[11], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_602:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_645\n.BB0_603:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[11], r1, r1\n\tsub.s!\t@CPI0_47[0], r1, r2\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_265\n\tadd\tstack-[11], r0, r1\n\tld.1\tr1, r1\n\tsub.s!\t1, r1, r1\n\tjump.ne\t@.BB0_639\n.BB0_606:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_607:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[12], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_60[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_650\n.BB0_608:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_611\n\tadd\tr0, r0, r5\n.BB0_610:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_610\n.BB0_611:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_613\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[12], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_613:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, stack-[14]\n\tand\tstack-[14], r1, r2\n\tadd\tstack-[12], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r4\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tadd\t@CPI0_64[0], r0, r2\n\tsub.s!\t32, r3, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr2, r0, r4\n\tand\t@CPI0_64[0], r3, r5\n\tsub!\tr5, r0, r6\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_64[0], r5, r5\n\tadd.ne\tr4, r0, r2\n\tst.1\t64, r1\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_265\n\tadd\tstack-[12], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_47[0], r2, r4\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[12], r3, r5\n\tadd\tstack-[12], r2, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_64[0], r0, r4\n\tsub!\tr3, r5, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_64[0], r3, r3\n\tand\t@CPI0_64[0], r5, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\tr0, r0, r4\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_64[0], r3, r3\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.ne\t@.BB0_265\n\tld.1.inc\tr2, r3, r4\n\tsub.s!\t@CPI0_47[0], r3, r2\n\tjump.gt\t@.BB0_250\n\tadd\t31, r3, r2\n\tand\tstack-[14], r2, r2\n\tadd\t63, r2, r2\n\tand\tstack-[14], r2, r2\n\tadd\tr2, r1, r2\n\tsub.s!\t@CPI0_47[0], r2, r6\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r2\n\tst.1.inc\tr1, r3, r2\n\tadd\tr3, r4, r6\n\tsub!\tr6, r5, r5\n\tjump.gt\t@.BB0_265\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_624\n\tadd\tr0, r0, r5\n.BB0_623:\n\tadd\tr5, r2, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_623\n.BB0_624:\n\tadd\tr3, r2, r3\n\tst.1\tr3, r0\n\tld.1\t64, r3\n\tadd\t32, r3, r4\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_627\n\tadd\tr0, r0, r5\n.BB0_626:\n\tadd\tr5, r4, r6\n\tadd\tr5, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_626\n.BB0_627:\n\tadd\tr1, r4, r1\n\tst.1\tr1, r0\n\tsub\tr1, r3, r1\n\tsub.s\t32, r1, r2\n\tst.1\tr3, r2\n\tadd\t31, r1, r1\n\tand\tstack-[14], r1, r2\n\tadd\tr2, r3, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r2\n\tadd.ge\tr1, r0, r4\n\tshl.s\t64, r4, r2\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t96, r3, r3\n\tor\tr3, r2, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_66[0], r1, r2\n\tjump.gt\t@.BB0_250\n\tadd\t1024, r1, r2\n\tst.1\t64, r2\n\tadd\t992, r1, r2\n\tadd\t@CPI0_67[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t960, r1, r2\n\tadd\t@CPI0_68[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t928, r1, r2\n\tadd\t@CPI0_69[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t896, r1, r2\n\tadd\t@CPI0_70[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t864, r1, r2\n\tadd\t@CPI0_71[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t832, r1, r2\n\tadd\t@CPI0_72[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t800, r1, r2\n\tadd\t@CPI0_73[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t768, r1, r2\n\tadd\t@CPI0_74[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t736, r1, r2\n\tadd\t@CPI0_75[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t704, r1, r2\n\tadd\t@CPI0_76[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t672, r1, r2\n\tadd\t@CPI0_77[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t640, r1, r2\n\tadd\t@CPI0_78[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t608, r1, r2\n\tadd\t@CPI0_79[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t576, r1, r2\n\tadd\t@CPI0_80[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t544, r1, r2\n\tadd\t@CPI0_81[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t512, r1, r2\n\tadd\t@CPI0_82[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t480, r1, r2\n\tadd\t@CPI0_83[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t448, r1, r2\n\tadd\t@CPI0_84[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t416, r1, r2\n\tadd\t@CPI0_85[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t384, r1, r2\n\tadd\t@CPI0_86[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t352, r1, r2\n\tadd\t@CPI0_87[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t320, r1, r2\n\tadd\t@CPI0_88[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t288, r1, r2\n\tadd\t@CPI0_89[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t256, r1, r2\n\tadd\t@CPI0_90[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t224, r1, r2\n\tadd\t@CPI0_91[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t192, r1, r2\n\tadd\t@CPI0_92[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t160, r1, r2\n\tadd\t@CPI0_93[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t128, r1, r2\n\tadd\t@CPI0_94[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t96, r1, r2\n\tadd\t@CPI0_95[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI0_96[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r4\n\tadd\t@CPI0_97[0], r0, r2\n\tst.1\tr4, r2\n\tadd\t981, r0, r2\n\tst.1\tr1, r2\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_634\n\tadd\tr0, r0, r5\n.BB0_633:\n\tadd\tr5, r3, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_633\n.BB0_634:\n\tadd\tr1, r3, r1\n\tst.1\tr1, r0\n\tsub\tr1, r2, r1\n\tsub.s\t32, r1, r4\n\tst.1\tr2, r4\n\tadd\t31, r1, r1\n\tand\tstack-[14], r1, r4\n\tadd\tr4, r2, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_47[0], r1, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tcontext.gas_left\tr3\n.BB0_637:\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r1\n\tsub!\tstack-[13], r1, r1\n\tjump.eq\t@.BB0_606\n.BB0_639:\n\tadd\t@CPI0_114[0], r0, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_60[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_640:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_643\n\tadd\tr0, r0, r6\n.BB0_642:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_642\n.BB0_643:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_645:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_648\n\tadd\tr0, r0, r6\n.BB0_647:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_647\n.BB0_648:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_650:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_653\n\tadd\tr0, r0, r6\n.BB0_652:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_652\n.BB0_653:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_655:\n\tld.1\t64, r2\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB0_658\n\tadd\tr0, r0, r6\n.BB0_657:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_657\n.BB0_658:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_408\n\tjump\t@.BB0_409\n.BB0_659:\n\tjump\t@.BB0_124\n.BB0_660:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_663\n\tadd\tr0, r0, r6\n.BB0_662:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_662\n.BB0_663:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_665:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_668\n\tadd\tr0, r0, r6\n.BB0_667:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_667\n.BB0_668:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_670:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[12], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_62[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_701\n.BB0_671:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_674\n\tadd\tr0, r0, r5\n.BB0_673:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_673\n.BB0_674:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_676\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[12], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_676:\n\tadd\t31, r3, r1\n\tand\tstack-[13], r1, r2\n\tadd\tstack-[12], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r4\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tadd\t@CPI0_64[0], r0, r2\n\tsub.s!\t32, r3, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr2, r0, r4\n\tand\t@CPI0_64[0], r3, r5\n\tsub!\tr5, r0, r6\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_64[0], r5, r5\n\tadd.ne\tr4, r0, r2\n\tst.1\t64, r1\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_265\n\tadd\tstack-[12], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_47[0], r2, r4\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[12], r3, r5\n\tadd\tstack-[12], r2, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_64[0], r0, r4\n\tsub!\tr3, r5, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_64[0], r3, r3\n\tand\t@CPI0_64[0], r5, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\tr0, r0, r4\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_64[0], r3, r3\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.ne\t@.BB0_265\n\tld.1.inc\tr2, r3, r4\n\tsub.s!\t@CPI0_47[0], r3, r2\n\tjump.gt\t@.BB0_250\n\tadd\t31, r3, r2\n\tand\tstack-[13], r2, r2\n\tadd\t63, r2, r2\n\tand\tstack-[13], r2, r2\n\tadd\tr2, r1, r2\n\tsub.s!\t@CPI0_47[0], r2, r6\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r2\n\tst.1.inc\tr1, r3, r2\n\tadd\tr3, r4, r6\n\tsub!\tr6, r5, r5\n\tjump.gt\t@.BB0_265\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_687\n\tadd\tr0, r0, r5\n.BB0_686:\n\tadd\tr5, r2, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_686\n.BB0_687:\n\tadd\tr3, r2, r3\n\tst.1\tr3, r0\n\tld.1\t64, r3\n\tadd\t32, r3, r4\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_690\n\tadd\tr0, r0, r5\n.BB0_689:\n\tadd\tr5, r4, r6\n\tadd\tr5, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_689\n.BB0_690:\n\tadd\tr1, r4, r1\n\tst.1\tr1, r0\n\tsub\tr1, r3, r1\n\tsub.s\t32, r1, r2\n\tst.1\tr3, r2\n\tadd\t31, r1, r1\n\tand\tstack-[13], r1, r2\n\tadd\tr2, r3, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r2\n\tadd.ge\tr1, r0, r4\n\tshl.s\t64, r4, r2\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t96, r3, r3\n\tor\tr3, r2, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_55[0], r2, r3\n\tjump.gt\t@.BB0_250\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\t32, r2, r3\n\tadd\t@CPI0_124[0], r0, r1\n\tst.1\tr3, r1\n\tadd!\t2, r0, r4\n\tst.1\tr2, r4\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tjump.eq\t@.BB0_697\n\tadd\tr0, r0, r5\n.BB0_696:\n\tadd\tr5, r2, r6\n\tadd\tr5, r3, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_696\n.BB0_697:\n\tadd\tr4, r2, r3\n\tst.1\tr3, r0\n\tsub\tr3, r1, r3\n\tsub.s\t32, r3, r4\n\tst.1\tr1, r4\n\tadd\t31, r3, r3\n\tand\tstack-[13], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_47[0], r3, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r1\n\tsub!\tstack-[14], r1, r1\n\tjump.eq\t@.BB0_606\n\tjump\t@.BB0_639\n.BB0_701:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_704\n\tadd\tr0, r0, r6\n.BB0_703:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_703\n.BB0_704:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_706:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_709\n\tadd\tr0, r0, r6\n.BB0_708:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_708\n.BB0_709:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_711:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[13], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_60[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_745\n.BB0_712:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[13], r0, r8\n\tjump.eq\t@.BB0_715\n\tadd\tr0, r0, r5\n.BB0_714:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_714\n.BB0_715:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_717\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[13], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_717:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, stack-[14]\n\tand\tstack-[14], r1, r2\n\tadd\tstack-[13], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r4\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tadd\t@CPI0_64[0], r0, r2\n\tsub.s!\t32, r3, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr2, r0, r4\n\tand\t@CPI0_64[0], r3, r5\n\tsub!\tr5, r0, r6\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_64[0], r5, r5\n\tadd.ne\tr4, r0, r2\n\tst.1\t64, r1\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_265\n\tadd\tstack-[13], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_47[0], r2, r4\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[13], r3, r5\n\tadd\tstack-[13], r2, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_64[0], r0, r4\n\tsub!\tr3, r5, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_64[0], r3, r3\n\tand\t@CPI0_64[0], r5, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\tr0, r0, r4\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_64[0], r3, r3\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.ne\t@.BB0_265\n\tld.1.inc\tr2, r3, r4\n\tsub.s!\t@CPI0_47[0], r3, r2\n\tjump.gt\t@.BB0_250\n\tadd\t31, r3, r2\n\tand\tstack-[14], r2, r2\n\tadd\t63, r2, r2\n\tand\tstack-[14], r2, r2\n\tadd\tr2, r1, r2\n\tsub.s!\t@CPI0_47[0], r2, r6\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r2\n\tst.1.inc\tr1, r3, r2\n\tadd\tr3, r4, r6\n\tsub!\tr6, r5, r5\n\tjump.gt\t@.BB0_265\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_728\n\tadd\tr0, r0, r5\n.BB0_727:\n\tadd\tr5, r2, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_727\n.BB0_728:\n\tadd\tr3, r2, r3\n\tst.1\tr3, r0\n\tld.1\t64, r3\n\tadd\t32, r3, r4\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_731\n\tadd\tr0, r0, r5\n.BB0_730:\n\tadd\tr5, r4, r6\n\tadd\tr5, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_730\n.BB0_731:\n\tadd\tr1, r4, r1\n\tst.1\tr1, r0\n\tsub\tr1, r3, r1\n\tsub.s\t32, r1, r2\n\tst.1\tr3, r2\n\tadd\t31, r1, r1\n\tand\tstack-[14], r1, r2\n\tadd\tr2, r3, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_47[0], r1, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r2\n\tadd.ge\tr1, r0, r4\n\tshl.s\t64, r4, r2\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t96, r3, r3\n\tor\tr3, r2, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_65[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_265\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tnear_call\tr0, @copy_literal_to_memory_fe40350ebfdea6067edc9712cc5f0efc7c62db199d168463c9702ecad8d7afae, @DEFAULT_UNWIND\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tld.1.inc\tr1, r1, r4\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_737\n\tadd\tr0, r0, r5\n.BB0_736:\n\tadd\tr5, r3, r6\n\tadd\tr4, r5, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_736\n.BB0_737:\n\tadd\tr1, r3, r1\n\tst.1\tr1, r0\n\tsub\tr1, r2, r1\n\tsub.s\t32, r1, r4\n\tst.1\tr2, r4\n\tadd\t31, r1, r1\n\tand\tstack-[14], r1, r4\n\tadd\tr4, r2, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_47[0], r1, r5\n\tjump.gt\t@.BB0_250\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_250\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tcontext.gas_left\tr3\n\tjump\t@.BB0_637\n.BB0_740:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_743\n\tadd\tr0, r0, r6\n.BB0_742:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_742\n.BB0_743:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_745:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_748\n\tadd\tr0, r0, r6\n.BB0_747:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_747\n.BB0_748:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_750:\n\tld.1\t64, r2\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB0_753\n\tadd\tr0, r0, r6\n.BB0_752:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_752\n.BB0_753:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_755:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_758\n\tadd\tr0, r0, r6\n.BB0_757:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_757\n.BB0_758:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_760:\n\tld.1\t64, r2\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB0_763\n\tadd\tr0, r0, r6\n.BB0_762:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_762\n.BB0_763:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_765:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_768\n\tadd\tr0, r0, r6\n.BB0_767:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_767\n.BB0_768:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_770:\n\tsub.s\t32, r2, r6\n\tadd\t@CPI0_64[0], r0, r7\n\tadd\tstack-[10], r0, r8\n.BB0_771:\n\tld.1.inc\tr4, r1, r4\n\tsub.s!\t@CPI0_47[0], r1, r9\n\tjump.gt\t@.BB0_265\n\tadd\tstack-[13], r1, r9\n\tsub\tr6, r9, r1\n\tsub.s!\t96, r1, r10\n\tadd\tr0, r0, r10\n\tadd.lt\tr7, r0, r10\n\tand\t@CPI0_64[0], r1, r1\n\tsub!\tr1, r0, r11\n\tadd\tr0, r0, r11\n\tadd.gt\tr7, r0, r11\n\tsub.s!\t@CPI0_64[0], r1, r1\n\tadd.ne\tr10, r0, r11\n\tsub!\tr11, r0, r1\n\tjump.ne\t@.BB0_265\n\tld.1\t64, r10\n\tsub.s!\t@CPI0_111[0], r10, r1\n\tjump.gt\t@.BB0_250\n\tadd\t96, r10, r11\n\tst.1\t64, r11\n\tadd\t32, r9, r1\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_47[0], r1, r12\n\tjump.gt\t@.BB0_265\n\tadd\tr1, r9, r12\n\tadd\t63, r12, r1\n\tsub!\tr1, r2, r13\n\tadd\tr0, r0, r13\n\tadd.ge\tr7, r0, r13\n\tand\t@CPI0_64[0], r1, r1\n\tand\t@CPI0_64[0], r2, r14\n\tsub!\tr1, r14, r15\n\tadd\tr0, r0, r15\n\tadd.lt\tr7, r0, r15\n\txor\tr1, r14, r1\n\tsub.s!\t@CPI0_64[0], r1, r1\n\tadd.ne\tr13, r0, r15\n\tsub!\tr15, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t32, r12, r1\n\tld.1\tr1, r13\n\tsub.s!\t@CPI0_47[0], r13, r1\n\tjump.gt\t@.BB0_250\n\tshl.s\t5, r13, r1\n\tadd\t63, r1, r14\n\tand\t@CPI0_48[0], r14, r14\n\tadd\tr14, r11, r14\n\tsub.s!\t@CPI0_47[0], r14, r15\n\tjump.gt\t@.BB0_250\n\tst.1\t64, r14\n\tst.1\tr11, r13\n\tadd\t64, r12, r12\n\tadd\tr1, r12, r13\n\tsub!\tr13, r2, r1\n\tjump.gt\t@.BB0_265\n\tsub!\tr12, r13, r1\n\tjump.ge\t@.BB0_782\n\tadd\t128, r10, r14\n.BB0_781:\n\tld.1.inc\tr12, r1, r12\n\tst.1.inc\tr14, r1, r14\n\tsub!\tr12, r13, r1\n\tjump.lt\t@.BB0_781\n.BB0_782:\n\tst.1.inc\tr10, r11, r11\n\tadd\t64, r9, r1\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_47[0], r1, r12\n\tjump.gt\t@.BB0_265\n\tadd\tr1, r9, r14\n\tadd\t63, r14, r1\n\tsub!\tr1, r2, r12\n\tadd\tr0, r0, r12\n\tadd.ge\tr7, r0, r12\n\tand\t@CPI0_64[0], r1, r1\n\tand\t@CPI0_64[0], r2, r13\n\tsub!\tr1, r13, r15\n\tadd\tr0, r0, r15\n\tadd.lt\tr7, r0, r15\n\txor\tr1, r13, r1\n\tsub.s!\t@CPI0_64[0], r1, r1\n\tadd.ne\tr12, r0, r15\n\tsub!\tr15, r0, r1\n\tjump.ne\t@.BB0_265\n\tadd\t32, r14, r1\n\tld.1\tr1, r12\n\tsub.s!\t@CPI0_47[0], r12, r1\n\tjump.gt\t@.BB0_250\n\tadd\t31, r12, r1\n\tand\tstack-[14], r1, r1\n\tadd\t63, r1, r1\n\tand\tstack-[14], r1, r1\n\tld.1\t64, r13\n\tadd\tr13, r1, r15\n\tsub!\tr15, r13, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tsub.s!\t@CPI0_47[0], r15, r3\n\tjump.gt\t@.BB0_250\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_250\n\tadd\t64, r14, r14\n\tst.1\t64, r15\n\tst.1.inc\tr13, r12, r15\n\tadd\tr12, r14, r1\n\tsub!\tr1, r2, r1\n\tjump.gt\t@.BB0_265\n\tsub!\tr12, r0, r1\n\tjump.eq\t@.BB0_791\n\tadd\tr0, r0, r1\n.BB0_790:\n\tadd\tr1, r15, r3\n\tadd\tr1, r14, r5\n\tld.1\tr5, r5\n\tst.1\tr3, r5\n\tadd\t32, r1, r1\n\tsub!\tr1, r12, r3\n\tjump.lt\t@.BB0_790\n.BB0_791:\n\tadd\tr15, r12, r1\n\tst.1\tr1, r0\n\tst.1\tr11, r13\n\tadd\t96, r9, r1\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_40[0], r1, r3\n\tjump.gt\t@.BB0_265\n\tadd\t32, r8, r8\n\tadd\t64, r10, r3\n\tst.1\tr3, r1\n\tst.1\tr8, r10\n\tsub.s!\tstack-[11], r4, r1\n\tjump.lt\t@.BB0_771\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tsub.s!\t2, r1, r1\n\tjump.lt\t@.BB0_581\n\tadd\tstack-[10], r0, r1\n\tadd\t64, r1, r1\n\tld.1\tr1, r1\n\tld.1\tr1, r1\n\tld.1\tr1, r2\n\tsub.s!\t2, r2, r2\n\tjump.lt\t@.BB0_581\n\tadd\t64, r1, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_57[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_58[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_800\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_265\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\tstack-[12], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_112[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_113[0], r1, r1\n\tadd\t@CPI0_44[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_812\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_47[0], r1, r1\n\tjump.gt\t@.BB0_250\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_800:\n\trevert\n.BB0_801:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_804\n\tadd\tr0, r0, r6\n.BB0_803:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_803\n.BB0_804:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.BB0_806:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_807:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_810\n\tadd\tr0, r0, r6\n.BB0_809:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_809\n.BB0_810:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_242\n\tjump\t@.BB0_241\n.BB0_812:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_815\n\tadd\tr0, r0, r6\n.BB0_814:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_814\n.BB0_815:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_409\n\tjump\t@.BB0_408\n.func_end0:\n\nabi_encode_array_address_dyn:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\t32, r2, r2\n\tld.1\tr2, r5\n\tand\t@CPI1_0[0], r5, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tret\n.func_end1:\n\nabi_encode_string_to_string:\n.func_begin2:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r2\n.BB2_2:\n\tadd\tr2, r1, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r1, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end2:\n\nfinalize_allocation:\n.func_begin3:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI3_0[0], r1, r3\n\tjump.gt\t@.BB3_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB3_2\n\tst.1\t64, r1\n\tret\n.BB3_2:\n\tadd\t@CPI3_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\ncopy_literal_to_memory_fe40350ebfdea6067edc9712cc5f0efc7c62db199d168463c9702ecad8d7afae:\n.func_begin4:\n\tld.1\t64, r1\n\tsub.s!\t@CPI4_0[0], r1, r2\n\tjump.ge\t@.BB4_1\n\tadd\t2272, r1, r2\n\tst.1\t64, r2\n\tadd\t2240, r1, r2\n\tadd\t@CPI4_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2208, r1, r2\n\tadd\t@CPI4_2[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2176, r1, r2\n\tadd\t@CPI4_3[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2144, r1, r2\n\tadd\t@CPI4_4[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2112, r1, r2\n\tadd\t@CPI4_5[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2080, r1, r2\n\tadd\t@CPI4_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2048, r1, r2\n\tadd\t@CPI4_7[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2016, r1, r2\n\tadd\t@CPI4_8[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1984, r1, r2\n\tadd\t@CPI4_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1952, r1, r2\n\tadd\t@CPI4_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1920, r1, r2\n\tadd\t@CPI4_11[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1888, r1, r2\n\tadd\t@CPI4_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1856, r1, r2\n\tadd\t@CPI4_13[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1824, r1, r2\n\tadd\t@CPI4_14[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1792, r1, r2\n\tadd\t@CPI4_15[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1760, r1, r2\n\tadd\t@CPI4_16[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1728, r1, r2\n\tadd\t@CPI4_17[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1696, r1, r2\n\tadd\t@CPI4_18[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1664, r1, r2\n\tadd\t@CPI4_19[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1632, r1, r2\n\tadd\t@CPI4_20[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1600, r1, r2\n\tadd\t@CPI4_21[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1568, r1, r2\n\tadd\t@CPI4_22[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1536, r1, r2\n\tadd\t@CPI4_23[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1504, r1, r2\n\tadd\t@CPI4_24[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1472, r1, r2\n\tadd\t@CPI4_25[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1440, r1, r2\n\tadd\t@CPI4_26[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1408, r1, r2\n\tadd\t@CPI4_27[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1376, r1, r2\n\tadd\t@CPI4_28[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1344, r1, r2\n\tadd\t@CPI4_29[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1312, r1, r2\n\tadd\t@CPI4_30[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1280, r1, r2\n\tadd\t@CPI4_31[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1248, r1, r2\n\tadd\t@CPI4_32[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1216, r1, r2\n\tadd\t@CPI4_33[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1184, r1, r2\n\tadd\t@CPI4_34[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1152, r1, r2\n\tadd\t@CPI4_35[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1120, r1, r2\n\tadd\t@CPI4_36[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1088, r1, r2\n\tadd\t@CPI4_37[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1056, r1, r2\n\tadd\t@CPI4_38[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t1024, r1, r2\n\tadd\t@CPI4_39[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t992, r1, r2\n\tadd\t@CPI4_40[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t960, r1, r2\n\tadd\t@CPI4_41[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t928, r1, r2\n\tadd\t@CPI4_42[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t896, r1, r2\n\tadd\t@CPI4_43[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t864, r1, r2\n\tadd\t@CPI4_44[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t832, r1, r2\n\tadd\t@CPI4_45[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t800, r1, r2\n\tadd\t@CPI4_46[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t768, r1, r2\n\tadd\t@CPI4_47[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t736, r1, r2\n\tadd\t@CPI4_48[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t704, r1, r2\n\tadd\t@CPI4_49[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t672, r1, r2\n\tadd\t@CPI4_50[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t640, r1, r2\n\tadd\t@CPI4_51[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t608, r1, r2\n\tadd\t@CPI4_52[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t576, r1, r2\n\tadd\t@CPI4_53[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t544, r1, r2\n\tadd\t@CPI4_54[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t512, r1, r2\n\tadd\t@CPI4_55[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t480, r1, r2\n\tadd\t@CPI4_56[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t448, r1, r2\n\tadd\t@CPI4_57[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t416, r1, r2\n\tadd\t@CPI4_58[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t384, r1, r2\n\tadd\t@CPI4_59[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t352, r1, r2\n\tadd\t@CPI4_60[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t320, r1, r2\n\tadd\t@CPI4_61[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t288, r1, r2\n\tadd\t@CPI4_62[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t256, r1, r2\n\tadd\t@CPI4_63[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t224, r1, r2\n\tadd\t@CPI4_64[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t192, r1, r2\n\tadd\t@CPI4_65[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t160, r1, r2\n\tadd\t@CPI4_66[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t128, r1, r2\n\tadd\t@CPI4_67[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t96, r1, r2\n\tadd\t@CPI4_68[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI4_69[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t@CPI4_70[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t2213, r0, r2\n\tst.1\tr1, r2\n\tret\n.BB4_1:\n\tadd\t@CPI4_71[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_72[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nabi_encode_array_string_dyn:\n.func_begin5:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tld.1\tr2, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r5\n\tshl.s\t5, r4, r3\n\tadd\tr5, r3, r3\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB5_6\n\tadd\tr0, r0, r6\n\tjump\t@.BB5_2\n.BB5_5:\n\tadd\t31, r7, r8\n\tsub.s\t32, r0, r9\n\tand\tr8, r9, r8\n\tadd\tr7, r3, r7\n\tst.1\tr7, r0\n\tadd\tr8, r3, r3\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.ge\t@.BB5_6\n.BB5_2:\n\tsub\tr3, r1, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr5, r7, r5\n\tadd\t32, r2, r2\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r7, r8\n\tst.1.inc\tr3, r7, r3\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB5_5\n\tadd\tr0, r0, r9\n.BB5_4:\n\tadd\tr9, r3, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB5_4\n\tjump\t@.BB5_5\n.BB5_6:\n\tadd\tr3, r0, r1\n\tret\n.func_end5:\n\ncopy_literal_to_memory_be502a4d8d2d3c2d1d4a9c4a93a739b2b651b59e1442db32b5fea90e59187e03:\n.func_begin6:\n\tld.1\t64, r1\n\tsub.s!\t@CPI6_0[0], r1, r2\n\tjump.ge\t@.BB6_1\n\tadd\t1024, r1, r2\n\tst.1\t64, r2\n\tadd\t992, r1, r2\n\tadd\t@CPI6_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t960, r1, r2\n\tadd\t@CPI6_2[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t928, r1, r2\n\tadd\t@CPI6_3[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t896, r1, r2\n\tadd\t@CPI6_4[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t864, r1, r2\n\tadd\t@CPI6_5[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t832, r1, r2\n\tadd\t@CPI6_6[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t800, r1, r2\n\tadd\t@CPI6_7[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t768, r1, r2\n\tadd\t@CPI6_8[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t736, r1, r2\n\tadd\t@CPI6_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t704, r1, r2\n\tadd\t@CPI6_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t672, r1, r2\n\tadd\t@CPI6_11[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t640, r1, r2\n\tadd\t@CPI6_12[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t608, r1, r2\n\tadd\t@CPI6_13[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t576, r1, r2\n\tadd\t@CPI6_14[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t544, r1, r2\n\tadd\t@CPI6_15[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t512, r1, r2\n\tadd\t@CPI6_16[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t480, r1, r2\n\tadd\t@CPI6_17[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t448, r1, r2\n\tadd\t@CPI6_18[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t416, r1, r2\n\tadd\t@CPI6_19[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t384, r1, r2\n\tadd\t@CPI6_20[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t352, r1, r2\n\tadd\t@CPI6_21[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t320, r1, r2\n\tadd\t@CPI6_22[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t288, r1, r2\n\tadd\t@CPI6_23[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t256, r1, r2\n\tadd\t@CPI6_24[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t224, r1, r2\n\tadd\t@CPI6_25[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t192, r1, r2\n\tadd\t@CPI6_26[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t160, r1, r2\n\tadd\t@CPI6_27[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t128, r1, r2\n\tadd\t@CPI6_28[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t96, r1, r2\n\tadd\t@CPI6_29[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI6_30[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t@CPI6_31[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t981, r0, r2\n\tst.1\tr1, r2\n\tret\n.BB6_1:\n\tadd\t@CPI6_32[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI6_33[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\nfun_isOnZkSyncChainId:\n.func_begin7:\n\tnop\tstack+=[1]\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI7_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI7_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI7_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_1\n\tadd\t1, r0, r2\n\tld\tr1, r1\n\tsub.s!\tstack-[1], r1, r3\n\tjump.eq\t@.BB7_5\n\tadd\t32, r0, r3\n\tsload\tr3, r3\n\tsub!\tr1, r3, r3\n\tjump.eq\t@.BB7_5\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tadd\t0, r0, r2\n\tadd.eq\t1, r0, r2\n.BB7_5:\n\tand\t1, r2, r1\n\tret\n.BB7_1:\n\trevert\n.func_end7:\n\nfun_isOnZkSyncPrecompiles:\n.func_begin8:\n\tnop\tstack+=[4]\n\tld.1\t64, r5\n\tsub.s!\t@CPI8_0[0], r5, r1\n\tjump.gt\t@.BB8_1\n\tadd\t128, r5, r1\n\tst.1\t64, r1\n\tadd\t96, r5, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r5, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r5, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr5, r1\n\tadd\t32777, r0, stack-[1]\n\tadd\t1, r0, r3\n\tadd\tr0, r0, r6\n\tadd\tr5, r0, stack-[3]\n\tadd\tr3, r0, stack-[2]\n\tjump\t@.BB8_3\n.BB8_6:\n\tsub.s!\t3, r6, r1\n\tadd\t1, r6, r6\n\tjump.ge\t@.BB8_7\n.BB8_3:\n\tshl.s\t5, r6, r1\n\tadd\tr1, r5, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI8_1[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB8_6\n\tsub.s!\t@CPI8_2[0], r1, r2\n\tadd.ge\t@CPI8_2[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI8_3[0], r1, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tr0, r0, r5\n\tadd\tr6, r0, stack-[4]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[2], r0, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI8_2[0], r4, stack[@returndatasize]\n\tadd\tstack-[3], r0, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB8_6\n\tadd\tr3, r0, r1\n\tret\n.BB8_7:\n\tadd\tr0, r0, r3\n\tadd\tr3, r0, r1\n\tret\n.BB8_1:\n\tadd\t@CPI8_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI8_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end8:\n\nfun_isZkSyncChain:\n.func_begin9:\n\tnop\tstack+=[4]\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tadd\t@CPI9_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI9_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI9_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI9_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB9_1\n\tld\tr1, r1\n\tsub.s!\tstack-[4], r1, r2\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB9_5\n\tadd\t32, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB9_5\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tadd\tr0, r0, r3\n\tjump.ne\t@.BB9_6\n.BB9_5:\n\tadd\tr3, r0, r1\n\tret\n.BB9_6:\n\tld.1\t64, r5\n\tsub.s!\t@CPI9_3[0], r5, r1\n\tjump.ge\t@.BB9_7\n\tadd\t128, r5, r1\n\tst.1\t64, r1\n\tadd\t96, r5, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r5, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r5, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr5, r1\n\tadd\t32777, r0, stack-[1]\n\tadd\t1, r0, r3\n\tadd\tr0, r0, r6\n\tadd\tr5, r0, stack-[3]\n\tadd\tr3, r0, stack-[2]\n\tjump\t@.BB9_9\n.BB9_12:\n\tsub.s!\t3, r6, r1\n\tadd\t1, r6, r6\n\tjump.ge\t@.BB9_13\n.BB9_9:\n\tshl.s\t5, r6, r1\n\tadd\tr1, r5, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI9_4[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB9_12\n\tsub.s!\t@CPI9_1[0], r1, r2\n\tadd.ge\t@CPI9_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI9_5[0], r1, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tr0, r0, r5\n\tadd\tr6, r0, stack-[4]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[2], r0, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI9_1[0], r4, stack[@returndatasize]\n\tadd\tstack-[3], r0, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB9_12\n\tadd\tr3, r0, r1\n\tret\n.BB9_13:\n\tadd\tr0, r0, r3\n\tadd\tr3, r0, r1\n\tret\n.BB9_1:\n\trevert\n.BB9_7:\n\tadd\t@CPI9_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI9_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end9:\n\n__cxa_throw:\n.func_begin10:\n\trevert\n.func_end10:\n\n__farcall:\n.func_begin11:\n.tmp0:\n\tfar_call\tr1, r2, @.BB11_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB11_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end11:\n\n__staticcall:\n.func_begin12:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB12_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB12_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end12:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI7_1:\nCPI8_2:\nCPI9_1:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1892769676\nCPI0_3:\n\t.cell 3589510279\nCPI0_4:\n\t.cell 3792478064\nCPI0_5:\n\t.cell 4174167878\nCPI0_6:\n\t.cell 4174167879\nCPI0_7:\n\t.cell 4202047188\nCPI0_8:\n\t.cell 3792478065\nCPI0_9:\n\t.cell 4024363343\nCPI0_10:\n\t.cell 3589510280\nCPI0_11:\n\t.cell 3651357473\nCPI0_12:\n\t.cell 3680785954\nCPI0_13:\n\t.cell 2439649221\nCPI0_14:\n\t.cell 3041954472\nCPI0_15:\n\t.cell 3041954473\nCPI0_16:\n\t.cell 3124842406\nCPI0_17:\n\t.cell 2439649222\nCPI0_18:\n\t.cell 2550343608\nCPI0_19:\n\t.cell 1892769677\nCPI0_20:\n\t.cell 2179033039\nCPI0_21:\n\t.cell 2233625729\nCPI0_22:\n\t.cell 1046363170\nCPI0_23:\n\t.cell 1159672389\nCPI0_24:\n\t.cell 1169906349\nCPI0_25:\n\t.cell 1169906350\nCPI0_26:\n\t.cell 1725540768\nCPI0_27:\n\t.cell 1159672390\nCPI0_28:\n\t.cell 1162023955\nCPI0_29:\n\t.cell 1046363171\nCPI0_30:\n\t.cell 1064470260\nCPI0_31:\n\t.cell 1069889344\nCPI0_32:\n\t.cell 598886477\nCPI0_33:\n\t.cell 598886478\nCPI0_34:\n\t.cell 719206528\nCPI0_35:\n\t.cell 757643530\nCPI0_36:\n\t.cell 139621531\nCPI0_37:\n\t.cell 177362148\nCPI0_38:\n\t.cell 517440284\nCPI0_39:\n\t.cell 2535301202817642044428229017600\nCPI0_40:\nCPI1_0:\nCPI8_1:\nCPI9_4:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_41:\n\t.cell 38878206584692966203415385907871375197469080758325516314230789535345649042549\nCPI0_42:\n\t.cell 2535301200456458802993406410752\nCPI0_43:\n\t.cell 46361386726410499263322427381369506175992020241588171917386103515624534704128\nCPI0_44:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_45:\n\t.cell 46308022326495007027972728677917914892729792999299745830475596687180801507328\nCPI0_46:\n\t.cell 5387515053331158197795811229696\nCPI0_47:\nCPI3_0:\n\t.cell 18446744073709551615\nCPI0_48:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_49:\nCPI8_0:\n\t.cell 18446744073709551487\nCPI0_50:\n\t.cell -48719757687822547800745197551118351534541568878739321821808546113428889233771\nCPI0_51:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_52:\n\t.cell 18446744073709551423\nCPI0_53:\n\t.cell 6454973039698199198119942482240540643982028891330163610098731264865829167633\nCPI0_54:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_55:\n\t.cell 18446744073709551551\nCPI0_56:\n\t.cell 2481041784956016742021570618494952475758789857281704946240779902470294861374\nCPI0_57:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_58:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_59:\n\t.cell -24243573542908756656742960469620706294859471809197549687606805108482832859136\nCPI0_60:\nCPI3_2:\nCPI4_72:\nCPI6_33:\nCPI8_5:\nCPI9_7:\n\t.cell 2852213850513516153367582212096\nCPI0_61:\n\t.cell -27982220125663391199048351738502711044035172601297683092773767596476129607680\nCPI0_62:\n\t.cell 316912650057057350374175801344\nCPI0_63:\n\t.cell -25111597823361139047590293367644610809928738957112648217072126637990893060096\nCPI0_64:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_65:\nCPI8_3:\nCPI9_5:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_66:\n\t.cell 18446744073709550591\nCPI0_67:\nCPI6_1:\n\t.cell 30929419762340854964707671285957533385770457334971923422574025996993571061760\nCPI0_68:\nCPI6_2:\n\t.cell 48544602350100427234321909821593491786121824590373422727175283476761588745076\nCPI0_69:\nCPI6_3:\n\t.cell 36364068089403457590257185820024780684948855702848773640696194047122401750640\nCPI0_70:\nCPI6_4:\n\t.cell 33643123609644745723679586648037246423669803682020349629779075384699041765240\nCPI0_71:\nCPI6_5:\n\t.cell 35904846484358264643478246472850437588653474119763942191450671081310440207216\nCPI0_72:\nCPI6_6:\n\t.cell 33616510799037852770057966123440225364058487829626677808129449018086070498130\nCPI0_73:\nCPI6_7:\n\t.cell 33614598556982657256428162901033411807293963798640413840213215475113819517800\nCPI0_74:\nCPI6_8:\n\t.cell 33643123609537377994042658970825853524185683543424258894133571921566902404468\nCPI0_75:\nCPI6_9:\n\t.cell 47638071076301481689582944552384964000688147011468280314190571527605159867244\nCPI0_76:\nCPI6_10:\n\t.cell 48117279491408651255045731634367457415928091724240780334150784642484763061616\nCPI0_77:\nCPI6_11:\n\t.cell 44024861603881151568629051457366912438217874959052184340255774128811422209892\nCPI0_78:\nCPI6_12:\n\t.cell 33644897762327337988748088417021027989366185927863869852583674096104783507022\nCPI0_79:\nCPI6_13:\n\t.cell 36787856936970774571793209217297124657695386959259727636116639415849756939372\nCPI0_80:\nCPI6_14:\n\t.cell 47638064282711687810089600575809340532010871658690325558853847876241622134073\nCPI0_81:\nCPI6_15:\n\t.cell 33643123609537377994040352381922569821018733084968528876908883751637152394604\nCPI0_82:\nCPI6_16:\n\t.cell 33643275771265355536846818299931806790196602052576887959581972821047159772238\nCPI0_83:\nCPI6_17:\n\t.cell 47194731199244453104418070366939090076151053257244724448186142801106588236396\nCPI0_84:\nCPI6_18:\n\t.cell 48118915522282840336075695919483682212681613411441265835178468179329683900272\nCPI0_85:\nCPI6_19:\n\t.cell 48124346879669820204437668690579572036173352798867533076775198370357169772634\nCPI0_86:\nCPI6_20:\n\t.cell 33616380157772998011807219477437685957554497700367433010990264702474041772118\nCPI0_87:\nCPI6_21:\n\t.cell 33616511392051328407793222128238641679052249370190114797820285906724184086372\nCPI0_88:\nCPI6_22:\n\t.cell 44053386495414578984237417151402784367782670823225125861181471829572552054884\nCPI0_89:\nCPI6_23:\n\t.cell 52626142983756089282234136158348648637059140604494363679109103835818931546698\nCPI0_90:\nCPI4_63:\nCPI6_24:\n\t.cell 24554344850777063500813984260337779227293448421890260294750561207360661974380\nCPI0_91:\nCPI4_64:\nCPI6_25:\n\t.cell 48979502071265803820621143758345092536509373616408894489457042268345691951945\nCPI0_92:\nCPI4_65:\nCPI6_26:\n\t.cell 21888200371079413812097958924422197522241733795361911702015351034961631467586\nCPI0_93:\nCPI4_66:\nCPI6_27:\n\t.cell 53080228853967900008838912457169358757547013450459992389718590240872674716998\nCPI0_94:\nCPI4_67:\nCPI6_28:\n\t.cell 52175596382809611162256974707786370982578702990899167893973820006917336085348\nCPI0_95:\nCPI4_68:\nCPI6_29:\n\t.cell 50834456049026863377812687105894461622119591531531653770169333029563868534618\nCPI0_96:\nCPI4_69:\nCPI6_30:\n\t.cell 53078454457380930107591639981586992907714178816388685490780625095797664985930\nCPI0_97:\nCPI4_70:\nCPI6_31:\n\t.cell 45403472247449393621359352315522812427764750465901622430107461176946569083210\nCPI0_98:\n\t.cell 26616959624788145501257665028759500958019551560565664426117466910078421933505\nCPI0_99:\n\t.cell -28210752745734373716325236179973544350269403570732876200390672700241730338816\nCPI0_100:\n\t.cell 50942633119752846454219349998365661925608737367104304655302372697894809501696\nCPI0_101:\n\t.cell -26169279673760072341673943167871893214131042372482409454972450661548556448747\nCPI0_102:\n\t.cell -35624623585156310935986566609950774337791491079595188565361216048441042957010\nCPI0_103:\n\t.cell 44498839831107943639057441198504133729083803878607282998966033904615831896064\nCPI0_104:\n\t.cell 52218082703571448281732831374557454052046123541461587238423256590744691933184\nCPI0_105:\n\t.cell -53786327962123681882403693927889922387696495599625828119912749775981180354560\nCPI0_106:\n\t.cell 6493253913945762168832\nCPI0_107:\n\t.cell 8589934560\nCPI0_108:\n\t.cell 49757950408282192883554798549298957120187435708454233916192233978754039283712\nCPI0_109:\n\t.cell 29709859987042458364793620071212938999445122166331067437309844363869960536064\nCPI0_110:\n\t.cell 11345502269320042809753636662397323054460258020374724768836798809002567794688\nCPI0_111:\n\t.cell 18446744073709551519\nCPI0_112:\n\t.cell -46967347869762817211770011756586609677844163125355452868590611683642280247296\nCPI0_113:\n\t.cell 5387515050969974956360988622848\nCPI0_114:\nCPI3_1:\nCPI4_71:\nCPI6_32:\nCPI8_4:\nCPI9_6:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_115:\n\t.cell 47226849768799771155054816352388219178088240950822323452276168399439481798656\nCPI0_116:\n\t.cell 35927816869374799870719379083638512489667731000591417615816004338660976107636\nCPI0_117:\n\t.cell 29485693692093900896535320720837539044516270774257971310649688876405881831424\nCPI0_118:\n\t.cell 120209876281281145568259943\nCPI0_119:\n\t.cell 49422300655976383518971161772042036479724517635858811238160587340303074464591\nCPI0_120:\n\t.cell 3162421667457357072237249128631551985524704858613737409516517017801010970624\nCPI0_121:\n\t.cell 316912652418240591808998408192\nCPI0_122:\n\t.cell 35024978158343266718175328475784966075526600324453709682814319376724087799808\nCPI0_123:\n\t.cell -48014764309337086638577053839674919990906578673186746930859508663338879942656\nCPI0_124:\n\t.cell 34965903411964225882453457539702357428225906319168499181226586723580945367040\nCPI0_125:\n\t.cell -18002263324862296164297574372220909754226456243825434961346737007256845270391\nCPI0_126:\n\t.cell 452320493195011484353898654955649570559600940661030787290402428240789120797\nCPI0_127:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_128:\n\t.cell 904625697166532776746648320380374280103671765658434360802338178844445376512\nCPI0_129:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_130:\nCPI7_0:\nCPI9_0:\n\t.cell -45892047197499416867505091379861151366373029554911521591129889233172042914037\nCPI0_131:\nCPI7_2:\nCPI9_2:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_132:\n\t.cell 20890160479133264715253042688781036268371659841716905238019809794524297822208\nCPI0_133:\n\t.cell 43863269468009334158894487264628454438510617549146491680844421517880510644224\nCPI0_134:\n\t.cell 7922816251426433759354395033600\nCPI0_135:\n\t.cell 20890160479133264715253042688781036268371659841713500960798069995137476329472\nCPI0_136:\n\t.cell 22093440933395545086644211420770877655669859002001190369066648564715036344320\nCPI0_137:\n\t.cell 18446744073709551483\nCPI0_138:\n\t.cell 452336497026554893208680615297868296071066673909435728346752970179365410372\nCPI0_139:\n\t.cell -28834266701563273431823934408703353723064231390119340642120452995784432943104\nCPI0_140:\n\t.cell 374144419156711147060143317175368453031918731001600\nCPI0_141:\n\t.cell -374144419156711147060143317175368453031918731001601\nCPI4_0:\n\t.cell 18446744073709549344\nCPI4_1:\n\t.cell 47673628194285252504454331243531191830020186508643107123756563821572789370880\nCPI4_2:\n\t.cell 34980531325644010427008893433291453379456601611181872297542066995758469642800\nCPI4_3:\n\t.cell 35423849950997827127536244924939907968494747853300306001383590776000524408932\nCPI4_4:\n\t.cell 35432830147367599877389264598950122013374530023165271574989983785034122942308\nCPI4_5:\n\t.cell 36337468866293746218000393358310527124620194522870236399278943812721179838546\nCPI4_6:\n\t.cell 34980530913662772173767513365723885663792844323007854062990085299681644074054\nCPI4_7:\n\t.cell 35000220897664362975425318749064273783151825851081361487298901727540749096018\nCPI4_8:\n\t.cell 33616517269109080665289639116471339844371681192661098417917262520111066076238\nCPI4_9:\n\t.cell 33616509774243881511608478953919104483128172184014877700957792723468783863920\nCPI4_10:\n\t.cell 34980530886597455528678830408401297976390061127065767290493981002736798348140\nCPI4_11:\n\t.cell 34980530320543945445944683697341765510966676895915169829402850011584350013552\nCPI4_12:\n\t.cell 40887355207033310222948712979469788134458533369253443551480980653313172064360\nCPI4_13:\n\t.cell 36328475675334481048912651880104845805057646537660144565289451434563643263080\nCPI4_14:\n\t.cell 33616518274314878956061813987261559367414165161801067746094513564232598565476\nCPI4_15:\n\t.cell 33616510799037817054086886621728285815669833633962652028903628436545679017034\nCPI4_16:\n\t.cell 35878089228994205801832074765903119417260447364893834167992977545069734351938\nCPI4_17:\n\t.cell 33616517242043406953249302426424011014659178474975940780483899688570148500068\nCPI4_18:\n\t.cell 35459593562763146497018791295473091836078398015763902305528825585014689584210\nCPI4_19:\n\t.cell 36796703606727565012524036540871489281850998317296646465774792750190852069488\nCPI4_20:\n\t.cell 36328986728083916514410525102944273619389112389621307451160241202737020360794\nCPI4_21:\n\t.cell 35423849978167948272264083274339797816479393735175816498080078053464647750722\nCPI4_22:\n\t.cell 35876673448352129855740141084467121873716940237484371051374753318242052364132\nCPI4_23:\n\t.cell 36328475648058597506756340525344076990926368819561614832717033414174662543468\nCPI4_24:\n\t.cell 35000221818093792159009657835424303649802565288782626594876568297147807001960\nCPI4_25:\n\t.cell 35885142429897361380958001769718797093171955460134275511624499500176293385286\nCPI4_26:\n\t.cell 35000220901771538915894562413700428483592120172185502400324415122922567190632\nCPI4_27:\n\t.cell 38139638267659052817284095359117240721619032080085759348883394594033913119826\nCPI4_28:\n\t.cell 35000214909818049506486623752696213629808167983846682860051782239145029420098\nCPI4_29:\n\t.cell 35000214316699160002595143180406799478759248594759191669819065559284649645122\nCPI4_30:\n\t.cell 35911755112968628039244468839060817679844493867966528338187617490303494411350\nCPI4_31:\n\t.cell 35904839563023418619976921990308541570531152802050384319715554174493550597206\nCPI4_32:\n\t.cell 35424360580075439215000240278552215052640736912838155388087482968184330742610\nCPI4_33:\n\t.cell 35911914903519403120437762208058808399634779621831723561805102777193746093924\nCPI4_34:\n\t.cell 36328986728083916514410525102944273619389113890122859661531666390685078866032\nCPI4_35:\n\t.cell 35423849978167948272264083286129088425578580444091821929030203434716684702786\nCPI4_36:\n\t.cell 36328475655536184993675649634940884941261632657766239096851963353616505526116\nCPI4_37:\n\t.cell 35000221811564396329860278706278274170362957404581346809081762660953560929362\nCPI4_38:\n\t.cell 34980516713353366930476086200073539097674772913051958664316902782181148415050\nCPI4_39:\n\t.cell 35000221818093758413310824263919828386446507778120216682984302662435313628012\nCPI4_40:\n\t.cell 33616510779344454228037780547129369503759971816095251376995986874554815829066\nCPI4_41:\n\t.cell 35452374895924992692769545165535208508030636976105166777038485010075721741164\nCPI4_42:\n\t.cell 47638201670492116370148020967955294232474478134121111331280106175716606236776\nCPI4_43:\n\t.cell 35911908076333747422361042944733884568670865430820672967302483200269686556750\nCPI4_44:\n\t.cell 35911907995243692450777722831888957827766334472654211015048327663414164936816\nCPI4_45:\n\t.cell 35911908001773057936812018339547267460737839697474646237696524352195405109360\nCPI4_46:\n\t.cell 35911908103715352869391625130744526422934083088299512443806746452530809358448\nCPI4_47:\n\t.cell 33616510367257423216084534610371322258881229022141240197762148837275500103792\nCPI4_48:\n\t.cell 35452374876231594290120898743094204015199128991787212319793281503972473848898\nCPI4_49:\n\t.cell 35878089222464879096517026067992589149452759123462285017359433176722313730152\nCPI4_50:\n\t.cell 35878089228994241179967571301357666077362590892973053287566859826999187297346\nCPI4_51:\n\t.cell 35904846490782349787898276777978097688680894099075271595925517681723352110146\nCPI4_52:\n\t.cell 35452534640664861441210384534268684940920064175891320272483808427059522787172\nCPI4_53:\n\t.cell 33643122935643641369209849317351149512763535655357904667434298381174050220882\nCPI4_54:\n\t.cell 48571228377395854398979045554492921135397221692768352181950698950850175597164\nCPI4_55:\n\t.cell 34964483848857706874016715264471414717348464109323625037256189816202761033840\nCPI4_56:\n\t.cell 35425762766585275153474796922242568435970638224405118161241480419328317862746\nCPI4_57:\n\t.cell 47192825698120098218827241930967247044404588705948731453617296365300971821160\nCPI4_58:\n\t.cell 33616380157772998011807219477437685957553189241559702507746880001211175627338\nCPI4_59:\n\t.cell 48081550391255011809418605593217023414903969545256873658891387733095485157996\nCPI4_60:\n\t.cell 48542689973137441649303257619151973494801547636744224227066894764045985020520\nCPI4_61:\n\t.cell 47645152645493755203763424474040521868890339536809648586070386322276854361712\nCPI4_62:\n\t.cell 52626142983756089282234136158348648637059140604494363679109103835818864104530\nCPI6_0:\n\t.cell 18446744073709550592\nCPI9_3:\n\t.cell 18446744073709551488\n","methodIdentifiers":{"HAPPY_MOOD_URI()":"db645622","IS_SCRIPT()":"f8ccbf47","IS_TEST()":"fa7626d4","SAD_MOOD_URI()":"3fc53740","USER()":"81e167cf","deployer()":"d5f39488","deployerAddress()":"efdee94f","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSenders()":"1ed7831c","failed()":"ba414fa6","isOnZkSyncChainId()":"45bb5aae","isOnZkSyncPrecompiles()":"d9a34b21","isZkSyncChain()":"0852749b","moodNft()":"980327b8","setUp()":"0a9254e4","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23","testCanMintAndHaveABalance()":"451f3246","testEventRecordsCorrectTokenIdOnMinting()":"2d28b90a","testFlipTokenToSad()":"45431413","testInitializedCorrectly()":"23b2484e","testTokenURIDefaultIsCorrectlySet()":"70d15f8d"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HAPPY_MOOD_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAD_MOOD_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"contract DeployMoodNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnZkSyncChainId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnZkSyncPrecompiles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isZkSync\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isZkSyncChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isZkSync\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moodNft\",\"outputs\":[{\"internalType\":\"contract MoodNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testCanMintAndHaveABalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testEventRecordsCorrectTokenIdOnMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFlipTokenToSad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testInitializedCorrectly\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testTokenURIDefaultIsCorrectlySet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/MoodNftTest.sol\":\"MoodNftTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x2ba8ee7e4a68efd4cd75331b229874f4d4dc0a1010599afad88fc2cae5cb5d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77ce1968d402b0414fec0a344b59c275d0706d4df5ac6293d605dd2202016345\",\"dweb:/ipfs/QmSVy4N4F15NzEuSpmvwRj1nTfAwaJpng7CywUBWLnWC4w\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x53c7ffb58010e54ed351157897f56eef1b57923a943ca9473a160a459e9ebf94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dd236f0db2d4c1592635ef4de1f08c964181a32d1e722eaea2de911b1944f4\",\"dweb:/ipfs/QmcYjas4pbHrvtBoaUyWVUNv4tJvDu6nDwirxGXbRpUYGD\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xf92ea94fe38f8370a8dc5f591ebfb4958869e18d877469ce422162cc88c8b063\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://620b5d4b2ff24d66120ce9dbb72fbde7276f2e8b3bb93f626874183aee01e307\",\"dweb:/ipfs/Qmcyc8co7vCiJ7gUd3jj5Hc1rRPihjt3WSKs5ut6eiU1Ze\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x3293dcbb7acd28df553c954e4e39e288bf10aab7ecda8d50ef21b4f4a91a28d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eb374daf6df34f4392f8926f1fddbce9f22c423066aeaefdfbe77395f77967b\",\"dweb:/ipfs/QmWR81zBJRX2uyRjveGzikYPj6ZwKppWsU49YEQXTLWUsN\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/foundry-devops/src/DevOpsTools.sol\":{\"keccak256\":\"0x6e310a8b06b2cb689b5e3c0deec45ef1ffc35d8accf79e4da2656cc5a3d10a36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c6337496be59bbd75e9fed8afc3822dda05162b6bb019820190956317860583\",\"dweb:/ipfs/Qmdr8twbe1Wr7DWGkZkrpKNVmSkwh9L5PSf7HKq7utYDWh\"]},\"lib/foundry-devops/src/FoundryZkSyncChecker.sol\":{\"keccak256\":\"0xc5199c3edde2d00708933358bd006b351433ef39b4da09e241e7315978723988\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b54bdddb509764988e181ac8c422c4a42af3427dc6c90685857a821df9b44057\",\"dweb:/ipfs/QmR3uFgrqBVud5nik4RWRUqYztZ55YJ1EqjLGs7UpwQdMm\"]},\"lib/foundry-devops/src/StringUtils.sol\":{\"keccak256\":\"0xc21a2278d2872b8867aa123ee6c236f51a38a789e8aa80659655d7ccedef9341\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c88541569ee44ee344e1adf17ec2d2dfd528dfc6495cd6767fcc536bca8b0d0e\",\"dweb:/ipfs/QmaRZNzPB62ruBepsG6zbUabyKRM1pdkGAGG5iL7mTEjri\"]},\"lib/foundry-devops/src/ZkSyncChainChecker.sol\":{\"keccak256\":\"0xbcf7e7847171a8e028ccecbe9cd3a75f9d3b102c12806d86d13a57a66d204a6a\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5c075822f6919ac2eaa770d7db6497447cacc0aa9c386bfd6f52ab71fd7d0081\",\"dweb:/ipfs/QmSryCcJrLfifu3SCiAQganu4YxTXJXs2JqpsfNymPp2qL\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed37f0f86e7fe31659e48c3a2a5920a92dd7f13c85cf8991fb79fe5f01e08efd\",\"dweb:/ipfs/QmUtm9bQGvjr9hHGwkPWrbgFmVqzaJcxjkaYDex2oGsonS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\":{\"keccak256\":\"0x09000342b85b1a06fa1f5b71bdeef7c449cd25799aac14fa9053d8abd18219aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a7cdab282a9165b685fa86da3bd331c8e319e5a5c64e16599134e738934a77d4\",\"dweb:/ipfs/QmSLcE5FmDqVQbFDB6MzUzuFi4UhJVUQ1A2rT4aJGhpERT\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"script/DeployMoodNft.s.sol\":{\"keccak256\":\"0x11e6c474c5dbf12cd8108c70a743f22a589a80752cac6a405ad2cacb0a73e600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dcd5415fcef84678e6881cf59ae82f7c571c6cd25ebee80befedf6b1ea059d32\",\"dweb:/ipfs/QmSypVCCRhPMuXhSdYhZ3i4SZDN2Qz3ywUby9jGSVwzXKc\"]},\"script/Interactions.s.sol\":{\"keccak256\":\"0x70870705e1607eb16db9e4a4b50d8086ffd7a32822b91bd8848d4b675be15f0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5d3ffcb06657d93da345a27302eb4b93f26f539767834a28ce6b21680f03fed\",\"dweb:/ipfs/QmSuL8gvC892SNTq6Vg6bB8peehABijVcfoye3tYXnza7c\"]},\"src/BasicNft.sol\":{\"keccak256\":\"0x010af816b5710b5227ae3f72ec01b000f5342ba0cd1265391dbb625c7595f421\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec20a20536d82b335cc6cf23c2e72f9c9d001eccf9555143eaeae11a441c48a5\",\"dweb:/ipfs/QmdZtaAaxJDWnm9sQQgBgHjeAd8TnFh4RX4j7rvfmpoqrs\"]},\"src/MoodNft.sol\":{\"keccak256\":\"0x1b82a0f981056d0cb971f5c005e133122aac1288feee317c7f31254bdd3cbdeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7580bab4d5ad0cc78113cb4e60539431e5e88beaba9d13ab5d36a4e631aeca37\",\"dweb:/ipfs/QmXkyDKjTBviugucV5Piz1Ja4qXMvUsG9ppq6y5zYhPerF\"]},\"test/MoodNftTest.sol\":{\"keccak256\":\"0xf9cebd9fe0e137a5eb0afc8ee950c71a8da0afbe3d60003e69d664afb911bbe9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41b4b9a20aeb29b61b2bb7ddafd9d8956c63f33cea10d918c5427861b16b3fd6\",\"dweb:/ipfs/Qmch2j1AjfBofeystLDFPgKATofB3V78DMkmF79vcYBjcG\"]}},\"version\":1}","solc_version":"0.8.20","solc_zkvm_edition":null,"zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 2:\"lib/forge-std/src/StdAssertions.sol\", 3:\"lib/forge-std/src/StdChains.sol\", 4:\"lib/forge-std/src/StdCheats.sol\", 6:\"lib/forge-std/src/StdInvariant.sol\", 12:\"lib/forge-std/src/StdUtils.sol\", 13:\"lib/forge-std/src/Test.sol\", 25:\"lib/foundry-devops/src/FoundryZkSyncChecker.sol\", 27:\"lib/foundry-devops/src/ZkSyncChainChecker.sol\", 45:\"test/MoodNftTest.sol\"\nobject \"MoodNftTest_51336\" {\n    code {\n        {\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := not(255)\n            sstore(/** @src 3:3166:3170  \"true\" */ 0x0c, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ or(and(sload(/** @src 3:3166:3170  \"true\" */ 0x0c), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2), /** @src 3:3166:3170  \"true\" */ 0x01))\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 13:1038:1042  \"true\" */ 0x1e, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ or(and(sload(/** @src 13:1038:1042  \"true\" */ 0x1e), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2), /** @src 3:3166:3170  \"true\" */ 0x01))\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 27:196:199  \"324\" */ 0x1f, 0x0144)\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 27:236:239  \"300\" */ 0x20, 0x012c)\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 27:281:284  \"260\" */ 0x21, 0x0104)\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 1:824:828  \"true\" */ 0x22, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ or(and(sload(/** @src 1:824:828  \"true\" */ 0x22), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2), /** @src 3:3166:3170  \"true\" */ 0x01))\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            let _3 := datasize(\"MoodNftTest_51336_deployed\")\n            codecopy(_1, dataoffset(\"MoodNftTest_51336_deployed\"), _3)\n            return(_1, _3)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 2:\"lib/forge-std/src/StdAssertions.sol\", 6:\"lib/forge-std/src/StdInvariant.sol\", 13:\"lib/forge-std/src/Test.sol\", 16:\"lib/forge-std/src/console2.sol\", 25:\"lib/foundry-devops/src/FoundryZkSyncChecker.sol\", 27:\"lib/foundry-devops/src/ZkSyncChainChecker.sol\", 45:\"test/MoodNftTest.sol\"\n    object \"MoodNftTest_51336_deployed\" {\n        code {\n            {\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0852749b { external_fun_isZkSyncChain() }\n                    case 0x0a9254e4 { external_fun_setUp() }\n                    case 0x1ed7831c { external_fun_excludeSenders() }\n                    case 0x23b2484e {\n                        external_fun_testInitializedCorrectly()\n                    }\n                    case 0x2ade3880 {\n                        external_fun_targetInterfaces()\n                    }\n                    case 0x2d28b90a {\n                        external_fun_testEventRecordsCorrectTokenIdOnMinting()\n                    }\n                    case 0x3e5e3c23 { external_fun_targetSenders() }\n                    case 0x3f7286f4 {\n                        external_fun_targetContracts()\n                    }\n                    case 0x3fc53740 { external_fun_SAD_MOOD_URI() }\n                    case 0x451f3246 {\n                        external_fun_testCanMintAndHaveABalance()\n                    }\n                    case 0x45431413 {\n                        external_fun_testFlipTokenToSad()\n                    }\n                    case 0x45bb5aae {\n                        external_fun_isOnZkSyncChainId()\n                    }\n                    case 0x66d9a9a0 {\n                        external_fun_targetArtifactSelectors()\n                    }\n                    case 0x70d15f8d {\n                        external_fun_testTokenURIDefaultIsCorrectlySet()\n                    }\n                    case 0x81e167cf { external_fun_USER() }\n                    case 0x85226c81 {\n                        external_fun_targetArtifacts()\n                    }\n                    case 0x916a17c6 {\n                        external_fun_targetSelectors()\n                    }\n                    case 0x980327b8 { external_fun_moodNft() }\n                    case 0xb5508aa9 {\n                        external_fun_excludeArtifacts()\n                    }\n                    case 0xba414fa6 { external_fun_failed() }\n                    case 0xd5f39488 { external_fun_deployer() }\n                    case 0xd9a34b21 {\n                        external_fun_isOnZkSyncPrecompiles()\n                    }\n                    case 0xdb645622 { external_fun_HAPPY_MOOD_URI() }\n                    case 0xe20c9f71 {\n                        external_fun_excludeContracts()\n                    }\n                    case 0xefdee94f {\n                        external_fun_deployerAddress()\n                    }\n                    case 0xf8ccbf47 { external_fun_IS_SCRIPT() }\n                    case 0xfa7626d4 { external_fun_IS_TEST() }\n                }\n                revert(0, 0)\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function external_fun_isZkSyncChain()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isZkSyncChain()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function external_fun_setUp()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := 64\n                /// @src 45:4137:4156  \"new DeployMoodNft()\"\n                let _3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                /// @src 45:4137:4156  \"new DeployMoodNft()\"\n                let _4 := datasize(\"DeployMoodNft_50569\")\n                let _5 := add(_3, _4)\n                let _6 := 0xffffffffffffffff\n                if or(gt(_5, _6), lt(_5, _3)) { panic_error_0x41() }\n                datacopy(_3, dataoffset(\"DeployMoodNft_50569\"), _4)\n                let expr_address := create(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ _3, sub(_5, _3))\n                if iszero(expr_address) { revert_forward() }\n                /// @src 45:4126:4156  \"deployer = new DeployMoodNft()\"\n                update_storage_value_offsett_contract_DeployMoodNft_to_contract_DeployMoodNft(expr_address)\n                /// @src 45:4166:4517  \"if (!isZkSyncChain()) {...\"\n                switch /** @src 45:4170:4186  \"!isZkSyncChain()\" */ cleanup_bool(iszero(/** @src 45:4171:4186  \"isZkSyncChain()\" */ fun_isZkSyncChain()))\n                case /** @src 45:4166:4517  \"if (!isZkSyncChain()) {...\" */ 0 {\n                    /// @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                    let _7 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _8 := shl(224, 0x60f9bb11)\n                    /// @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                    mstore(_7, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _8)\n                    /// @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                    let _9 := sub(abi_encode_stringliteral_7fdc(add(_7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _7)\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let _10 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                    /// @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                    let _11 := staticcall(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _10, /** @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _7, _9, _7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                    /// @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                    if iszero(_11) { revert_forward() }\n                    let expr_mpos := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                    /// @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                    if _11\n                    {\n                        let _12 := returndatasize()\n                        returndatacopy(_7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4280:4322  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _12)\n                        finalize_allocation(_7, _12)\n                        expr_mpos := abi_decode_string_fromMemory(_7, add(_7, _12))\n                    }\n                    /// @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                    let _13 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                    /// @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                    mstore(_13, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _8)\n                    /// @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                    let _14 := staticcall(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _10, /** @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _13, sub(abi_encode_stringliteral_0e6d(add(_13, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _13), _13, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                    /// @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                    if iszero(_14) { revert_forward() }\n                    let expr_mpos_1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                    /// @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                    if _14\n                    {\n                        let _15 := returndatasize()\n                        returndatacopy(_13, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4361:4405  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _15)\n                        finalize_allocation(_13, _15)\n                        expr_mpos_1 := abi_decode_string_fromMemory(_13, add(_13, _15))\n                    }\n                    /// @src 45:4441:4463  \"deployer.svgToImageURI\"\n                    let expr_address_1 := cleanup_address(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ cleanup_address(sload(/** @src 45:4126:4156  \"deployer = new DeployMoodNft()\" */ 0x23)))\n                    /// @src 45:4441:4471  \"deployer.svgToImageURI(sadSvg)\"\n                    let _16 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _17 := shl(225, 0x186c38e3)\n                    /// @src 45:4441:4471  \"deployer.svgToImageURI(sadSvg)\"\n                    mstore(_16, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _17)\n                    /// @src 45:4441:4471  \"deployer.svgToImageURI(sadSvg)\"\n                    let _18 := staticcall(gas(), expr_address_1, _16, sub(abi_encode_string(add(_16, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4), /** @src 45:4441:4471  \"deployer.svgToImageURI(sadSvg)\" */ expr_mpos), _16), _16, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                    /// @src 45:4441:4471  \"deployer.svgToImageURI(sadSvg)\"\n                    if iszero(_18) { revert_forward() }\n                    let expr_mpos_2 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                    /// @src 45:4441:4471  \"deployer.svgToImageURI(sadSvg)\"\n                    if _18\n                    {\n                        let _19 := returndatasize()\n                        returndatacopy(_16, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4441:4471  \"deployer.svgToImageURI(sadSvg)\" */ _19)\n                        finalize_allocation(_16, _19)\n                        expr_mpos_2 := abi_decode_string_fromMemory(_16, add(_16, _19))\n                    }\n                    /// @src 45:4473:4505  \"deployer.svgToImageURI(happySvg)\"\n                    let _20 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                    /// @src 45:4473:4505  \"deployer.svgToImageURI(happySvg)\"\n                    mstore(_20, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _17)\n                    /// @src 45:4473:4505  \"deployer.svgToImageURI(happySvg)\"\n                    let _21 := staticcall(gas(), expr_address_1, _20, sub(abi_encode_string(add(_20, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4), /** @src 45:4473:4505  \"deployer.svgToImageURI(happySvg)\" */ expr_mpos_1), _20), _20, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                    /// @src 45:4473:4505  \"deployer.svgToImageURI(happySvg)\"\n                    if iszero(_21) { revert_forward() }\n                    let expr_mpos_3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                    /// @src 45:4473:4505  \"deployer.svgToImageURI(happySvg)\"\n                    if _21\n                    {\n                        let _22 := returndatasize()\n                        returndatacopy(_20, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4473:4505  \"deployer.svgToImageURI(happySvg)\" */ _22)\n                        finalize_allocation(_20, _22)\n                        expr_mpos_3 := abi_decode_string_fromMemory(_20, add(_20, _22))\n                    }\n                    /// @src 45:4429:4506  \"new MoodNft(deployer.svgToImageURI(sadSvg), deployer.svgToImageURI(happySvg))\"\n                    let _23 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                    /// @src 45:4429:4506  \"new MoodNft(deployer.svgToImageURI(sadSvg), deployer.svgToImageURI(happySvg))\"\n                    let _24 := datasize(\"MoodNft_51029\")\n                    let _25 := add(_23, _24)\n                    if or(gt(_25, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ _6), /** @src 45:4429:4506  \"new MoodNft(deployer.svgToImageURI(sadSvg), deployer.svgToImageURI(happySvg))\" */ lt(_25, _23)) { panic_error_0x41() }\n                    datacopy(_23, dataoffset(\"MoodNft_51029\"), _24)\n                    let expr_address_2 := create(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4429:4506  \"new MoodNft(deployer.svgToImageURI(sadSvg), deployer.svgToImageURI(happySvg))\" */ _23, sub(abi_encode_string_string(_25, expr_mpos_2, expr_mpos_3), _23))\n                    if iszero(expr_address_2) { revert_forward() }\n                    /// @src 45:4419:4506  \"moodNft = new MoodNft(deployer.svgToImageURI(sadSvg), deployer.svgToImageURI(happySvg))\"\n                    update_storage_value_offsett_contract_MoodNft_to_contract_MoodNft(expr_address_2)\n                }\n                default /// @src 45:4166:4517  \"if (!isZkSyncChain()) {...\"\n                {\n                    /// @src 45:4212:4224  \"deployer.run\"\n                    let expr_address_3 := cleanup_address(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ cleanup_address(sload(/** @src 45:4126:4156  \"deployer = new DeployMoodNft()\" */ 0x23)))\n                    /// @src 45:4212:4226  \"deployer.run()\"\n                    let _26 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                    /// @src 45:4212:4226  \"deployer.run()\"\n                    mstore(_26, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x60203113))\n                    /// @src 45:4212:4226  \"deployer.run()\"\n                    let _27 := call(gas(), expr_address_3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4212:4226  \"deployer.run()\" */ _26, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4, /** @src 45:4212:4226  \"deployer.run()\" */ _26, 32)\n                    if iszero(_27) { revert_forward() }\n                    let expr_address_4 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                    /// @src 45:4212:4226  \"deployer.run()\"\n                    if _27\n                    {\n                        let _28 := 32\n                        if gt(_28, returndatasize()) { _28 := returndatasize() }\n                        finalize_allocation(_26, _28)\n                        expr_address_4 := abi_decode_contract_MoodNft_fromMemory(_26, add(_26, _28))\n                    }\n                    /// @src 45:4202:4226  \"moodNft = deployer.run()\"\n                    update_storage_value_offsett_contract_MoodNft_to_contract_MoodNft(expr_address_4)\n                }\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                return(_1, _1)\n            }\n            function array_storeLengthForEncoding_array_address_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function abi_encode_array_address_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n            }\n            function external_fun_excludeSenders()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:2674:2690  \"_excludedSenders\" */ 0x16)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:2674:2690  \"_excludedSenders\" */ 0x16)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 97789825912453899259273410636466998099043528421815129078110847000656284369545\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_testInitializedCorrectly()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                /// @src 45:4621:4633  \"moodNft.name\"\n                let expr_address := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:4621:4628  \"moodNft\" */ 0x22)))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _2 := 64\n                /// @src 45:4621:4635  \"moodNft.name()\"\n                let _3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                /// @src 45:4621:4635  \"moodNft.name()\"\n                mstore(_3, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x06fdde03))\n                /// @src 45:4621:4635  \"moodNft.name()\"\n                let _4 := staticcall(gas(), expr_address, _3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4, /** @src 45:4621:4635  \"moodNft.name()\" */ _3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:4621:4635  \"moodNft.name()\"\n                if iszero(_4) { revert_forward() }\n                let expr_mpos := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                /// @src 45:4621:4635  \"moodNft.name()\"\n                if _4\n                {\n                    let _5 := returndatasize()\n                    returndatacopy(_3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4621:4635  \"moodNft.name()\" */ _5)\n                    finalize_allocation(_3, _5)\n                    expr_mpos := abi_decode_string_fromMemory(_3, add(_3, _5))\n                }\n                /// @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\"\n                let expr_mpos_1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                /// @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\"\n                let _6 := add(expr_mpos_1, 0x20)\n                let _7 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ expr_mpos, _6), expr_mpos_1)\n                let _8 := not(31)\n                mstore(expr_mpos_1, add(_7, _8))\n                finalize_allocation(expr_mpos_1, _7)\n                /// @src 45:4594:4637  \"keccak256(abi.encodePacked(moodNft.name()))\"\n                let expr := keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _6, mload(/** @src 45:4594:4637  \"keccak256(abi.encodePacked(moodNft.name()))\" */ expr_mpos_1))\n                /// @src 45:4669:4677  \"NFT_NAME\"\n                let expr_mpos_2 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ copy_literal_to_memory_061f95ad754b8b2fc14caedf72a009801343f11d011419388184f383cc4c2b73()\n                /// @src 45:4651:4679  \"abi.encodePacked((NFT_NAME))\"\n                let expr_mpos_3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                /// @src 45:4651:4679  \"abi.encodePacked((NFT_NAME))\"\n                let _9 := add(expr_mpos_3, /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ 0x20)\n                /// @src 45:4651:4679  \"abi.encodePacked((NFT_NAME))\"\n                let _10 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:4651:4679  \"abi.encodePacked((NFT_NAME))\" */ expr_mpos_2, _9), expr_mpos_3)\n                mstore(expr_mpos_3, add(_10, /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ _8))\n                /// @src 45:4651:4679  \"abi.encodePacked((NFT_NAME))\"\n                finalize_allocation(expr_mpos_3, _10)\n                /// @src 45:4587:4681  \"assert(keccak256(abi.encodePacked(moodNft.name())) == keccak256(abi.encodePacked((NFT_NAME))))\"\n                assert_helper(/** @src 45:4594:4680  \"keccak256(abi.encodePacked(moodNft.name())) == keccak256(abi.encodePacked((NFT_NAME)))\" */ eq(expr, /** @src 45:4641:4680  \"keccak256(abi.encodePacked((NFT_NAME)))\" */ keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _9, mload(/** @src 45:4641:4680  \"keccak256(abi.encodePacked((NFT_NAME)))\" */ expr_mpos_3))))\n                /// @src 45:4725:4741  \"moodNft.symbol()\"\n                let _11 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                /// @src 45:4725:4741  \"moodNft.symbol()\"\n                mstore(_11, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x95d89b41))\n                /// @src 45:4725:4741  \"moodNft.symbol()\"\n                let _12 := staticcall(gas(), expr_address, _11, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4, /** @src 45:4725:4741  \"moodNft.symbol()\" */ _11, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:4725:4741  \"moodNft.symbol()\"\n                if iszero(_12) { revert_forward() }\n                let expr_mpos_4 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                /// @src 45:4725:4741  \"moodNft.symbol()\"\n                if _12\n                {\n                    let _13 := returndatasize()\n                    returndatacopy(_11, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4725:4741  \"moodNft.symbol()\" */ _13)\n                    finalize_allocation(_11, _13)\n                    expr_mpos_4 := abi_decode_string_fromMemory(_11, add(_11, _13))\n                }\n                /// @src 45:4708:4742  \"abi.encodePacked(moodNft.symbol())\"\n                let expr_mpos_5 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                /// @src 45:4708:4742  \"abi.encodePacked(moodNft.symbol())\"\n                let _14 := add(expr_mpos_5, /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ 0x20)\n                /// @src 45:4708:4742  \"abi.encodePacked(moodNft.symbol())\"\n                let _15 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:4708:4742  \"abi.encodePacked(moodNft.symbol())\" */ expr_mpos_4, _14), expr_mpos_5)\n                mstore(expr_mpos_5, add(_15, /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ _8))\n                /// @src 45:4708:4742  \"abi.encodePacked(moodNft.symbol())\"\n                finalize_allocation(expr_mpos_5, _15)\n                /// @src 45:4698:4743  \"keccak256(abi.encodePacked(moodNft.symbol()))\"\n                let expr_1 := keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _14, mload(/** @src 45:4698:4743  \"keccak256(abi.encodePacked(moodNft.symbol()))\" */ expr_mpos_5))\n                /// @src 45:4775:4785  \"NFT_SYMBOL\"\n                let expr_mpos_6 := /** @src 45:583:593  \"\\\"Mood NFT\\\"\" */ copy_literal_to_memory_a58cf80943770dd084f078bec17346ccb44c1ca309c9db7e14b1781d30f61dc0()\n                /// @src 45:4757:4787  \"abi.encodePacked((NFT_SYMBOL))\"\n                let expr_mpos_7 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_2)\n                /// @src 45:4757:4787  \"abi.encodePacked((NFT_SYMBOL))\"\n                let _16 := add(expr_mpos_7, /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ 0x20)\n                /// @src 45:4757:4787  \"abi.encodePacked((NFT_SYMBOL))\"\n                let _17 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:4757:4787  \"abi.encodePacked((NFT_SYMBOL))\" */ expr_mpos_6, _16), expr_mpos_7)\n                mstore(expr_mpos_7, add(_17, /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ _8))\n                /// @src 45:4757:4787  \"abi.encodePacked((NFT_SYMBOL))\"\n                finalize_allocation(expr_mpos_7, _17)\n                /// @src 45:4691:4789  \"assert(keccak256(abi.encodePacked(moodNft.symbol())) == keccak256(abi.encodePacked((NFT_SYMBOL))))\"\n                assert_helper(/** @src 45:4698:4788  \"keccak256(abi.encodePacked(moodNft.symbol())) == keccak256(abi.encodePacked((NFT_SYMBOL)))\" */ eq(expr_1, /** @src 45:4747:4788  \"keccak256(abi.encodePacked((NFT_SYMBOL)))\" */ keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _16, mload(/** @src 45:4747:4788  \"keccak256(abi.encodePacked((NFT_SYMBOL)))\" */ expr_mpos_7))))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                return(_1, _1)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string_to_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                end := add(add(pos, and(add(length, 31), /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ not(31))), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20)\n            }\n            function abi_encode_array_struct_FuzzInterface_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let _3 := 5\n                let tail_2 := add(add(headStart, shl(_3, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                let i_1 := i\n                for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _4 := mload(srcPtr)\n                    let tail_3 := add(tail_2, _2)\n                    mstore(tail_2, and(mload(_4), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let memberValue0 := mload(add(_4, _1))\n                    mstore(add(tail_2, _1), _2)\n                    let pos_1 := tail_3\n                    let length_1 := mload(memberValue0)\n                    mstore(tail_3, length_1)\n                    let _5 := 96\n                    pos_1 := add(tail_2, _5)\n                    let tail_4 := add(add(tail_2, shl(_3, length_1)), _5)\n                    let srcPtr_1 := add(memberValue0, _1)\n                    let i_2 := i\n                    for { } lt(i_2, length_1) { i_2 := add(i_2, 1) }\n                    {\n                        mstore(pos_1, add(sub(tail_4, tail_2), not(95)))\n                        tail_4 := abi_encode_string_to_string(mload(srcPtr_1), tail_4)\n                        srcPtr_1 := add(srcPtr_1, _1)\n                        pos_1 := add(pos_1, _1)\n                    }\n                    tail_2 := tail_4\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetInterfaces()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:3604:3623  \"_targetedInterfaces\" */ 0x1d)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 6:3604:3623  \"_targetedInterfaces\" */ 0x1d)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 49422300655976383518971161772042036479724517635858811238160587340303074464591\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_12103(memPtr_1)\n                    mstore(memPtr_1, and(sload(spos), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_string__dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzInterface_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_testEventRecordsCorrectTokenIdOnMinting()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                /// @src 25:329:344  \"new string[](2)\"\n                let expr_mpos := allocate_and_zero_memory_array_array_string_dyn()\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 25:354:373  \"command[0] = \\\"bash\\\"\" */ memory_array_index_access_struct_Log_dyn(expr_mpos), copy_literal_to_memory_3a20a0a136f9116b8130e31d0d8f14d3b1802506e7c4b809f577c201eb7bf34c())\n                pop(memory_array_index_access_struct_Log_dyn(expr_mpos))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 25:383:422  \"command[1] = \\\"src/is_foundry_zksync.sh\\\"\" */ memory_array_index_access_struct_Log_dyn_12107(expr_mpos), copy_literal_to_memory_8a27cc57d817a79eb488c9619d660ab19e251964ed3143895742385086def34b())\n                pop(memory_array_index_access_struct_Log_dyn_12107(expr_mpos))\n                /// @src 25:455:470  \"vm.ffi(command)\"\n                let _2 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 25:455:470  \"vm.ffi(command)\"\n                mstore(_2, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x89160467))\n                /// @src 25:455:470  \"vm.ffi(command)\"\n                let _3 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, _1, /** @src 25:455:470  \"vm.ffi(command)\" */ _2, sub(abi_encode_array_string_dyn(add(_2, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4), /** @src 25:455:470  \"vm.ffi(command)\" */ expr_mpos), _2), _2, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 25:455:470  \"vm.ffi(command)\"\n                if iszero(_3) { revert_forward() }\n                let expr_mpos_1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                /// @src 25:455:470  \"vm.ffi(command)\"\n                if _3\n                {\n                    let _4 := returndatasize()\n                    returndatacopy(_2, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 25:455:470  \"vm.ffi(command)\" */ _4)\n                    finalize_allocation(_2, _4)\n                    expr_mpos_1 := abi_decode_bytes_memory_ptr_fromMemory(_2, add(_2, _4))\n                }\n                /// @src 25:616:759  \"if (!is_foundry_zksync()) {...\"\n                switch /** @src 25:620:640  \"!is_foundry_zksync()\" */ cleanup_bool(/** @src 25:503:532  \"uint256(bytes32(retData)) > 0\" */ iszero(/** @src 25:511:527  \"bytes32(retData)\" */ convert_bytes_to_fixedbytes_from_bytes_to_bytes32(expr_mpos_1)))\n                case /** @src 25:616:759  \"if (!is_foundry_zksync()) {...\" */ 0 {\n                    /// @src 25:747:748  \"_\"\n                    fun_testEventRecordsCorrectTokenIdOnMinting_inner()\n                }\n                default /// @src 25:616:759  \"if (!is_foundry_zksync()) {...\"\n                {\n                    /// @src 25:656:716  \"console2.log(\\\"Only foundry-zksync works with this function\\\")\"\n                    fun_log(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ copy_literal_to_memory_2c783ee4416b50298ab4ea529624eecaa7e04ec923c1fc9ef57fc56e0b54ad13())\n                }\n                return(_1, _1)\n            }\n            function external_fun_targetSenders()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:3450:3466  \"_targetedSenders\" */ 0x18)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:3450:3466  \"_targetedSenders\" */ 0x18)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 80167465652159884487584418398737133515478493586045375474096367959472086682926\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_targetContracts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:3157:3175  \"_targetedContracts\" */ 0x17)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:3157:3175  \"_targetedContracts\" */ 0x17)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 89622809563556123081897041840816014639138942293158154584485133346364573191189\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation_12103(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_12111(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff) { panic_error_0x41() }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation_12176(memPtr)\n            {\n                let newFreePtr := add(memPtr, 0x60)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_19401(memPtr)\n            {\n                let newFreePtr := add(memPtr, 2272)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_19402(memPtr)\n            {\n                let newFreePtr := add(memPtr, 1024)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ not(31)))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_literal_to_memory_fe40350ebfdea6067edc9712cc5f0efc7c62db199d168463c9702ecad8d7afae() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_19401(memPtr_1)\n                mstore(memPtr_1, 2213)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"data:application/json;base64,eyJ\")\n                mstore(add(memPtr_1, 64), \"uYW1lIjoiTW9vZCBORlQiLCAiZGVzY3J\")\n                mstore(add(memPtr_1, 96), \"pcHRpb24iOiJBbiBORlQgdGhhdCByZWZ\")\n                mstore(add(memPtr_1, 128), \"sZWN0cyB0aGUgbW9vZCBvZiB0aGUgb3d\")\n                mstore(add(memPtr_1, 160), \"uZXIsIDEwMCUgb24gQ2hhaW4hIiwgImF\")\n                mstore(add(memPtr_1, 192), \"0dHJpYnV0ZXMiOiBbeyJ0cmFpdF90eXB\")\n                mstore(add(memPtr_1, 224), \"lIjogIm1vb2RpbmVzcyIsICJ2YWx1ZSI\")\n                mstore(add(memPtr_1, 256), \"6IDEwMH1dLCAiaW1hZ2UiOiJkYXRhOml\")\n                mstore(add(memPtr_1, 288), \"tYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTR\")\n                mstore(add(memPtr_1, 320), \"iV3dnZG1WeWMybHZiajBpTVM0d0lpQnp\")\n                mstore(add(memPtr_1, 352), \"kR0Z1WkdGc2IyNWxQU0p1YnlJL1Bnbzh\")\n                mstore(add(memPtr_1, 384), \"jM1puSUhkcFpIUm9QU0l4TURJMGNIZ2l\")\n                mstore(add(memPtr_1, 416), \"JR2hsYVdkb2REMGlNVEF5TkhCNElpQjJ\")\n                mstore(add(memPtr_1, 448), \"hV1YzUW05NFBTSXdJREFnTVRBeU5DQXh\")\n                mstore(add(memPtr_1, 480), \"NREkwSWlCNGJXeHVjejBpYUhSMGNEb3Z\")\n                mstore(add(memPtr_1, 512), \"MM2QzZHk1M015NXZjbWN2TWpBd01DOXp\")\n                mstore(add(memPtr_1, 544), \"kbWNpUGdvZ0lEeHdZWFJvSUdacGJHdzl\")\n                mstore(add(memPtr_1, 576), \"JaU16TXpNaUlHUTlJazAxTVRJZ05qUkR\")\n                mstore(add(memPtr_1, 608), \"NalkwTGpZZ05qUWdOalFnTWpZMExqWWd\")\n                mstore(add(memPtr_1, 640), \"OalFnTlRFeWN6SXdNQzQySURRME9DQTB\")\n                mstore(add(memPtr_1, 672), \"ORGdnTkRRNElEUTBPQzB5TURBdU5pQTB\")\n                mstore(add(memPtr_1, 704), \"ORGd0TkRRNFV6YzFPUzQwSURZMElEVXh\")\n                mstore(add(memPtr_1, 736), \"NaUEyTkhwdE1DQTRNakJqTFRJd05TNDB\")\n                mstore(add(memPtr_1, 768), \"JREF0TXpjeUxURTJOaTQyTFRNM01pMHp\")\n                mstore(add(memPtr_1, 800), \"Oekp6TVRZMkxqWXRNemN5SURNM01pMHp\")\n                mstore(add(memPtr_1, 832), \"OeklnTXpjeUlERTJOaTQySURNM01pQXp\")\n                mstore(add(memPtr_1, 864), \"Oekl0TVRZMkxqWWdNemN5TFRNM01pQXp\")\n                mstore(add(memPtr_1, 896), \"Oeko2SWk4K0NpQWdQSEJoZEdnZ1ptbHN\")\n                mstore(add(memPtr_1, 928), \"iRDBpSTBVMlJUWkZOaUlnWkQwaVRUVXh\")\n                mstore(add(memPtr_1, 960), \"NaUF4TkRCakxUSXdOUzQwSURBdE16Y3l\")\n                mstore(add(memPtr_1, 992), \"JREUyTmk0MkxUTTNNaUF6TnpKek1UWTJ\")\n                mstore(add(memPtr_1, 1024), \"MallnTXpjeUlETTNNaUF6TnpJZ016Y3l\")\n                mstore(add(memPtr_1, 1056), \"MVEUyTmk0MklETTNNaTB6TnpJdE1UWTJ\")\n                mstore(add(memPtr_1, 1088), \"Mall0TXpjeUxUTTNNaTB6TnpKNlRUSTR\")\n                mstore(add(memPtr_1, 1120), \"PQ0EwTWpGaE5EZ3VNREVnTkRndU1ERWd\")\n                mstore(add(memPtr_1, 1152), \"NQ0F3SURFZ09UWWdNQ0EwT0M0d01TQTB\")\n                mstore(add(memPtr_1, 1184), \"PQzR3TVNBd0lEQWdNUzA1TmlBd2VtMHp\")\n                mstore(add(memPtr_1, 1216), \"OellnTWpjeWFDMDBPQzR4WXkwMExqSWd\")\n                mstore(add(memPtr_1, 1248), \"NQzAzTGpndE15NHlMVGd1TVMwM0xqUkR\")\n                mstore(add(memPtr_1, 1280), \"OakEwSURZek5pNHhJRFUyTWk0MUlEVTV\")\n                mstore(add(memPtr_1, 1312), \"OeUExTVRJZ05UazNjeTA1TWk0eElETTV\")\n                mstore(add(memPtr_1, 1344), \"MakV0T1RVdU9DQTRPQzQyWXkwdU15QTB\")\n                mstore(add(memPtr_1, 1376), \"Makl0TXk0NUlEY3VOQzA0TGpFZ055NDB\")\n                mstore(add(memPtr_1, 1408), \"TRE0yTUdFNElEZ2dNQ0F3SURFdE9DMDR\")\n                mstore(add(memPtr_1, 1440), \"MalJqTkM0MExUZzBMak1nTnpRdU5TMHh\")\n                mstore(add(memPtr_1, 1472), \"OVEV1TmlBeE5qQXRNVFV4TGpaek1UVTF\")\n                mstore(add(memPtr_1, 1504), \"MallnTmpjdU15QXhOakFnTVRVeExqWmh\")\n                mstore(add(memPtr_1, 1536), \"PQ0E0SURBZ01DQXhMVGdnT0M0MGVtMHl\")\n                mstore(add(memPtr_1, 1568), \"OQzB5TWpSaE5EZ3VNREVnTkRndU1ERWd\")\n                mstore(add(memPtr_1, 1600), \"NQ0F3SURFZ01DMDVOaUEwT0M0d01TQTB\")\n                mstore(add(memPtr_1, 1632), \"PQzR3TVNBd0lEQWdNU0F3SURrMmVpSXZ\")\n                mstore(add(memPtr_1, 1664), \"QZ29nSUR4d1lYUm9JR1pwYkd3OUlpTXp\")\n                mstore(add(memPtr_1, 1696), \"Nek1pSUdROUlrMHlPRGdnTkRJeFlUUTR\")\n                mstore(add(memPtr_1, 1728), \"JRFE0SURBZ01TQXdJRGsySURBZ05EZ2d\")\n                mstore(add(memPtr_1, 1760), \"ORGdnTUNBeElEQXRPVFlnTUhwdE1qSTB\")\n                mstore(add(memPtr_1, 1792), \"JREV4TW1NdE9EVXVOU0F3TFRFMU5TNDJ\")\n                mstore(add(memPtr_1, 1824), \"JRFkzTGpNdE1UWXdJREUxTVM0MllUZ2d\")\n                mstore(add(memPtr_1, 1856), \"PQ0F3SURBZ01DQTRJRGd1TkdnME9DNHh\")\n                mstore(add(memPtr_1, 1888), \"ZelF1TWlBd0lEY3VPQzB6TGpJZ09DNHh\")\n                mstore(add(memPtr_1, 1920), \"MVGN1TkNBekxqY3RORGt1TlNBME5TNHp\")\n                mstore(add(memPtr_1, 1952), \"MVGc0TGpZZ09UVXVPQzA0T0M0MmN6a3l\")\n                mstore(add(memPtr_1, 1984), \"JRE01TGpFZ09UVXVPQ0E0T0M0Mll5NHp\")\n                mstore(add(memPtr_1, 2016), \"JRFF1TWlBekxqa2dOeTQwSURndU1TQTN\")\n                mstore(add(memPtr_1, 2048), \"MalJJTmpZMFlUZ2dPQ0F3SURBZ01DQTR\")\n                mstore(add(memPtr_1, 2080), \"MVGd1TkVNMk5qY3VOaUEyTURBdU15QTF\")\n                mstore(add(memPtr_1, 2112), \"PVGN1TlNBMU16TWdOVEV5SURVek0zcHR\")\n                mstore(add(memPtr_1, 2144), \"NVEk0TFRFeE1tRTBPQ0EwT0NBd0lERWd\")\n                mstore(add(memPtr_1, 2176), \"NQ0E1TmlBd0lEUTRJRFE0SURBZ01TQXd\")\n                mstore(add(memPtr_1, 2208), \"MVGsySURCNklpOCtDand2YzNablBnbz0\")\n                mstore(add(memPtr_1, 2240), \"ifQ==\")\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                tail := abi_encode_string_to_string(value0, add(headStart, 32))\n            }\n            function external_fun_SAD_MOOD_URI()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := copy_literal_to_memory_fe40350ebfdea6067edc9712cc5f0efc7c62db199d168463c9702ecad8d7afae()\n                let memPos := mload(64)\n                mstore(memPos, 32)\n                return(memPos, sub(abi_encode_string_to_string(ret, add(memPos, 32)), memPos))\n            }\n            function external_fun_testCanMintAndHaveABalance()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 45:4857:4871  \"vm.prank(USER)\"\n                if iszero(extcodesize(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2))\n                /// @src 45:4857:4871  \"vm.prank(USER)\"\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 45:4857:4871  \"vm.prank(USER)\"\n                let _3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:4857:4871  \"vm.prank(USER)\"\n                mstore(_3, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xca669fa7))\n                /// @src 45:4857:4871  \"vm.prank(USER)\"\n                let _4 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2, _1, /** @src 45:4857:4871  \"vm.prank(USER)\" */ _3, sub(abi_encode_address(add(_3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:4857:4871  \"vm.prank(USER)\" */ _3), _3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:4857:4871  \"vm.prank(USER)\"\n                if iszero(_4) { revert_forward() }\n                if _4\n                {\n                    finalize_allocation_12111(_3)\n                    abi_decode(_3, _3)\n                }\n                /// @src 45:4881:4896  \"moodNft.mintNft\"\n                let expr_address := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:4881:4888  \"moodNft\" */ 0x22)))\n                /// @src 45:4881:4898  \"moodNft.mintNft()\"\n                if iszero(extcodesize(expr_address))\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 45:4881:4898  \"moodNft.mintNft()\"\n                let _5 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:4881:4898  \"moodNft.mintNft()\"\n                mstore(_5, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x61114ff5))\n                /// @src 45:4881:4898  \"moodNft.mintNft()\"\n                let _6 := call(gas(), expr_address, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:4881:4898  \"moodNft.mintNft()\" */ _5, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4, /** @src 45:4881:4898  \"moodNft.mintNft()\" */ _5, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:4881:4898  \"moodNft.mintNft()\"\n                if iszero(_6) { revert_forward() }\n                if _6\n                {\n                    finalize_allocation_12111(_5)\n                    abi_decode(_5, _5)\n                }\n                /// @src 45:4916:4933  \"moodNft.balanceOf\"\n                let expr_address_1 := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:4881:4888  \"moodNft\" */ 0x22)))\n                /// @src 45:4916:4939  \"moodNft.balanceOf(USER)\"\n                let _7 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:4916:4939  \"moodNft.balanceOf(USER)\"\n                mstore(_7, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x70a08231))\n                /// @src 45:4916:4939  \"moodNft.balanceOf(USER)\"\n                let _8 := staticcall(gas(), expr_address_1, _7, sub(abi_encode_address(add(_7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:4916:4939  \"moodNft.balanceOf(USER)\" */ _7), _7, 32)\n                if iszero(_8) { revert_forward() }\n                let expr := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                /// @src 45:4916:4939  \"moodNft.balanceOf(USER)\"\n                if _8\n                {\n                    let _9 := 32\n                    if gt(_9, returndatasize()) { _9 := returndatasize() }\n                    finalize_allocation(_7, _9)\n                    expr := abi_decode_bytes32_fromMemory(_7, add(_7, _9))\n                }\n                /// @src 45:4909:4945  \"assert(moodNft.balanceOf(USER) == 1)\"\n                assert_helper(/** @src 45:4916:4944  \"moodNft.balanceOf(USER) == 1\" */ eq(expr, /** @src 45:4083:4084  \"1\" */ 0x01))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                return(_1, _1)\n            }\n            function external_fun_testFlipTokenToSad()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 45:5235:5249  \"vm.prank(USER)\"\n                if iszero(extcodesize(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2))\n                /// @src 45:5235:5249  \"vm.prank(USER)\"\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                let _3 := 64\n                /// @src 45:5235:5249  \"vm.prank(USER)\"\n                let _4 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_3)\n                /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let _5 := shl(224, 0xca669fa7)\n                /// @src 45:5235:5249  \"vm.prank(USER)\"\n                mstore(_4, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _5)\n                /// @src 45:5235:5249  \"vm.prank(USER)\"\n                let _6 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2, _1, /** @src 45:5235:5249  \"vm.prank(USER)\" */ _4, sub(abi_encode_address(add(_4, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:5235:5249  \"vm.prank(USER)\" */ _4), _4, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5235:5249  \"vm.prank(USER)\"\n                if iszero(_6) { revert_forward() }\n                if _6\n                {\n                    finalize_allocation_12111(_4)\n                    abi_decode(_4, _4)\n                }\n                /// @src 45:5259:5274  \"moodNft.mintNft\"\n                let expr_address := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:5259:5266  \"moodNft\" */ 0x22)))\n                /// @src 45:5259:5276  \"moodNft.mintNft()\"\n                if iszero(extcodesize(expr_address))\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 45:5259:5276  \"moodNft.mintNft()\"\n                let _7 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_3)\n                /// @src 45:5259:5276  \"moodNft.mintNft()\"\n                mstore(_7, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x61114ff5))\n                /// @src 45:5259:5276  \"moodNft.mintNft()\"\n                let _8 := call(gas(), expr_address, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:5259:5276  \"moodNft.mintNft()\" */ _7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4, /** @src 45:5259:5276  \"moodNft.mintNft()\" */ _7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5259:5276  \"moodNft.mintNft()\"\n                if iszero(_8) { revert_forward() }\n                if _8\n                {\n                    finalize_allocation_12111(_7)\n                    abi_decode(_7, _7)\n                }\n                /// @src 45:5287:5301  \"vm.prank(USER)\"\n                if iszero(extcodesize(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2))\n                /// @src 45:5287:5301  \"vm.prank(USER)\"\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 45:5287:5301  \"vm.prank(USER)\"\n                let _9 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_3)\n                /// @src 45:5287:5301  \"vm.prank(USER)\"\n                mstore(_9, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _5)\n                /// @src 45:5287:5301  \"vm.prank(USER)\"\n                let _10 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2, _1, /** @src 45:5287:5301  \"vm.prank(USER)\" */ _9, sub(abi_encode_address(add(_9, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:5287:5301  \"vm.prank(USER)\" */ _9), _9, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5287:5301  \"vm.prank(USER)\"\n                if iszero(_10) { revert_forward() }\n                if _10\n                {\n                    finalize_allocation_12111(_9)\n                    abi_decode(_9, _9)\n                }\n                /// @src 45:5311:5327  \"moodNft.flipMood\"\n                let expr_address_1 := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:5259:5266  \"moodNft\" */ 0x22)))\n                /// @src 45:5311:5330  \"moodNft.flipMood(0)\"\n                if iszero(extcodesize(expr_address_1))\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 45:5311:5330  \"moodNft.flipMood(0)\"\n                let _11 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_3)\n                /// @src 45:5311:5330  \"moodNft.flipMood(0)\"\n                mstore(_11, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(229, 0x060d0a3d))\n                /// @src 45:5311:5330  \"moodNft.flipMood(0)\"\n                let _12 := call(gas(), expr_address_1, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:5311:5330  \"moodNft.flipMood(0)\" */ _11, sub(abi_encode_rational_by(add(_11, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:5311:5330  \"moodNft.flipMood(0)\" */ _11), _11, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5311:5330  \"moodNft.flipMood(0)\"\n                if iszero(_12) { revert_forward() }\n                if _12\n                {\n                    finalize_allocation_12111(_11)\n                    abi_decode(_11, _11)\n                }\n                /// @src 45:5375:5391  \"moodNft.tokenURI\"\n                let expr_address_2 := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:5259:5266  \"moodNft\" */ 0x22)))\n                /// @src 45:5375:5394  \"moodNft.tokenURI(0)\"\n                let _13 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_3)\n                /// @src 45:5375:5394  \"moodNft.tokenURI(0)\"\n                mstore(_13, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xc87b56dd))\n                /// @src 45:5375:5394  \"moodNft.tokenURI(0)\"\n                let _14 := staticcall(gas(), expr_address_2, _13, sub(abi_encode_rational_by(add(_13, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:5375:5394  \"moodNft.tokenURI(0)\" */ _13), _13, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5375:5394  \"moodNft.tokenURI(0)\"\n                if iszero(_14) { revert_forward() }\n                let expr_mpos := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                /// @src 45:5375:5394  \"moodNft.tokenURI(0)\"\n                if _14\n                {\n                    let _15 := returndatasize()\n                    returndatacopy(_13, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:5375:5394  \"moodNft.tokenURI(0)\" */ _15)\n                    finalize_allocation(_13, _15)\n                    expr_mpos := abi_decode_string_fromMemory(_13, add(_13, _15))\n                }\n                /// @src 45:5358:5395  \"abi.encodePacked(moodNft.tokenURI(0))\"\n                let expr_mpos_1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_3)\n                /// @src 45:5358:5395  \"abi.encodePacked(moodNft.tokenURI(0))\"\n                let _16 := add(expr_mpos_1, 0x20)\n                let _17 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:5358:5395  \"abi.encodePacked(moodNft.tokenURI(0))\" */ expr_mpos, _16), expr_mpos_1)\n                let _18 := /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ not(31)\n                /// @src 45:5358:5395  \"abi.encodePacked(moodNft.tokenURI(0))\"\n                mstore(expr_mpos_1, add(_17, _18))\n                finalize_allocation(expr_mpos_1, _17)\n                /// @src 45:5348:5396  \"keccak256(abi.encodePacked(moodNft.tokenURI(0)))\"\n                let expr := keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _16, mload(/** @src 45:5348:5396  \"keccak256(abi.encodePacked(moodNft.tokenURI(0)))\" */ expr_mpos_1))\n                /// @src 45:5427:5439  \"SAD_MOOD_URI\"\n                let expr_mpos_2 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ copy_literal_to_memory_fe40350ebfdea6067edc9712cc5f0efc7c62db199d168463c9702ecad8d7afae()\n                /// @src 45:5410:5440  \"abi.encodePacked(SAD_MOOD_URI)\"\n                let expr_mpos_3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(_3)\n                /// @src 45:5410:5440  \"abi.encodePacked(SAD_MOOD_URI)\"\n                let _19 := add(expr_mpos_3, /** @src 45:5358:5395  \"abi.encodePacked(moodNft.tokenURI(0))\" */ 0x20)\n                /// @src 45:5410:5440  \"abi.encodePacked(SAD_MOOD_URI)\"\n                let _20 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:5410:5440  \"abi.encodePacked(SAD_MOOD_URI)\" */ expr_mpos_2, _19), expr_mpos_3)\n                mstore(expr_mpos_3, add(_20, /** @src 45:5358:5395  \"abi.encodePacked(moodNft.tokenURI(0))\" */ _18))\n                /// @src 45:5410:5440  \"abi.encodePacked(SAD_MOOD_URI)\"\n                finalize_allocation(expr_mpos_3, _20)\n                /// @src 45:5341:5442  \"assert(keccak256(abi.encodePacked(moodNft.tokenURI(0))) == keccak256(abi.encodePacked(SAD_MOOD_URI)))\"\n                assert_helper(/** @src 45:5348:5441  \"keccak256(abi.encodePacked(moodNft.tokenURI(0))) == keccak256(abi.encodePacked(SAD_MOOD_URI))\" */ eq(expr, /** @src 45:5400:5441  \"keccak256(abi.encodePacked(SAD_MOOD_URI))\" */ keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _19, mload(/** @src 45:5400:5441  \"keccak256(abi.encodePacked(SAD_MOOD_URI))\" */ expr_mpos_3))))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                return(_1, _1)\n            }\n            function external_fun_isOnZkSyncChainId()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isOnZkSyncChainId()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function abi_encode_bytes4(value, pos)\n            {\n                mstore(pos, and(value, shl(224, 0xffffffff)))\n            }\n            function abi_encode_array_bytes4_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                let srcPtr := add(value, _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), shl(224, 0xffffffff)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_FuzzArtifactSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let tail_2 := add(add(headStart, shl(5, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    let memberValue0 := mload(_3)\n                    mstore(tail_2, _2)\n                    let tail_3 := abi_encode_string_to_string(memberValue0, add(tail_2, _2))\n                    let memberValue0_1 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), sub(tail_3, tail_2))\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0_1, tail_3)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetArtifactSelectors()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:3002:3028  \"_targetedArtifactSelectors\" */ 0x1b)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 6:3002:3028  \"_targetedArtifactSelectors\" */ 0x1b)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 26616959624788145501257665028759500958019551560565664426117466910078421933505\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_12103(memPtr_1)\n                    mstore(memPtr_1, copy_array_from_storage_to_memory_string(spos))\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzArtifactSelector_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_testTokenURIDefaultIsCorrectlySet()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 45:5020:5034  \"vm.prank(USER)\"\n                if iszero(extcodesize(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2))\n                /// @src 45:5020:5034  \"vm.prank(USER)\"\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 45:5020:5034  \"vm.prank(USER)\"\n                let _3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5020:5034  \"vm.prank(USER)\"\n                mstore(_3, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xca669fa7))\n                /// @src 45:5020:5034  \"vm.prank(USER)\"\n                let _4 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2, _1, /** @src 45:5020:5034  \"vm.prank(USER)\" */ _3, sub(abi_encode_address(add(_3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:5020:5034  \"vm.prank(USER)\" */ _3), _3, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5020:5034  \"vm.prank(USER)\"\n                if iszero(_4) { revert_forward() }\n                if _4\n                {\n                    finalize_allocation_12111(_3)\n                    abi_decode(_3, _3)\n                }\n                /// @src 45:5044:5059  \"moodNft.mintNft\"\n                let expr_address := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:5044:5051  \"moodNft\" */ 0x22)))\n                /// @src 45:5044:5061  \"moodNft.mintNft()\"\n                if iszero(extcodesize(expr_address))\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 45:5044:5061  \"moodNft.mintNft()\"\n                let _5 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5044:5061  \"moodNft.mintNft()\"\n                mstore(_5, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x61114ff5))\n                /// @src 45:5044:5061  \"moodNft.mintNft()\"\n                let _6 := call(gas(), expr_address, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:5044:5061  \"moodNft.mintNft()\" */ _5, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4, /** @src 45:5044:5061  \"moodNft.mintNft()\" */ _5, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5044:5061  \"moodNft.mintNft()\"\n                if iszero(_6) { revert_forward() }\n                if _6\n                {\n                    finalize_allocation_12111(_5)\n                    abi_decode(_5, _5)\n                }\n                /// @src 45:5106:5122  \"moodNft.tokenURI\"\n                let expr_address_1 := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:5044:5051  \"moodNft\" */ 0x22)))\n                /// @src 45:5106:5125  \"moodNft.tokenURI(0)\"\n                let _7 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5106:5125  \"moodNft.tokenURI(0)\"\n                mstore(_7, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xc87b56dd))\n                /// @src 45:5106:5125  \"moodNft.tokenURI(0)\"\n                let _8 := staticcall(gas(), expr_address_1, _7, sub(abi_encode_rational_by(add(_7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4)), /** @src 45:5106:5125  \"moodNft.tokenURI(0)\" */ _7), _7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 45:5106:5125  \"moodNft.tokenURI(0)\"\n                if iszero(_8) { revert_forward() }\n                let expr_mpos := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                /// @src 45:5106:5125  \"moodNft.tokenURI(0)\"\n                if _8\n                {\n                    let _9 := returndatasize()\n                    returndatacopy(_7, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 45:5106:5125  \"moodNft.tokenURI(0)\" */ _9)\n                    finalize_allocation(_7, _9)\n                    expr_mpos := abi_decode_string_fromMemory(_7, add(_7, _9))\n                }\n                /// @src 45:5089:5126  \"abi.encodePacked(moodNft.tokenURI(0))\"\n                let expr_mpos_1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5089:5126  \"abi.encodePacked(moodNft.tokenURI(0))\"\n                let _10 := add(expr_mpos_1, 0x20)\n                let _11 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:5089:5126  \"abi.encodePacked(moodNft.tokenURI(0))\" */ expr_mpos, _10), expr_mpos_1)\n                let _12 := /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ not(31)\n                /// @src 45:5089:5126  \"abi.encodePacked(moodNft.tokenURI(0))\"\n                mstore(expr_mpos_1, add(_11, _12))\n                finalize_allocation(expr_mpos_1, _11)\n                /// @src 45:5079:5127  \"keccak256(abi.encodePacked(moodNft.tokenURI(0)))\"\n                let expr := keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _10, mload(/** @src 45:5079:5127  \"keccak256(abi.encodePacked(moodNft.tokenURI(0)))\" */ expr_mpos_1))\n                /// @src 45:5158:5172  \"HAPPY_MOOD_URI\"\n                let expr_mpos_2 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ copy_literal_to_memory_be502a4d8d2d3c2d1d4a9c4a93a739b2b651b59e1442db32b5fea90e59187e03()\n                /// @src 45:5141:5173  \"abi.encodePacked(HAPPY_MOOD_URI)\"\n                let expr_mpos_3 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5141:5173  \"abi.encodePacked(HAPPY_MOOD_URI)\"\n                let _13 := add(expr_mpos_3, /** @src 45:5089:5126  \"abi.encodePacked(moodNft.tokenURI(0))\" */ 0x20)\n                /// @src 45:5141:5173  \"abi.encodePacked(HAPPY_MOOD_URI)\"\n                let _14 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_memory_ptr(/** @src 45:5141:5173  \"abi.encodePacked(HAPPY_MOOD_URI)\" */ expr_mpos_2, _13), expr_mpos_3)\n                mstore(expr_mpos_3, add(_14, /** @src 45:5089:5126  \"abi.encodePacked(moodNft.tokenURI(0))\" */ _12))\n                /// @src 45:5141:5173  \"abi.encodePacked(HAPPY_MOOD_URI)\"\n                finalize_allocation(expr_mpos_3, _14)\n                /// @src 45:5072:5175  \"assert(keccak256(abi.encodePacked(moodNft.tokenURI(0))) == keccak256(abi.encodePacked(HAPPY_MOOD_URI)))\"\n                assert_helper(/** @src 45:5079:5174  \"keccak256(abi.encodePacked(moodNft.tokenURI(0))) == keccak256(abi.encodePacked(HAPPY_MOOD_URI))\" */ eq(expr, /** @src 45:5131:5174  \"keccak256(abi.encodePacked(HAPPY_MOOD_URI))\" */ keccak256(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _13, mload(/** @src 45:5131:5174  \"keccak256(abi.encodePacked(HAPPY_MOOD_URI))\" */ expr_mpos_3))))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                return(_1, _1)\n            }\n            function abi_encode_address(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, 1)\n            }\n            function external_fun_USER()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPos := mload(64)\n                mstore(memPos, /** @src 45:4083:4084  \"1\" */ 0x01)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                return(memPos, 32)\n            }\n            function abi_encode_array_string_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let tail_2 := add(add(headStart, shl(5, length)), 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    tail_2 := abi_encode_string_to_string(mload(srcPtr), tail_2)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetArtifacts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:2818:2836  \"_targetedArtifacts\" */ 0x1a)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _2 := 0x20\n                mpos := add(memPtr, _2)\n                mstore(0, /** @src 6:2818:2836  \"_targetedArtifacts\" */ 0x1a)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 2481041784956016742021570618494952475758789857281704946240779902470294861374\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_string_dyn(memPos, memPtr), memPos))\n            }\n            function abi_encode_array_struct_FuzzSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let tail_2 := add(add(headStart, shl(5, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    mstore(tail_2, and(mload(_3), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let memberValue0 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), _2)\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0, add(tail_2, _2))\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetSelectors()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:3309:3327  \"_targetedSelectors\" */ 0x1c)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 6:3309:3327  \"_targetedSelectors\" */ 0x1c)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 6454973039698199198119942482240540643982028891330163610098731264865829167633\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_12103(memPtr_1)\n                    mstore(memPtr_1, and(sload(spos), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzSelector_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_moodNft()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(shr(8, sload(/** @src 45:638:660  \"MoodNft public moodNft\" */ 34)), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_excludeArtifacts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:2384:2402  \"_excludedArtifacts\" */ 0x19)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _2 := 0x20\n                mpos := add(memPtr, _2)\n                mstore(0, /** @src 6:2384:2402  \"_excludedArtifacts\" */ 0x19)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 67072331549493647622825787457569556318728415786901242217649037894484240406165\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_string_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_failed()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_failed()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function external_fun_deployer()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 45:666:695  \"DeployMoodNft public deployer\" */ 35), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_isOnZkSyncPrecompiles()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isOnZkSyncPrecompiles()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function copy_literal_to_memory_be502a4d8d2d3c2d1d4a9c4a93a739b2b651b59e1442db32b5fea90e59187e03() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_19402(memPtr_1)\n                mstore(memPtr_1, 981)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"data:application/json;base64,eyJ\")\n                mstore(add(memPtr_1, 64), \"uYW1lIjoiTW9vZCBORlQiLCAiZGVzY3J\")\n                mstore(add(memPtr_1, 96), \"pcHRpb24iOiJBbiBORlQgdGhhdCByZWZ\")\n                mstore(add(memPtr_1, 128), \"sZWN0cyB0aGUgbW9vZCBvZiB0aGUgb3d\")\n                mstore(add(memPtr_1, 160), \"uZXIsIDEwMCUgb24gQ2hhaW4hIiwgImF\")\n                mstore(add(memPtr_1, 192), \"0dHJpYnV0ZXMiOiBbeyJ0cmFpdF90eXB\")\n                mstore(add(memPtr_1, 224), \"lIjogIm1vb2RpbmVzcyIsICJ2YWx1ZSI\")\n                mstore(add(memPtr_1, 256), \"6IDEwMH1dLCAiaW1hZ2UiOiJkYXRhOml\")\n                mstore(add(memPtr_1, 288), \"tYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJ\")\n                mstore(add(memPtr_1, 320), \"aeUIyYVdWM1FtOTRQU0l3SURBZ01qQXd\")\n                mstore(add(memPtr_1, 352), \"JREl3TUNJZ2QybGtkR2c5SWpRd01DSWd\")\n                mstore(add(memPtr_1, 384), \"JR2hsYVdkb2REMGlOREF3SWlCNGJXeHV\")\n                mstore(add(memPtr_1, 416), \"jejBpYUhSMGNEb3ZMM2QzZHk1M015NXZ\")\n                mstore(add(memPtr_1, 448), \"jbWN2TWpBd01DOXpkbWNpUGdvZ0lEeGp\")\n                mstore(add(memPtr_1, 480), \"hWEpqYkdVZ1kzZzlJakV3TUNJZ1kzazl\")\n                mstore(add(memPtr_1, 512), \"JakV3TUNJZ1ptbHNiRDBpZVdWc2JHOTN\")\n                mstore(add(memPtr_1, 544), \"JaUJ5UFNJM09DSWdjM1J5YjJ0bFBTSml\")\n                mstore(add(memPtr_1, 576), \"iR0ZqYXlJZ2MzUnliMnRsTFhkcFpIUm9\")\n                mstore(add(memPtr_1, 608), \"QU0l6SWk4K0NpQWdQR2NnWTJ4aGMzTTl\")\n                mstore(add(memPtr_1, 640), \"JbVY1WlhNaVBnb2dJQ0FnUEdOcGNtTnN\")\n                mstore(add(memPtr_1, 672), \"aU0JqZUQwaU5qRWlJR041UFNJNE1pSWd\")\n                mstore(add(memPtr_1, 704), \"jajBpTVRJaUx6NEtJQ0FnSUR4amFYSmp\")\n                mstore(add(memPtr_1, 736), \"iR1VnWTNnOUlqRXlOeUlnWTNrOUlqZ3l\")\n                mstore(add(memPtr_1, 768), \"JaUJ5UFNJeE1pSXZQZ29nSUR3dlp6NEt\")\n                mstore(add(memPtr_1, 800), \"JQ0E4Y0dGMGFDQmtQU0p0TVRNMkxqZ3h\")\n                mstore(add(memPtr_1, 832), \"JREV4Tmk0MU0yTXVOamtnTWpZdU1UY3R\")\n                mstore(add(memPtr_1, 864), \"OalF1TVRFZ05ESXRPREV1TlRJdExqY3p\")\n                mstore(add(memPtr_1, 896), \"JaUJ6ZEhsc1pUMGlabWxzYkRwdWIyNWx\")\n                mstore(add(memPtr_1, 928), \"PeUJ6ZEhKdmEyVTZJR0pzWVdOck95Qnp\")\n                mstore(add(memPtr_1, 960), \"kSEp2YTJVdGQybGtkR2c2SURNN0lpOCt\")\n                mstore(add(memPtr_1, 992), \"Dand2YzNablBnPT0ifQ==\")\n            }\n            function external_fun_HAPPY_MOOD_URI()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := copy_literal_to_memory_be502a4d8d2d3c2d1d4a9c4a93a739b2b651b59e1442db32b5fea90e59187e03()\n                let memPos := mload(64)\n                mstore(memPos, 32)\n                return(memPos, sub(abi_encode_string_to_string(ret, add(memPos, 32)), memPos))\n            }\n            function external_fun_excludeContracts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:2532:2550  \"_excludedContracts\" */ 0x15)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:2532:2550  \"_excludedContracts\" */ 0x15)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 38878206584692966203415385907871375197469080758325516314230789535345649042549\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1)))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_deployerAddress()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 45:701:731  \"address public deployerAddress\" */ 36), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_IS_SCRIPT()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 1:800:828  \"bool public IS_SCRIPT = true\" */ 34), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0xff)\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(value)))\n                return(memPos, 32)\n            }\n            function external_fun_IS_TEST()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 13:1016:1042  \"bool public IS_TEST = true\" */ 30), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0xff)\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(value)))\n                return(memPos, 32)\n            }\n            /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            function abi_decode_bytes32_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                value0 := mload(headStart)\n            }\n            function revert_forward()\n            {\n                let pos := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 286 @src 2:1243:1447  \"function failed() public view returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let value := and(sload(/** @src 2:1302:1309  \"_failed\" */ 0x08), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0xff)\n                /// @src 2:1298:1441  \"if (_failed) {...\"\n                switch /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ value\n                case /** @src 2:1298:1441  \"if (_failed) {...\" */ 0 {\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    mstore(_1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(228, 0x0667f9d7))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                    mstore(/** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, 4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    mstore(add(/** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36), shl(210, 0x19985a5b1959))\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _3 := staticcall(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2, /** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 68, /** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, 32)\n                    if iszero(_3) { revert_forward() }\n                    let expr := /** @src -1:-1:-1 */ 0\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    if _3\n                    {\n                        let _4 := 32\n                        if gt(_4, returndatasize()) { _4 := returndatasize() }\n                        finalize_allocation(_1, _4)\n                        expr := abi_decode_bytes32_fromMemory(_1, add(_1, _4))\n                    }\n                    /// @src 2:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    var := /** @src 2:1377:1430  \"vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\" */ iszero(iszero(expr))\n                    /// @src 2:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    leave\n                }\n                default /// @src 2:1298:1441  \"if (_failed) {...\"\n                {\n                    /// @src 2:1325:1339  \"return _failed\"\n                    var := value\n                    leave\n                }\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function array_allocation_size_array_string_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := add(shl(5, length), 0x20)\n            }\n            function array_dataslot_array_string_storage_dyn(ptr) -> data\n            {\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let slotValue := sload(slot)\n                let length := /** @src -1:-1:-1 */ ret\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := 1\n                length := shr(_1, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _2 := 32\n                if eq(outOfPlaceEncoding, lt(length, _2))\n                {\n                    mstore(/** @src -1:-1:-1 */ ret, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(/** @src -1:-1:-1 */ ret, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x24)\n                }\n                let pos := array_storeLengthForEncoding_array_address_dyn(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(pos, and(slotValue, not(255)))\n                    ret := add(pos, shl(5, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_array_string_storage_dyn(slot)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    for { } lt(i, length) { i := add(i, _2) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, _1)\n                    }\n                    ret := add(pos, i)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function copy_array_from_storage_to_memory_array_string__dyn(slot) -> memPtr\n            {\n                let length := sload(slot)\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr_1 := mload(64)\n                finalize_allocation(memPtr_1, _1)\n                mstore(memPtr_1, length)\n                memPtr := memPtr_1\n                let mpos := memPtr_1\n                let _2 := 0x20\n                mpos := add(memPtr_1, _2)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ slot)\n                let spos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n            }\n            function copy_array_from_storage_to_memory_array_bytes4_dyn(slot) -> memPtr\n            {\n                let _1 := 64\n                memPtr := mload(_1)\n                let pos := memPtr\n                let length := sload(slot)\n                pos := array_storeLengthForEncoding_array_address_dyn(memPtr, length)\n                let srcPtr := array_dataslot_array_string_storage_dyn(slot)\n                let itemCounter := /** @src -1:-1:-1 */ 0\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { }\n                lt(add(itemCounter, 7), length)\n                {\n                    itemCounter := add(itemCounter, 8)\n                }\n                {\n                    let data := sload(srcPtr)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _2 := 224\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(_2, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), pos)\n                    let _3 := 0x20\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _4 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ shl(224, 0xffffffff)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _5 := 192\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_5, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, _3))\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _6 := 160\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_6, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, _1))\n                    let _7 := 96\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _8 := 128\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_8, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, _7))\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _7, data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _8))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _6))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _3, data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _5))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _2))\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    pos := add(pos, 256)\n                    srcPtr := add(srcPtr, 1)\n                }\n                let data_1 := sload(srcPtr)\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(192, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(160, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(128, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 96, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1, shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                }\n                finalize_allocation(memPtr, sub(pos, memPtr))\n            }\n            /// @ast-id 47339 @src 27:291:623  \"function isOnZkSyncChainId() public view returns (bool) {...\"\n            function fun_isOnZkSyncChainId() -> var\n            {\n                /// @src 27:480:558  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId\"\n                let expr := /** @src 27:480:517  \"block.chainid == zkSyncMainnetChainId\" */ eq(/** @src 27:480:493  \"block.chainid\" */ chainid(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sload(/** @src 27:497:517  \"zkSyncMainnetChainId\" */ 0x1f))\n                /// @src 27:480:558  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId\"\n                if iszero(expr)\n                {\n                    expr := /** @src 27:521:558  \"block.chainid == zkSyncSepoliaChainId\" */ eq(/** @src 27:480:493  \"block.chainid\" */ chainid(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sload(/** @src 27:538:558  \"zkSyncSepoliaChainId\" */ 0x20))\n                }\n                /// @src 27:480:616  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId...\"\n                let expr_1 := expr\n                if iszero(expr)\n                {\n                    expr_1 := /** @src 27:574:616  \"block.chainid == zkSyncInMemoryNodeChainId\" */ eq(/** @src 27:480:493  \"block.chainid\" */ chainid(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sload(/** @src 27:591:616  \"zkSyncInMemoryNodeChainId\" */ 0x21))\n                }\n                /// @src 27:473:616  \"return block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId...\"\n                var := expr_1\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function increment_uint256(value) -> ret\n            {\n                if eq(value, not(0))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n                ret := add(value, 1)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function memory_array_index_access_address(baseRef, index) -> addr\n            {\n                if iszero(lt(index, 0x04)) { panic_error_0x32() }\n                addr := add(baseRef, shl(5, index))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                returnValue := and(mload(ptr), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))\n            }\n            /// @ast-id 47436 @src 27:629:1726  \"function isOnZkSyncPrecompiles() public returns (bool isZkSync) {...\"\n            function fun_isOnZkSyncPrecompiles() -> var_isZkSync\n            {\n                /// @src 27:678:691  \"bool isZkSync\"\n                var_isZkSync := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                /// @src 27:678:691  \"bool isZkSync\"\n                let var_isZkSync_1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                let memPtr := mload(64)\n                let newFreePtr := add(memPtr, 128)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n                mstore(memPtr, 3)\n                let _1 := 4\n                mstore(/** @src 27:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, 32), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                mstore(/** @src 27:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64), 5)\n                mstore(/** @src 27:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, 96), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 8)\n                /// @src 27:1366:1379  \"uint256 i = 0\"\n                let var_i := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_isZkSync_1\n                /// @src 27:1361:1695  \"for (uint256 i = 0; i < targets.length; i++) {...\"\n                for { }\n                /** @src 27:1381:1399  \"i < targets.length\" */ lt(var_i, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 27:1366:1379  \"uint256 i = 0\"\n                {\n                    /// @src 27:1401:1404  \"i++\"\n                    var_i := increment_uint256(var_i)\n                }\n                {\n                    /// @src 27:1084:1085  \"1\"\n                    let _2 := 0x01\n                    /// @src 27:1590:1685  \"if (!success) {...\"\n                    if /** @src 27:1594:1602  \"!success\" */ cleanup_bool(iszero(/** @src 27:1487:1577  \"assembly {...\" */ call(gas(), /** @src 27:1463:1473  \"targets[i]\" */ read_from_memoryt_address(memory_array_index_access_address(memPtr, var_i)), /** @src 27:1084:1085  \"1\" */ _2, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_isZkSync_1, var_isZkSync_1, var_isZkSync_1, var_isZkSync_1)))\n                    /// @src 27:1590:1685  \"if (!success) {...\"\n                    {\n                        /// @src 27:1655:1670  \"return isZkSync\"\n                        var_isZkSync := /** @src 27:1084:1085  \"1\" */ _2\n                        /// @src 27:1655:1670  \"return isZkSync\"\n                        leave\n                    }\n                }\n                /// @src 27:1704:1719  \"return isZkSync\"\n                var_isZkSync := var_isZkSync\n            }\n            /// @ast-id 47451 @src 27:1732:1909  \"function isZkSyncChain() public returns (bool isZkSync) {...\"\n            function fun_isZkSyncChain() -> var_isZkSync\n            {\n                /// @src 27:1798:1863  \"if (isOnZkSyncChainId()) {...\"\n                if /** @src 27:1802:1821  \"isOnZkSyncChainId()\" */ fun_isOnZkSyncChainId()\n                /// @src 27:1798:1863  \"if (isOnZkSyncChainId()) {...\"\n                {\n                    /// @src 27:1837:1852  \"return isZkSync\"\n                    var_isZkSync := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                    /// @src 27:1837:1852  \"return isZkSync\"\n                    leave\n                }\n                /// @src 27:1872:1902  \"return isOnZkSyncPrecompiles()\"\n                var_isZkSync := /** @src 27:1879:1902  \"isOnZkSyncPrecompiles()\" */ fun_isOnZkSyncPrecompiles()\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function update_storage_value_offsett_contract_DeployMoodNft_to_contract_DeployMoodNft(value)\n            {\n                sstore(/** @src 45:4126:4156  \"deployer = new DeployMoodNft()\" */ 0x23, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ or(and(sload(/** @src 45:4126:4156  \"deployer = new DeployMoodNft()\" */ 0x23), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(value, sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))))\n            }\n            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n            function abi_decode_available_length_string_fromMemory(src, length, end) -> array\n            {\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(length, 31), /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ not(31)), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20))\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                array := memPtr\n                mstore(memPtr, length)\n                if gt(add(src, length), end)\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                copy_memory_to_memory_with_cleanup(src, add(memPtr, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ length)\n            }\n            function abi_decode_string_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                let offset := mload(headStart)\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                let _1 := add(headStart, offset)\n                if iszero(slt(add(_1, 0x1f), dataEnd))\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                value0 := abi_decode_available_length_string_fromMemory(add(_1, 32), mload(_1), dataEnd)\n            }\n            function abi_encode_stringliteral_7fdc(headStart) -> tail\n            {\n                mstore(headStart, 32)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ add(headStart, 32), 27)\n                mstore(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ headStart, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ \"./images/dynamicNft/sad.svg\")\n                tail := add(headStart, 96)\n            }\n            function abi_encode_stringliteral_0e6d(headStart) -> tail\n            {\n                mstore(headStart, 32)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ add(headStart, 32), 29)\n                mstore(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ headStart, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ \"./images/dynamicNft/happy.svg\")\n                tail := add(headStart, 96)\n            }\n            function abi_encode_string_string(headStart, value0, value1) -> tail\n            {\n                mstore(headStart, 64)\n                let tail_1 := abi_encode_string_to_string(value0, add(headStart, 64))\n                mstore(add(headStart, 32), sub(tail_1, headStart))\n                tail := abi_encode_string_to_string(value1, tail_1)\n            }\n            function update_storage_value_offsett_contract_MoodNft_to_contract_MoodNft(value)\n            {\n                let _1 := sload(/** @src 45:4419:4506  \"moodNft = new MoodNft(deployer.svgToImageURI(sadSvg), deployer.svgToImageURI(happySvg))\" */ 0x22)\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                sstore(/** @src 45:4419:4506  \"moodNft = new MoodNft(deployer.svgToImageURI(sadSvg), deployer.svgToImageURI(happySvg))\" */ 0x22, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ or(and(_1, not(sub(shl(168, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 256))), and(shl(8, value), sub(shl(168, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 256))))\n            }\n            function validator_revert_contract_MoodNft(value)\n            {\n                if iszero(eq(value, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ and(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ value, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))))\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                { revert(0, 0) }\n            }\n            function abi_decode_contract_MoodNft_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                let value := mload(headStart)\n                validator_revert_contract_MoodNft(value)\n                value0 := value\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function extract_from_storage_value_offsett_contract_MoodNft(slot_value) -> value\n            {\n                value := and(shr(8, slot_value), sub(shl(160, /** @src 45:4137:4156  \"new DeployMoodNft()\" */ 1), 1))\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function abi_encode_string_memory_ptr(value, pos) -> end\n            {\n                let length := mload(value)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, length)\n            }\n            function copy_literal_to_memory_061f95ad754b8b2fc14caedf72a009801343f11d011419388184f383cc4c2b73() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_12103(memPtr_1)\n                mstore(memPtr_1, 8)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"Mood NFT\")\n            }\n            /// @src 45:583:593  \"\\\"Mood NFT\\\"\"\n            function assert_helper(condition)\n            {\n                if iszero(condition)\n                {\n                    mstore(0, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ shl(224, 0x4e487b71))\n                    /// @src 45:583:593  \"\\\"Mood NFT\\\"\"\n                    mstore(4, 0x01)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_literal_to_memory_a58cf80943770dd084f078bec17346ccb44c1ca309c9db7e14b1781d30f61dc0() -> memPtr\n            {\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_12103(memPtr_1)\n                mstore(memPtr_1, /** @src 45:583:593  \"\\\"Mood NFT\\\"\" */ 2)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"MN\")\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function abi_encode_rational_by(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                mstore(headStart, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0)\n            }\n            function copy_literal_to_memory_2c783ee4416b50298ab4ea529624eecaa7e04ec923c1fc9ef57fc56e0b54ad13() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_12176(memPtr_1)\n                mstore(memPtr_1, 44)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"Only foundry-zksync works with t\")\n                mstore(add(memPtr_1, 64), \"his function\")\n            }\n            function abi_decode_bytes_fromMemory(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                array := abi_decode_available_length_string_fromMemory(add(offset, 0x20), mload(offset), end)\n            }\n            function abi_decode_address_fromMemory(offset) -> value\n            {\n                value := mload(offset)\n                validator_revert_contract_MoodNft(value)\n            }\n            function abi_decode_array_struct_Log_dyn_fromMemory(headStart, dataEnd) -> value0\n            {\n                let _1 := 32\n                if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n                let offset := mload(headStart)\n                let _2 := 0xffffffffffffffff\n                if gt(offset, _2) { revert(0, 0) }\n                let _3 := add(headStart, offset)\n                if iszero(slt(add(_3, 0x1f), dataEnd))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _4 := mload(_3)\n                let _5 := array_allocation_size_array_string_dyn(_4)\n                let _6 := 64\n                let memPtr := mload(_6)\n                finalize_allocation(memPtr, _5)\n                let dst := memPtr\n                mstore(memPtr, _4)\n                dst := add(memPtr, _1)\n                let _7 := 5\n                let srcEnd := add(add(_3, shl(_7, _4)), _1)\n                if gt(srcEnd, dataEnd)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let src := add(_3, _1)\n                for { } lt(src, srcEnd) { src := add(src, _1) }\n                {\n                    let innerOffset := mload(src)\n                    if gt(innerOffset, _2)\n                    {\n                        /// @src -1:-1:-1\n                        let _8 := 0\n                        /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                        revert(/** @src -1:-1:-1 */ _8, _8)\n                    }\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let _9 := add(_3, innerOffset)\n                    let _10 := 0x60\n                    if slt(add(sub(dataEnd, _9), /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ not(31)), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _10)\n                    {\n                        /// @src -1:-1:-1\n                        let _11 := 0\n                        /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                        revert(/** @src -1:-1:-1 */ _11, _11)\n                    }\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let memPtr_1 := mload(_6)\n                    finalize_allocation_12176(memPtr_1)\n                    let offset_1 := mload(add(_9, _1))\n                    if gt(offset_1, _2)\n                    {\n                        /// @src -1:-1:-1\n                        let _12 := 0\n                        /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                        revert(/** @src -1:-1:-1 */ _12, _12)\n                    }\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let _13 := add(_9, offset_1)\n                    if iszero(slt(add(_13, 63), dataEnd))\n                    {\n                        /// @src -1:-1:-1\n                        let _14 := 0\n                        /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                        revert(/** @src -1:-1:-1 */ _14, _14)\n                    }\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let _15 := mload(add(_13, _1))\n                    let _16 := array_allocation_size_array_string_dyn(_15)\n                    let memPtr_2 := mload(_6)\n                    finalize_allocation(memPtr_2, _16)\n                    let dst_1 := memPtr_2\n                    mstore(memPtr_2, _15)\n                    dst_1 := add(memPtr_2, _1)\n                    let srcEnd_1 := add(add(_13, shl(_7, _15)), _6)\n                    if gt(srcEnd_1, dataEnd)\n                    {\n                        /// @src -1:-1:-1\n                        let _17 := 0\n                        /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                        revert(/** @src -1:-1:-1 */ _17, _17)\n                    }\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let src_1 := add(_13, _6)\n                    for { } lt(src_1, srcEnd_1) { src_1 := add(src_1, _1) }\n                    {\n                        mstore(dst_1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ mload(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ src_1))\n                        dst_1 := add(dst_1, _1)\n                    }\n                    mstore(memPtr_1, memPtr_2)\n                    let offset_2 := mload(add(_9, _6))\n                    if gt(offset_2, _2)\n                    {\n                        /// @src -1:-1:-1\n                        let _18 := 0\n                        /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                        revert(/** @src -1:-1:-1 */ _18, _18)\n                    }\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    mstore(add(memPtr_1, _1), abi_decode_bytes_fromMemory(add(add(_9, offset_2), _1), dataEnd))\n                    mstore(add(memPtr_1, _6), abi_decode_address_fromMemory(add(_9, _10)))\n                    mstore(dst, memPtr_1)\n                    dst := add(dst, _1)\n                }\n                value0 := memPtr\n            }\n            function memory_array_index_access_struct_Log_dyn(baseRef) -> addr\n            {\n                if iszero(mload(baseRef)) { panic_error_0x32() }\n                addr := add(baseRef, 32)\n            }\n            function memory_array_index_access_struct_Log_dyn_12107(baseRef) -> addr\n            {\n                if iszero(lt(/** @src 25:391:392  \"1\" */ 0x01, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(baseRef))) { panic_error_0x32() }\n                addr := add(baseRef, 64)\n            }\n            /// @src 45:5455:5898  \"function testEventRecordsCorrectTokenIdOnMinting() public onlyFoundryZkSync {...\"\n            function fun_testEventRecordsCorrectTokenIdOnMinting_inner()\n            {\n                /// @src 45:5575:5598  \"moodNft.getTokenCounter\"\n                let expr_51284_address := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:5575:5582  \"moodNft\" */ 0x22)))\n                /// @src 45:5575:5600  \"moodNft.getTokenCounter()\"\n                let _1 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5575:5600  \"moodNft.getTokenCounter()\"\n                mstore(_1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x6e02007d))\n                /// @src 45:5575:5600  \"moodNft.getTokenCounter()\"\n                let _2 := staticcall(gas(), expr_51284_address, _1, 4, _1, 32)\n                if iszero(_2) { revert_forward() }\n                let expr := 0\n                if _2\n                {\n                    let _3 := 32\n                    if gt(_3, returndatasize()) { _3 := returndatasize() }\n                    finalize_allocation(_1, _3)\n                    expr := abi_decode_bytes32_fromMemory(_1, add(_1, _3))\n                }\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _4 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 45:5611:5625  \"vm.prank(USER)\"\n                if iszero(extcodesize(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _4))\n                /// @src 45:5611:5625  \"vm.prank(USER)\"\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(/** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0, 0)\n                }\n                /// @src 45:5611:5625  \"vm.prank(USER)\"\n                let _5 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5611:5625  \"vm.prank(USER)\"\n                mstore(_5, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xca669fa7))\n                /// @src 45:5611:5625  \"vm.prank(USER)\"\n                let _6 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _4, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0, /** @src 45:5611:5625  \"vm.prank(USER)\" */ _5, sub(abi_encode_address(add(_5, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 4)), /** @src 45:5611:5625  \"vm.prank(USER)\" */ _5), _5, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0)\n                /// @src 45:5611:5625  \"vm.prank(USER)\"\n                if iszero(_6) { revert_forward() }\n                if _6\n                {\n                    finalize_allocation_12111(_5)\n                    abi_decode(_5, _5)\n                }\n                /// @src 45:5635:5650  \"vm.recordLogs()\"\n                if iszero(extcodesize(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _4))\n                /// @src 45:5635:5650  \"vm.recordLogs()\"\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(/** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0, 0)\n                }\n                /// @src 45:5635:5650  \"vm.recordLogs()\"\n                let _7 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5635:5650  \"vm.recordLogs()\"\n                mstore(_7, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x20d797a9))\n                /// @src 45:5635:5650  \"vm.recordLogs()\"\n                let _8 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _4, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0, /** @src 45:5635:5650  \"vm.recordLogs()\" */ _7, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 4, /** @src 45:5635:5650  \"vm.recordLogs()\" */ _7, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0)\n                /// @src 45:5635:5650  \"vm.recordLogs()\"\n                if iszero(_8) { revert_forward() }\n                if _8\n                {\n                    finalize_allocation_12111(_7)\n                    abi_decode(_7, _7)\n                }\n                /// @src 45:5660:5675  \"moodNft.mintNft\"\n                let expr_51300_address := cleanup_address(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ extract_from_storage_value_offsett_contract_MoodNft(sload(/** @src 45:5575:5582  \"moodNft\" */ 0x22)))\n                /// @src 45:5660:5677  \"moodNft.mintNft()\"\n                if iszero(extcodesize(expr_51300_address))\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(/** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0, 0)\n                }\n                /// @src 45:5660:5677  \"moodNft.mintNft()\"\n                let _9 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5660:5677  \"moodNft.mintNft()\"\n                mstore(_9, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x61114ff5))\n                /// @src 45:5660:5677  \"moodNft.mintNft()\"\n                let _10 := call(gas(), expr_51300_address, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0, /** @src 45:5660:5677  \"moodNft.mintNft()\" */ _9, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 4, /** @src 45:5660:5677  \"moodNft.mintNft()\" */ _9, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0)\n                /// @src 45:5660:5677  \"moodNft.mintNft()\"\n                if iszero(_10) { revert_forward() }\n                if _10\n                {\n                    finalize_allocation_12111(_9)\n                    abi_decode(_9, _9)\n                }\n                /// @src 45:5713:5733  \"vm.getRecordedLogs()\"\n                let _11 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 45:5713:5733  \"vm.getRecordedLogs()\"\n                mstore(_11, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(226, 0x064554e9))\n                /// @src 45:5713:5733  \"vm.getRecordedLogs()\"\n                let _12 := call(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _4, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0, /** @src 45:5713:5733  \"vm.getRecordedLogs()\" */ _11, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 4, /** @src 45:5713:5733  \"vm.getRecordedLogs()\" */ _11, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0)\n                /// @src 45:5713:5733  \"vm.getRecordedLogs()\"\n                if iszero(_12) { revert_forward() }\n                let expr_51311_mpos := /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ 0\n                /// @src 45:5713:5733  \"vm.getRecordedLogs()\"\n                if _12\n                {\n                    let _13 := returndatasize()\n                    returndatacopy(_11, /** @src 45:5575:5600  \"moodNft.getTokenCounter()\" */ expr_51311_mpos, /** @src 45:5713:5733  \"vm.getRecordedLogs()\" */ _13)\n                    finalize_allocation(_11, _13)\n                    expr_51311_mpos := abi_decode_array_struct_Log_dyn_fromMemory(_11, add(_11, _13))\n                }\n                /// @src 45:5867:5890  \"currentAvailableTokenId\"\n                fun_assertEq(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(/** @src 45:5768:5788  \"entries[1].topics[1]\" */ memory_array_index_access_struct_Log_dyn_12107(/** @src 45:5768:5785  \"entries[1].topics\" */ mload(/** @src 45:5768:5778  \"entries[1]\" */ mload(memory_array_index_access_struct_Log_dyn_12107(expr_51311_mpos))))), /** @src 45:5867:5890  \"currentAvailableTokenId\" */ expr)\n            }\n            /// @ast-id 416 @src 2:2270:2380  \"function assertEq(uint256 left, uint256 right) internal pure virtual {...\"\n            function fun_assertEq(var_left, var_right)\n            {\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 2:2349:2373  \"vm.assertEq(left, right)\"\n                if iszero(extcodesize(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1))\n                /// @src 2:2349:2373  \"vm.assertEq(left, right)\"\n                {\n                    /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 2:2349:2373  \"vm.assertEq(left, right)\"\n                let _2 := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 2:2349:2373  \"vm.assertEq(left, right)\"\n                mstore(_2, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(226, 0x260a5b15))\n                mstore(/** @src 2:2349:2373  \"vm.assertEq(left, right)\" */ add(_2, 4), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ var_left)\n                mstore(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(/** @src 2:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 36), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ var_right)\n                /// @src 2:2349:2373  \"vm.assertEq(left, right)\"\n                let _3 := staticcall(gas(), /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, /** @src 2:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 68, /** @src 2:2349:2373  \"vm.assertEq(left, right)\" */ _2, 0)\n                if iszero(_3) { revert_forward() }\n                if _3 { finalize_allocation_12111(_2) }\n            }\n            /// @ast-id 24588 @src 16:6598:6719  \"function log(string memory p0) internal pure {...\"\n            function fun_log(var_p0_mpos)\n            {\n                /// @src 16:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                let expr_24584_mpos := /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 16:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                let _1 := add(expr_24584_mpos, 0x20)\n                mstore(_1, shl(226, 0x104c13eb))\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 16:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ add(expr_24584_mpos, 36), 0x20)\n                let _2 := sub(/** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string_to_string(var_p0_mpos, add(/** @src 16:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_24584_mpos, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 68)), /** @src 16:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_24584_mpos)\n                mstore(expr_24584_mpos, add(_2, /** @src 45:4604:4636  \"abi.encodePacked(moodNft.name())\" */ not(31)))\n                /// @src 16:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                finalize_allocation(expr_24584_mpos, _2)\n                /// @src 16:1222:1381  \"assembly {...\"\n                pop(staticcall(gas(), /** @src 16:591:633  \"0x000000000000000000636F6e736F6c652e6c6f67\" */ 0x636f6e736f6c652e6c6f67, /** @src 16:1222:1381  \"assembly {...\" */ _1, /** @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(/** @src 16:1105:1119  \"payload.length\" */ expr_24584_mpos), /** @src -1:-1:-1 */ 0, 0))\n            }\n            /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function allocate_and_zero_memory_array_array_string_dyn() -> memPtr\n            {\n                let _1 := 64\n                let memPtr_1 := mload(_1)\n                finalize_allocation_12176(memPtr_1)\n                mstore(memPtr_1, /** @src 25:342:343  \"2\" */ 0x02)\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                memPtr := memPtr_1\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 45:479:5900  \"contract MoodNftTest is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { } lt(i, _1) { i := add(i, 0x20) }\n                {\n                    mstore(add(add(memPtr_1, i), 0x20), 96)\n                }\n            }\n            function copy_literal_to_memory_3a20a0a136f9116b8130e31d0d8f14d3b1802506e7c4b809f577c201eb7bf34c() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_12103(memPtr_1)\n                mstore(memPtr_1, 4)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"bash\")\n            }\n            function copy_literal_to_memory_8a27cc57d817a79eb488c9619d660ab19e251964ed3143895742385086def34b() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_12103(memPtr_1)\n                mstore(memPtr_1, 24)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"src/is_foundry_zksync.sh\")\n            }\n            function abi_decode_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let offset := mload(headStart)\n                if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                value0 := abi_decode_bytes_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function convert_bytes_to_fixedbytes_from_bytes_to_bytes32(array) -> value\n            {\n                let length := mload(array)\n                value := mload(add(array, 0x20))\n                if lt(length, 0x20)\n                {\n                    value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n                }\n            }\n        }\n        /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 3:\"lib/forge-std/src/StdChains.sol\", 4:\"lib/forge-std/src/StdCheats.sol\", 12:\"lib/forge-std/src/StdUtils.sol\", 41:\"script/DeployMoodNft.s.sol\"\n        object \"DeployMoodNft_50569\" {\n            code {\n                {\n                    /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    sstore(/** @src 3:3166:3170  \"true\" */ 0x0c, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ or(and(sload(/** @src 3:3166:3170  \"true\" */ 0x0c), /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ not(16711935)), 65537))\n                    sstore(/** @src 41:341:407  \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 0x0d, 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80)\n                    /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                    let _2 := datasize(\"DeployMoodNft_50569_deployed\")\n                    codecopy(_1, dataoffset(\"DeployMoodNft_50569_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\", 41:\"script/DeployMoodNft.s.sol\"\n            object \"DeployMoodNft_50569_deployed\" {\n                code {\n                    {\n                        /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                        let _1 := 64\n                        mstore(_1, memoryguard(0x80))\n                        let _2 := 4\n                        if iszero(lt(calldatasize(), _2))\n                        {\n                            let _3 := 0\n                            switch shr(224, calldataload(_3))\n                            case 0x30d871c6 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                                let offset := calldataload(_2)\n                                if gt(offset, 0xffffffffffffffff) { revert(_3, _3) }\n                                if iszero(slt(add(offset, 35), calldatasize())) { revert(_3, _3) }\n                                let _4 := calldataload(add(_2, offset))\n                                let _5 := array_allocation_size_string(_4)\n                                let memPtr := mload(_1)\n                                finalize_allocation(memPtr, _5)\n                                mstore(memPtr, _4)\n                                if gt(add(add(offset, _4), 36), calldatasize()) { revert(_3, _3) }\n                                calldatacopy(add(memPtr, 32), add(offset, 36), _4)\n                                mstore(add(add(memPtr, _4), 32), _3)\n                                let ret := fun_svgToImageURI(memPtr)\n                                let memPos := mload(_1)\n                                mstore(memPos, 32)\n                                return(memPos, sub(abi_encode_string(ret, add(memPos, 32)), memPos))\n                            }\n                            case 0x910dde5e {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let _6 := sload(/** @src 41:298:407  \"uint256 public DEFAULT_ANVIL_PRIVATE_KEY = 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 13)\n                                /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                let memPos_1 := mload(_1)\n                                mstore(memPos_1, _6)\n                                return(memPos_1, 32)\n                            }\n                            case 0xc0406226 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                /// @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                                let _7 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let _8 := shl(224, 0x60f9bb11)\n                                /// @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                                mstore(_7, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ _8)\n                                mstore(/** @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ add(_7, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _2), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 32)\n                                /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                mstore(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _7, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 36), 27)\n                                mstore(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ add(/** @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _7, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 68), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ \"./images/dynamicNft/sad.svg\")\n                                /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                let _9 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                                let _10 := staticcall(gas(), /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _9, /** @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _7, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 100, /** @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _7, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3)\n                                /// @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                                if iszero(_10)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                                let expr_mpos := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3\n                                /// @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\"\n                                if _10\n                                {\n                                    let _11 := returndatasize()\n                                    returndatacopy(_7, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 41:489:531  \"vm.readFile(\\\"./images/dynamicNft/sad.svg\\\")\" */ _11)\n                                    finalize_allocation(_7, _11)\n                                    expr_mpos := abi_decode_string_fromMemory(_7, add(_7, _11))\n                                }\n                                /// @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                                let _12 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                /// @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                                mstore(_12, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ _8)\n                                mstore(/** @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ add(_12, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _2), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 32)\n                                /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                mstore(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _12, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 36), 29)\n                                mstore(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ add(/** @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _12, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 68), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ \"./images/dynamicNft/happy.svg\")\n                                /// @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                                let _13 := staticcall(gas(), /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _9, /** @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _12, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 100, /** @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _12, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3)\n                                /// @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                                if iszero(_13)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_1 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_1, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                                let expr_mpos_1 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3\n                                /// @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\"\n                                if _13\n                                {\n                                    let _14 := returndatasize()\n                                    returndatacopy(_12, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 41:566:610  \"vm.readFile(\\\"./images/dynamicNft/happy.svg\\\")\" */ _14)\n                                    finalize_allocation(_12, _14)\n                                    expr_mpos_1 := abi_decode_string_fromMemory(_12, add(_12, _14))\n                                }\n                                /// @src 41:621:640  \"vm.startBroadcast()\"\n                                if iszero(extcodesize(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _9))\n                                /// @src 41:621:640  \"vm.startBroadcast()\"\n                                {\n                                    /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                    revert(_3, _3)\n                                }\n                                /// @src 41:621:640  \"vm.startBroadcast()\"\n                                let _15 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                /// @src 41:621:640  \"vm.startBroadcast()\"\n                                mstore(_15, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fb5297f))\n                                /// @src 41:621:640  \"vm.startBroadcast()\"\n                                let _16 := call(gas(), /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _9, _3, /** @src 41:621:640  \"vm.startBroadcast()\" */ _15, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _2, /** @src 41:621:640  \"vm.startBroadcast()\" */ _15, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3)\n                                /// @src 41:621:640  \"vm.startBroadcast()\"\n                                if iszero(_16)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_2 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_2, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 41:621:640  \"vm.startBroadcast()\"\n                                if _16\n                                {\n                                    finalize_allocation_2511(_15)\n                                    /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                    _3 := _3\n                                }\n                                /// @src 41:680:701  \"svgToImageURI(sadSvg)\"\n                                let expr_mpos_2 := fun_svgToImageURI(expr_mpos)\n                                /// @src 41:703:726  \"svgToImageURI(happySvg)\"\n                                let expr_mpos_3 := fun_svgToImageURI(expr_mpos_1)\n                                /// @src 41:668:727  \"new MoodNft(svgToImageURI(sadSvg), svgToImageURI(happySvg))\"\n                                let _17 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                /// @src 41:668:727  \"new MoodNft(svgToImageURI(sadSvg), svgToImageURI(happySvg))\"\n                                let _18 := datasize(\"MoodNft_51029\")\n                                let _19 := add(_17, _18)\n                                if or(gt(_19, 0xffffffffffffffff), lt(_19, _17))\n                                {\n                                    /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                    mstore(_3, shl(224, 0x4e487b71))\n                                    mstore(_2, 0x41)\n                                    revert(_3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 36)\n                                }\n                                /// @src 41:668:727  \"new MoodNft(svgToImageURI(sadSvg), svgToImageURI(happySvg))\"\n                                datacopy(_17, dataoffset(\"MoodNft_51029\"), _18)\n                                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                mstore(_19, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _1)\n                                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let tail := abi_encode_string(expr_mpos_2, add(_19, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _1))\n                                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                mstore(add(_19, 32), sub(tail, _19))\n                                /// @src 41:668:727  \"new MoodNft(svgToImageURI(sadSvg), svgToImageURI(happySvg))\"\n                                let expr_address := create(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 41:668:727  \"new MoodNft(svgToImageURI(sadSvg), svgToImageURI(happySvg))\" */ _17, sub(/** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ abi_encode_string(expr_mpos_3, tail), /** @src 41:668:727  \"new MoodNft(svgToImageURI(sadSvg), svgToImageURI(happySvg))\" */ _17))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_3 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_3, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_3, returndatasize())\n                                }\n                                /// @src 41:737:755  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _9))\n                                /// @src 41:737:755  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                    revert(_3, _3)\n                                }\n                                /// @src 41:737:755  \"vm.stopBroadcast()\"\n                                let _20 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                /// @src 41:737:755  \"vm.stopBroadcast()\"\n                                mstore(_20, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n                                /// @src 41:737:755  \"vm.stopBroadcast()\"\n                                let _21 := call(gas(), /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _9, _3, /** @src 41:737:755  \"vm.stopBroadcast()\" */ _20, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _2, /** @src 41:737:755  \"vm.stopBroadcast()\" */ _20, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3)\n                                /// @src 41:737:755  \"vm.stopBroadcast()\"\n                                if iszero(_21)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_4 := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(_1)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_4, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_4, returndatasize())\n                                }\n                                /// @src 41:737:755  \"vm.stopBroadcast()\"\n                                if _21\n                                {\n                                    finalize_allocation_2511(_20)\n                                    /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                                    if _3 { revert(_3, _3) }\n                                }\n                                let memPos_2 := mload(_1)\n                                mstore(memPos_2, and(expr_address, sub(shl(160, 1), 1)))\n                                return(memPos_2, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 32)\n                            }\n                            case /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 0xf8ccbf47 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let value := and(shr(16, sload(/** @src 1:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 0xff)\n                                let memPos_3 := mload(_1)\n                                mstore(memPos_3, iszero(iszero(value)))\n                                return(memPos_3, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function finalize_allocation_2511(memPtr)\n                    {\n                        if gt(memPtr, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, memPtr)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function array_allocation_size_string(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size := add(and(add(length, 31), not(31)), 0x20)\n                    }\n                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                    {\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 32) }\n                        {\n                            mstore(add(dst, i), mload(add(src, i)))\n                        }\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_encode_string(value, pos) -> end\n                    {\n                        let length := mload(value)\n                        mstore(pos, length)\n                        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                    }\n                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                    function abi_decode_string_fromMemory(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let offset := mload(headStart)\n                        if gt(offset, 0xffffffffffffffff)\n                        {\n                            /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _1 := add(headStart, offset)\n                        if iszero(slt(add(_1, 0x1f), dataEnd))\n                        {\n                            /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let _2 := mload(_1)\n                        let _3 := array_allocation_size_string(_2)\n                        /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, _3)\n                        /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(memPtr, _2)\n                        if gt(add(add(_1, _2), 32), dataEnd)\n                        {\n                            /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                        copy_memory_to_memory_with_cleanup(add(_1, 32), add(memPtr, 32), _2)\n                        value0 := memPtr\n                    }\n                    /// @ast-id 50568 @src 41:869:1523  \"function svgToImageURI(string memory svg) public pure returns (string memory) {...\"\n                    function fun_svgToImageURI(var_svg_mpos) -> var__mpos\n                    {\n                        /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                        let memPtr := mload(64)\n                        let newFreePtr := add(memPtr, 64)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        mstore(memPtr, 26)\n                        let _1 := 32\n                        let _2 := add(memPtr, _1)\n                        mstore(_2, \"data:image/svg+xml;base64,\")\n                        /// @src 41:1314:1335  \"abi.encodePacked(svg)\"\n                        let expr_50553_mpos := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(64)\n                        let length := mload(var_svg_mpos)\n                        copy_memory_to_memory_with_cleanup(add(var_svg_mpos, _1), /** @src 41:1314:1335  \"abi.encodePacked(svg)\" */ add(expr_50553_mpos, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _1), length)\n                        /// @src 41:1314:1335  \"abi.encodePacked(svg)\"\n                        let _3 := sub(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ add(/** @src 41:1314:1335  \"abi.encodePacked(svg)\" */ expr_50553_mpos, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ length), /** @src 41:1314:1335  \"abi.encodePacked(svg)\" */ expr_50553_mpos)\n                        mstore(expr_50553_mpos, _3)\n                        finalize_allocation(expr_50553_mpos, add(_3, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _1))\n                        /// @src 41:1274:1448  \"Base64.encode(...\"\n                        let expr_mpos := fun_encode(/** @src 41:1307:1336  \"string(abi.encodePacked(svg))\" */ expr_50553_mpos)\n                        /// @src 41:1472:1515  \"abi.encodePacked(baseURI, svgBase64Encoded)\"\n                        let expr_50564_mpos := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(64)\n                        let length_1 := mload(memPtr)\n                        copy_memory_to_memory_with_cleanup(_2, /** @src 41:1472:1515  \"abi.encodePacked(baseURI, svgBase64Encoded)\" */ add(expr_50564_mpos, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _1), length_1)\n                        let _4 := add(/** @src 41:1472:1515  \"abi.encodePacked(baseURI, svgBase64Encoded)\" */ expr_50564_mpos, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ length_1)\n                        let length_2 := mload(expr_mpos)\n                        copy_memory_to_memory_with_cleanup(add(expr_mpos, _1), add(_4, _1), length_2)\n                        /// @src 41:1472:1515  \"abi.encodePacked(baseURI, svgBase64Encoded)\"\n                        let _5 := sub(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ add(_4, length_2), /** @src 41:1472:1515  \"abi.encodePacked(baseURI, svgBase64Encoded)\" */ expr_50564_mpos)\n                        mstore(expr_50564_mpos, _5)\n                        finalize_allocation(expr_50564_mpos, add(_5, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ _1))\n                        /// @src 41:1458:1516  \"return string(abi.encodePacked(baseURI, svgBase64Encoded))\"\n                        var__mpos := expr_50564_mpos\n                    }\n                    /// @ast-id 48988 @src 34:476:3858  \"function encode(bytes memory data) internal pure returns (string memory) {...\"\n                    function fun_encode(var_data_mpos) -> var_mpos\n                    {\n                        /// @src 34:762:793  \"if (data.length == 0) return \\\"\\\"\"\n                        if /** @src 34:766:782  \"data.length == 0\" */ iszero(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(/** @src 34:766:777  \"data.length\" */ var_data_mpos))\n                        /// @src 34:762:793  \"if (data.length == 0) return \\\"\\\"\"\n                        {\n                            /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                            let memPtr := mload(64)\n                            let newFreePtr := add(memPtr, 0x20)\n                            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                            mstore(memPtr, /** @src 34:781:782  \"0\" */ 0x00)\n                            /// @src 34:784:793  \"return \\\"\\\"\"\n                            var_mpos := memPtr\n                            leave\n                        }\n                        /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                        let memPtr_1 := mload(64)\n                        let newFreePtr_1 := add(memPtr_1, 96)\n                        if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr_1)\n                        mstore(memPtr_1, 64)\n                        mstore(add(memPtr_1, 32), \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\")\n                        mstore(add(memPtr_1, 64), \"ghijklmnopqrstuvwxyz0123456789+/\")\n                        /// @src 34:1314:1325  \"data.length\"\n                        let expr := /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ mload(/** @src 34:1314:1325  \"data.length\" */ var_data_mpos)\n                        /// @src 34:1328:1329  \"2\"\n                        let _1 := 0x02\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        let sum := add(expr, /** @src 34:1328:1329  \"2\" */ _1)\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        if gt(expr, sum)\n                        {\n                            mstore(/** @src 34:781:782  \"0\" */ 0x00, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ shl(224, 0x4e487b71))\n                            /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                            mstore(4, 0x11)\n                            revert(/** @src 34:781:782  \"0\" */ 0x00, /** @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\" */ 0x24)\n                        }\n                        /// @src 34:1333:1334  \"3\"\n                        let _2 := 0x03\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        let r := div(sum, /** @src 34:1333:1334  \"3\" */ _2)\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        let product := shl(/** @src 34:1328:1329  \"2\" */ _1, /** @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\" */ r)\n                        if iszero(eq(r, and(r, sub(shl(254, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 1), 1))))\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        {\n                            mstore(/** @src 34:781:782  \"0\" */ 0x00, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ shl(224, 0x4e487b71))\n                            /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                            mstore(/** @src 34:1308:1309  \"4\" */ 0x04, /** @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\" */ 0x11)\n                            revert(/** @src 34:781:782  \"0\" */ 0x00, /** @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\" */ 0x24)\n                        }\n                        /// @src 41:259:1525  \"contract DeployMoodNft is Script {...\"\n                        let _3 := array_allocation_size_string(product)\n                        let memPtr_2 := mload(64)\n                        finalize_allocation(memPtr_2, _3)\n                        mstore(memPtr_2, product)\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        let dataSize := array_allocation_size_string(product)\n                        let dataStart := add(memPtr_2, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 32)\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        calldatacopy(dataStart, calldatasize(), add(dataSize, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ not(31)))\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        let usr$resultPtr := dataStart\n                        let usr$dataPtr := var_data_mpos\n                        let usr$endPtr := add(var_data_mpos, mload(var_data_mpos))\n                        let usr$afterPtr := add(usr$endPtr, /** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 32)\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        let usr$afterCache := mload(usr$afterPtr)\n                        mstore(usr$afterPtr, /** @src 34:781:782  \"0\" */ 0x00)\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        for { } lt(usr$dataPtr, usr$endPtr) { }\n                        {\n                            usr$dataPtr := add(usr$dataPtr, /** @src 34:1333:1334  \"3\" */ _2)\n                            /// @src 34:1390:3828  \"assembly {...\"\n                            let usr$input := mload(usr$dataPtr)\n                            let _4 := 1\n                            let _5 := 0x3F\n                            mstore8(usr$resultPtr, mload(add(add(memPtr_1, and(shr(18, usr$input), _5)), _4)))\n                            mstore8(add(usr$resultPtr, _4), mload(add(add(memPtr_1, and(shr(12, usr$input), _5)), _4)))\n                            mstore8(add(usr$resultPtr, /** @src 34:1328:1329  \"2\" */ _1), /** @src 34:1390:3828  \"assembly {...\" */ mload(add(add(memPtr_1, and(shr(6, usr$input), _5)), _4)))\n                            mstore8(add(usr$resultPtr, /** @src 34:1333:1334  \"3\" */ _2), /** @src 34:1390:3828  \"assembly {...\" */ mload(add(add(memPtr_1, and(usr$input, _5)), _4)))\n                            usr$resultPtr := add(usr$resultPtr, /** @src 34:1308:1309  \"4\" */ 0x04)\n                        }\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        mstore(usr$afterPtr, usr$afterCache)\n                        switch mod(mload(var_data_mpos), /** @src 34:1333:1334  \"3\" */ _2)\n                        case /** @src 34:1390:3828  \"assembly {...\" */ 1 {\n                            mstore8(add(usr$resultPtr, not(0)), 0x3d)\n                            mstore8(add(usr$resultPtr, not(/** @src 41:259:1525  \"contract DeployMoodNft is Script {...\" */ 1)), /** @src 34:1390:3828  \"assembly {...\" */ 0x3d)\n                        }\n                        case 2 {\n                            mstore8(add(usr$resultPtr, not(0)), 0x3d)\n                        }\n                        /// @src 34:3838:3851  \"return result\"\n                        var_mpos := memPtr_2\n                    }\n                }\n                /// @use-src 28:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 29:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 30:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 31:\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\", 33:\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\", 35:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 37:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 38:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\", 44:\"src/MoodNft.sol\"\n                object \"MoodNft_51029\" {\n                    code {\n                        {\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(64, memoryguard(0x80))\n                            if callvalue() { revert(0, 0) }\n                            let programSize := datasize(\"MoodNft_51029\")\n                            let argSize := sub(codesize(), programSize)\n                            let memoryDataOffset := allocate_memory(argSize)\n                            codecopy(memoryDataOffset, programSize, argSize)\n                            let _1 := add(memoryDataOffset, argSize)\n                            if slt(sub(_1, memoryDataOffset), 64)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let offset := mload(memoryDataOffset)\n                            let _2 := sub(shl(64, 1), 1)\n                            if gt(offset, _2)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n                            let _3 := 32\n                            let offset_1 := mload(add(memoryDataOffset, _3))\n                            if gt(offset_1, _2)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let value1 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n                            let memPtr := allocate_memory_6113()\n                            let _4 := 8\n                            mstore(memPtr, _4)\n                            mstore(add(memPtr, _3), \"Mood NFT\")\n                            let memPtr_1 := allocate_memory_6113()\n                            mstore(memPtr_1, 2)\n                            mstore(add(memPtr_1, _3), \"MN\")\n                            let newLen := mload(memPtr)\n                            if gt(newLen, _2)\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            /// @src -1:-1:-1\n                            let _5 := 0\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let _6 := sload(/** @src -1:-1:-1 */ _5)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let length := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let _7 := 1\n                            length := shr(_7, _6)\n                            let outOfPlaceEncoding := and(_6, _7)\n                            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                            if eq(outOfPlaceEncoding, lt(length, _3))\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x22)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            let _8 := 31\n                            if gt(length, _8)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, _5)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let data := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let deleteStart := add(data, shr(5, add(newLen, _8)))\n                                if lt(newLen, _3) { deleteStart := data }\n                                let _9 := add(data, shr(5, add(length, _8)))\n                                let start := deleteStart\n                                for { } lt(start, _9) { start := add(start, _7) }\n                                {\n                                    sstore(start, /** @src -1:-1:-1 */ _5)\n                                }\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let srcOffset := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            srcOffset := _3\n                            switch gt(newLen, _8)\n                            case 1 {\n                                let loopEnd := and(newLen, not(31))\n                                mstore(/** @src -1:-1:-1 */ _5, _5)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let dstPtr := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let i := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                for { } lt(i, loopEnd) { i := add(i, _3) }\n                                {\n                                    sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                                    dstPtr := add(dstPtr, _7)\n                                    srcOffset := add(srcOffset, _3)\n                                }\n                                if lt(loopEnd, newLen)\n                                {\n                                    let lastValue := mload(add(memPtr, srcOffset))\n                                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                }\n                                sstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ add(shl(_7, newLen), _7))\n                            }\n                            default {\n                                let value := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if newLen\n                                {\n                                    value := mload(add(memPtr, srcOffset))\n                                }\n                                sstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_7, newLen)))\n                            }\n                            let newLen_1 := mload(memPtr_1)\n                            if gt(newLen_1, _2)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            let _10 := sload(_7)\n                            let length_1 := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            length_1 := shr(_7, _10)\n                            let outOfPlaceEncoding_1 := and(_10, _7)\n                            if iszero(outOfPlaceEncoding_1)\n                            {\n                                length_1 := and(length_1, 0x7f)\n                            }\n                            if eq(outOfPlaceEncoding_1, lt(length_1, _3))\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x22)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            if gt(length_1, _8)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _7)\n                                let data_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _8)))\n                                if lt(newLen_1, _3) { deleteStart_1 := data_1 }\n                                let _11 := add(data_1, shr(5, add(length_1, _8)))\n                                let start_1 := deleteStart_1\n                                for { } lt(start_1, _11) { start_1 := add(start_1, _7) }\n                                {\n                                    sstore(start_1, /** @src -1:-1:-1 */ _5)\n                                }\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let srcOffset_1 := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            srcOffset_1 := _3\n                            switch gt(newLen_1, _8)\n                            case 1 {\n                                let loopEnd_1 := and(newLen_1, not(31))\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _7)\n                                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let i_1 := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _3) }\n                                {\n                                    sstore(dstPtr_1, mload(add(memPtr_1, srcOffset_1)))\n                                    dstPtr_1 := add(dstPtr_1, _7)\n                                    srcOffset_1 := add(srcOffset_1, _3)\n                                }\n                                if lt(loopEnd_1, newLen_1)\n                                {\n                                    let lastValue_1 := mload(add(memPtr_1, srcOffset_1))\n                                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                                }\n                                sstore(_7, add(shl(_7, newLen_1), _7))\n                            }\n                            default {\n                                let value_1 := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if newLen_1\n                                {\n                                    value_1 := mload(add(memPtr_1, srcOffset_1))\n                                }\n                                sstore(_7, or(and(value_1, not(shr(shl(3, newLen_1), not(0)))), shl(_7, newLen_1)))\n                            }\n                            /// @src 28:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            if /** @src 28:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 44:1115:1125  \"msg.sender\" */ caller())\n                            /// @src 28:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            {\n                                /// @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                let _12 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                /// @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                mstore(_12, shl(224, 0x1e4fbdf7))\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(/** @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\" */ add(_12, 4), /** @src -1:-1:-1 */ _5)\n                                /// @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                revert(_12, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                            }\n                            let _13 := sload(/** @src 28:3004:3010  \"_owner\" */ 0x06)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            sstore(/** @src 28:3004:3010  \"_owner\" */ 0x06, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(_13, not(sub(shl(160, 1), 1))), /** @src 44:1115:1125  \"msg.sender\" */ caller()))\n                            /// @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                            log3(/** @src -1:-1:-1 */ _5, _5, /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_13, sub(shl(160, 1), 1)), /** @src 44:1115:1125  \"msg.sender\" */ caller())\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            sstore(/** @src 44:1137:1155  \"s_tokenCounter = 0\" */ 0x07, /** @src -1:-1:-1 */ _5)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let newLen_2 := mload(value0)\n                            if gt(newLen_2, _2)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            let _14 := sload(_4)\n                            let length_2 := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            length_2 := shr(_7, _14)\n                            let outOfPlaceEncoding_2 := and(_14, _7)\n                            if iszero(outOfPlaceEncoding_2)\n                            {\n                                length_2 := and(length_2, 0x7f)\n                            }\n                            if eq(outOfPlaceEncoding_2, lt(length_2, _3))\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x22)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            if gt(length_2, _8)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4)\n                                let data_2 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let deleteStart_2 := add(data_2, shr(5, add(newLen_2, _8)))\n                                if lt(newLen_2, _3) { deleteStart_2 := data_2 }\n                                let _15 := add(data_2, shr(5, add(length_2, _8)))\n                                let start_2 := deleteStart_2\n                                for { } lt(start_2, _15) { start_2 := add(start_2, _7) }\n                                {\n                                    sstore(start_2, /** @src -1:-1:-1 */ _5)\n                                }\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let srcOffset_2 := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            srcOffset_2 := _3\n                            switch gt(newLen_2, _8)\n                            case 1 {\n                                let loopEnd_2 := and(newLen_2, not(31))\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4)\n                                let dstPtr_2 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let i_2 := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                for { } lt(i_2, loopEnd_2) { i_2 := add(i_2, _3) }\n                                {\n                                    sstore(dstPtr_2, mload(add(value0, srcOffset_2)))\n                                    dstPtr_2 := add(dstPtr_2, _7)\n                                    srcOffset_2 := add(srcOffset_2, _3)\n                                }\n                                if lt(loopEnd_2, newLen_2)\n                                {\n                                    let lastValue_2 := mload(add(value0, srcOffset_2))\n                                    sstore(dstPtr_2, and(lastValue_2, not(shr(and(shl(3, newLen_2), 248), not(0)))))\n                                }\n                                sstore(_4, add(shl(_7, newLen_2), _7))\n                            }\n                            default {\n                                let value_2 := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if newLen_2\n                                {\n                                    value_2 := mload(add(value0, srcOffset_2))\n                                }\n                                sstore(_4, or(and(value_2, not(shr(shl(3, newLen_2), not(0)))), shl(_7, newLen_2)))\n                            }\n                            let newLen_3 := mload(value1)\n                            if gt(newLen_3, _2)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            let _16 := sload(/** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let length_3 := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            length_3 := shr(_7, _16)\n                            let outOfPlaceEncoding_3 := and(_16, _7)\n                            if iszero(outOfPlaceEncoding_3)\n                            {\n                                length_3 := and(length_3, 0x7f)\n                            }\n                            if eq(outOfPlaceEncoding_3, lt(length_3, _3))\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x22)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            if gt(length_3, _8)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let data_3 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let deleteStart_3 := add(data_3, shr(5, add(newLen_3, _8)))\n                                if lt(newLen_3, _3) { deleteStart_3 := data_3 }\n                                let _17 := add(data_3, shr(5, add(length_3, _8)))\n                                let start_3 := deleteStart_3\n                                for { } lt(start_3, _17) { start_3 := add(start_3, _7) }\n                                {\n                                    sstore(start_3, /** @src -1:-1:-1 */ _5)\n                                }\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let srcOffset_3 := /** @src -1:-1:-1 */ _5\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            srcOffset_3 := _3\n                            switch gt(newLen_3, _8)\n                            case 1 {\n                                let loopEnd_3 := and(newLen_3, not(31))\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let dstPtr_3 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                let i_3 := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                for { } lt(i_3, loopEnd_3) { i_3 := add(i_3, _3) }\n                                {\n                                    sstore(dstPtr_3, mload(add(value1, srcOffset_3)))\n                                    dstPtr_3 := add(dstPtr_3, _7)\n                                    srcOffset_3 := add(srcOffset_3, _3)\n                                }\n                                if lt(loopEnd_3, newLen_3)\n                                {\n                                    let lastValue_3 := mload(add(value1, srcOffset_3))\n                                    sstore(dstPtr_3, and(lastValue_3, not(shr(and(shl(3, newLen_3), 248), not(0)))))\n                                }\n                                sstore(/** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ add(shl(_7, newLen_3), _7))\n                            }\n                            default {\n                                let value_3 := /** @src -1:-1:-1 */ _5\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if newLen_3\n                                {\n                                    value_3 := mload(add(value1, srcOffset_3))\n                                }\n                                sstore(/** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(value_3, not(shr(shl(3, newLen_3), not(0)))), shl(_7, newLen_3)))\n                            }\n                            let _18 := mload(64)\n                            let _19 := datasize(\"MoodNft_51029_deployed\")\n                            codecopy(_18, dataoffset(\"MoodNft_51029_deployed\"), _19)\n                            return(_18, _19)\n                        }\n                        function allocate_memory_6113() -> memPtr\n                        {\n                            memPtr := mload(64)\n                            let newFreePtr := add(memPtr, 64)\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                        }\n                        function allocate_memory(size) -> memPtr\n                        {\n                            memPtr := mload(64)\n                            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                        }\n                        function abi_decode_string_fromMemory(offset, end) -> array\n                        {\n                            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                            let _1 := mload(offset)\n                            if gt(_1, sub(shl(64, 1), 1))\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                            }\n                            let _2 := 0x20\n                            let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), _2))\n                            mstore(array_1, _1)\n                            if gt(add(add(offset, _1), _2), end)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let i := /** @src -1:-1:-1 */ 0\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            for { } lt(i, _1) { i := add(i, _2) }\n                            {\n                                mstore(add(add(array_1, i), _2), mload(add(add(offset, i), _2)))\n                            }\n                            mstore(add(add(array_1, _1), _2), /** @src -1:-1:-1 */ 0)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            array := array_1\n                        }\n                    }\n                    /// @use-src 28:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 30:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\", 35:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 37:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 44:\"src/MoodNft.sol\"\n                    object \"MoodNft_51029_deployed\" {\n                        code {\n                            {\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _1 := memoryguard(0x80)\n                                let _2 := 64\n                                mstore(_2, _1)\n                                let _3 := 4\n                                if iszero(lt(calldatasize(), _3))\n                                {\n                                    let _4 := 0\n                                    switch shr(224, calldataload(_4))\n                                    case 0x01ffc9a7 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let value := calldataload(_3)\n                                        let _5 := and(value, shl(224, 0xffffffff))\n                                        if iszero(eq(value, _5)) { revert(_4, _4) }\n                                        /// @src 30:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                        let expr := /** @src 30:1698:1738  \"interfaceId == type(IERC721).interfaceId\" */ eq(_5, /** @src 30:1713:1738  \"type(IERC721).interfaceId\" */ shl(224, 0x80ac58cd))\n                                        /// @src 30:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                        if iszero(expr)\n                                        {\n                                            expr := /** @src 30:1754:1802  \"interfaceId == type(IERC721Metadata).interfaceId\" */ eq(_5, /** @src 30:1769:1802  \"type(IERC721Metadata).interfaceId\" */ shl(224, 0x5b5e139f))\n                                        }\n                                        /// @src 30:1698:1854  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                        let expr_1 := expr\n                                        if iszero(expr)\n                                        {\n                                            expr_1 := /** @src 37:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_5, /** @src 37:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                        }\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        mstore(_1, iszero(iszero(expr_1)))\n                                        return(_1, 32)\n                                    }\n                                    case 0x06fdde03 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let converted := copy_array_from_storage_to_memory_string()\n                                        let memPos := mload(_2)\n                                        mstore(memPos, 32)\n                                        return(memPos, sub(abi_encode_string(converted, add(memPos, 32)), memPos))\n                                    }\n                                    case 0x081812fc {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let ret := fun_getApproved(calldataload(_3))\n                                        let memPos_1 := mload(_2)\n                                        mstore(memPos_1, and(ret, sub(shl(160, 1), 1)))\n                                        return(memPos_1, 32)\n                                    }\n                                    case 0x095ea7b3 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                        let value0 := abi_decode_address_8199()\n                                        let value_1 := calldataload(36)\n                                        /// @src 30:14943:14965  \"_requireOwned(tokenId)\"\n                                        let expr_2 := fun_requireOwned(value_1)\n                                        /// @src 30:15093:15128  \"auth != address(0) && owner != auth\"\n                                        let expr_3 := /** @src 30:15093:15111  \"auth != address(0)\" */ iszero(iszero(/** @src 35:735:745  \"msg.sender\" */ caller()))\n                                        /// @src 30:15093:15128  \"auth != address(0) && owner != auth\"\n                                        if expr_3\n                                        {\n                                            expr_3 := /** @src 30:15115:15128  \"owner != auth\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:15115:15128  \"owner != auth\" */ expr_2, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1)), /** @src 35:735:745  \"msg.sender\" */ caller()))\n                                        }\n                                        /// @src 30:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                        let expr_4 := expr_3\n                                        if expr_3\n                                        {\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(_4, and(expr_2, sub(shl(160, 1), 1)))\n                                            mstore(0x20, /** @src 30:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            let _6 := keccak256(_4, _2)\n                                            mstore(_4, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(0x20, _6)\n                                            /// @src 30:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                            expr_4 := /** @src 30:15132:15162  \"!isApprovedForAll(owner, auth)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(_4, _2)), 0xff))\n                                        }\n                                        /// @src 30:15089:15231  \"if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {...\"\n                                        if expr_4\n                                        {\n                                            /// @src 30:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                            let _7 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 30:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                            mstore(_7, shl(224, 0xa9fbf51f))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:15189:15216  \"ERC721InvalidApprover(auth)\" */ add(_7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                            /// @src 30:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                            revert(_7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                        let _8 := sub(shl(160, 1), 1)\n                                        let _9 := and(/** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ value0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _8)\n                                        /// @src 30:15283:15311  \"Approval(owner, to, tokenId)\"\n                                        log4(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ expr_2, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _8), _9, /** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ value_1)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        mstore(_4, value_1)\n                                        mstore(0x20, _3)\n                                        let _10 := keccak256(_4, _2)\n                                        sstore(_10, or(and(sload(_10), shl(160, 0xffffffffffffffffffffffff)), _9))\n                                        return(_4, _4)\n                                    }\n                                    case 0x23b872dd {\n                                        if callvalue() { revert(_4, _4) }\n                                        let param, param_1, param_2 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                        fun_transferFrom(param, param_1, param_2)\n                                        return(_4, _4)\n                                    }\n                                    case 0x42842e0e {\n                                        if callvalue() { revert(_4, _4) }\n                                        let param_3, param_4, param_5 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                        let memPtr := mload(_2)\n                                        finalize_allocation_18857(memPtr)\n                                        mstore(memPtr, _4)\n                                        /// @src 30:5121:5128  \"tokenId\"\n                                        fun_transferFrom(param_3, param_4, param_5)\n                                        /// @src 30:5181:5185  \"data\"\n                                        fun_checkOnERC721Received(param_3, param_4, param_5, memPtr)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0x5de0682f {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let converted_1 := copy_array_from_storage_to_memory_string_8204()\n                                        let memPos_2 := mload(_2)\n                                        mstore(memPos_2, 32)\n                                        return(memPos_2, sub(abi_encode_string(converted_1, add(memPos_2, 32)), memPos_2))\n                                    }\n                                    case 0x6352211e {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        /// @src 30:2267:2296  \"return _requireOwned(tokenId)\"\n                                        let var := /** @src 30:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ calldataload(_3))\n                                        let memPos_3 := mload(_2)\n                                        mstore(memPos_3, and(var, sub(shl(160, 1), 1)))\n                                        return(memPos_3, 32)\n                                    }\n                                    case 0x6e02007d {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let _11 := sload(/** @src 44:3430:3444  \"s_tokenCounter\" */ 0x07)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let memPos_4 := mload(_2)\n                                        mstore(memPos_4, _11)\n                                        return(memPos_4, 32)\n                                    }\n                                    case 0x70a08231 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let _12 := and(abi_decode_address_8199(), sub(shl(160, 1), 1))\n                                        /// @src 30:2002:2089  \"if (owner == address(0)) {...\"\n                                        if /** @src 30:2006:2025  \"owner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _12)\n                                        /// @src 30:2002:2089  \"if (owner == address(0)) {...\"\n                                        {\n                                            /// @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                            let _13 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                            mstore(_13, shl(226, 0x22718ad9))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\" */ add(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                            /// @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                            revert(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                        mstore(_4, _12)\n                                        mstore(32, /** @src 30:2105:2114  \"_balances\" */ 0x03)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let _14 := sload(keccak256(_4, _2))\n                                        let memPos_5 := mload(_2)\n                                        mstore(memPos_5, _14)\n                                        return(memPos_5, 32)\n                                    }\n                                    case 0x715018a6 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        /// @src 28:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let _15 := sload(/** @src 28:3004:3010  \"_owner\" */ 0x06)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        sstore(/** @src 28:3004:3010  \"_owner\" */ 0x06, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_15, shl(160, 0xffffffffffffffffffffffff)))\n                                        /// @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_15, sub(shl(160, 1), 1)), _4)\n                                        return(_4, _4)\n                                    }\n                                    case 0x8da5cb5b {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let cleaned := and(sload(/** @src 28:1710:1716  \"_owner\" */ 0x06), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1))\n                                        let memPos_6 := mload(_2)\n                                        mstore(memPos_6, cleaned)\n                                        return(memPos_6, 32)\n                                    }\n                                    case 0x95d89b41 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let memPtr_1 := mload(_2)\n                                        let ret_1 := _4\n                                        /// @src 30:2597:2604  \"_symbol\"\n                                        let _16 := 0x01\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let slotValue := sload(/** @src 30:2597:2604  \"_symbol\" */ _16)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let length := _4\n                                        length := shr(/** @src 30:2597:2604  \"_symbol\" */ _16, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ slotValue)\n                                        let outOfPlaceEncoding := and(slotValue, /** @src 30:2597:2604  \"_symbol\" */ _16)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                        let _17 := 32\n                                        if eq(outOfPlaceEncoding, lt(length, _17))\n                                        {\n                                            mstore(_4, shl(224, 0x4e487b71))\n                                            mstore(_3, 0x22)\n                                            revert(_4, 0x24)\n                                        }\n                                        mstore(memPtr_1, length)\n                                        switch outOfPlaceEncoding\n                                        case 0 {\n                                            mstore(add(memPtr_1, _17), and(slotValue, not(255)))\n                                            ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length)))), _17)\n                                        }\n                                        case 1 {\n                                            mstore(_4, /** @src 30:2597:2604  \"_symbol\" */ _16)\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            let dataPos := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                                            let i := _4\n                                            for { } lt(i, length) { i := add(i, _17) }\n                                            {\n                                                mstore(add(add(memPtr_1, i), _17), sload(dataPos))\n                                                dataPos := add(dataPos, /** @src 30:2597:2604  \"_symbol\" */ _16)\n                                            }\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            ret_1 := add(add(memPtr_1, i), _17)\n                                        }\n                                        finalize_allocation(memPtr_1, sub(ret_1, memPtr_1))\n                                        let memPos_7 := mload(_2)\n                                        mstore(memPos_7, _17)\n                                        return(memPos_7, sub(abi_encode_string(memPtr_1, add(memPos_7, _17)), memPos_7))\n                                    }\n                                    case 0xa22cb465 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                        let value0_1 := abi_decode_address_8199()\n                                        let value_2 := calldataload(36)\n                                        let _18 := iszero(iszero(value_2))\n                                        if iszero(eq(value_2, _18)) { revert(_4, _4) }\n                                        let _19 := and(/** @src 30:15698:15720  \"operator == address(0)\" */ value0_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 30:15694:15785  \"if (operator == address(0)) {...\"\n                                        if /** @src 30:15698:15720  \"operator == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _19)\n                                        /// @src 30:15694:15785  \"if (operator == address(0)) {...\"\n                                        {\n                                            /// @src 30:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                            let _20 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 30:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                            mstore(_20, shl(227, 0x0b611743))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:15743:15774  \"ERC721InvalidOperator(operator)\" */ add(_20, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _19)\n                                            /// @src 30:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                            revert(_20, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                        mstore(_4, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        mstore(32, /** @src 30:15794:15812  \"_operatorApprovals\" */ 0x05)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let _21 := keccak256(_4, _2)\n                                        mstore(_4, _19)\n                                        mstore(32, _21)\n                                        let dataSlot := keccak256(_4, _2)\n                                        let value_3 := and(sload(dataSlot), not(255))\n                                        sstore(dataSlot, or(value_3, and(_18, 255)))\n                                        /// @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                        let _22 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                        mstore(_22, _18)\n                                        /// @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                        log3(_22, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 32, /** @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, /** @src 35:735:745  \"msg.sender\" */ caller(), /** @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ _19)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0xb88d4fde {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                                        let value0_2 := abi_decode_address_8199()\n                                        let value1 := abi_decode_address()\n                                        let value_4 := calldataload(68)\n                                        let offset := calldataload(100)\n                                        if gt(offset, 0xffffffffffffffff) { revert(_4, _4) }\n                                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                                        let _23 := calldataload(add(_3, offset))\n                                        let _24 := array_allocation_size_bytes(_23)\n                                        let memPtr_2 := mload(_2)\n                                        finalize_allocation(memPtr_2, _24)\n                                        mstore(memPtr_2, _23)\n                                        if gt(add(add(offset, _23), 36), calldatasize()) { revert(_4, _4) }\n                                        calldatacopy(add(memPtr_2, 32), add(offset, 36), _23)\n                                        mstore(add(add(memPtr_2, _23), 32), _4)\n                                        /// @src 30:5121:5128  \"tokenId\"\n                                        fun_transferFrom(value0_2, value1, value_4)\n                                        /// @src 30:5181:5185  \"data\"\n                                        fun_checkOnERC721Received(value0_2, value1, value_4, memPtr_2)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0xc1a147a0 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let value_5 := calldataload(_3)\n                                        /// @src 44:1564:1584  \"getApproved(tokenId)\"\n                                        let expr_5 := fun_getApproved(value_5)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let _25 := sub(shl(160, 1), 1)\n                                        /// @src 44:1564:1632  \"getApproved(tokenId) != msg.sender && ownerOf(tokenId) != msg.sender\"\n                                        let expr_6 := /** @src 44:1564:1598  \"getApproved(tokenId) != msg.sender\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 44:1564:1598  \"getApproved(tokenId) != msg.sender\" */ expr_5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _25), /** @src 44:1588:1598  \"msg.sender\" */ caller()))\n                                        /// @src 44:1564:1632  \"getApproved(tokenId) != msg.sender && ownerOf(tokenId) != msg.sender\"\n                                        if expr_6\n                                        {\n                                            expr_6 := /** @src 44:1602:1632  \"ownerOf(tokenId) != msg.sender\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 44:1602:1618  \"ownerOf(tokenId)\" */ value_5), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _25), /** @src 44:1588:1598  \"msg.sender\" */ caller()))\n                                        }\n                                        /// @src 44:1560:1699  \"if (getApproved(tokenId) != msg.sender && ownerOf(tokenId) != msg.sender) {...\"\n                                        if expr_6\n                                        {\n                                            /// @src 44:1655:1688  \"MoodNft__CantFlipMoodIfNotOwner()\"\n                                            let _26 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 44:1655:1688  \"MoodNft__CantFlipMoodIfNotOwner()\"\n                                            mstore(_26, shl(224, 0x85046ca7))\n                                            revert(_26, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                        }\n                                        mstore(_4, value_5)\n                                        mstore(32, /** @src 44:1713:1729  \"s_tokenIdToState\" */ 0x0a)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let value_6 := and(sload(keccak256(_4, _2)), 0xff)\n                                        if iszero(lt(value_6, 2))\n                                        {\n                                            mstore(_4, shl(224, 0x4e487b71))\n                                            mstore(_3, 0x21)\n                                            revert(_4, 0x24)\n                                        }\n                                        /// @src 44:1709:1896  \"if (s_tokenIdToState[tokenId] == NFTState.HAPPY) {...\"\n                                        switch /** @src 44:1713:1756  \"s_tokenIdToState[tokenId] == NFTState.HAPPY\" */ iszero(value_6)\n                                        case /** @src 44:1709:1896  \"if (s_tokenIdToState[tokenId] == NFTState.HAPPY) {...\" */ 0 {\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(_4, value_5)\n                                            mstore(32, /** @src 44:1713:1729  \"s_tokenIdToState\" */ 0x0a)\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            let _27 := keccak256(_4, _2)\n                                            sstore(_27, and(sload(_27), not(255)))\n                                        }\n                                        default /// @src 44:1709:1896  \"if (s_tokenIdToState[tokenId] == NFTState.HAPPY) {...\"\n                                        {\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(_4, value_5)\n                                            mstore(32, /** @src 44:1713:1729  \"s_tokenIdToState\" */ 0x0a)\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            let _28 := keccak256(_4, _2)\n                                            sstore(_28, or(and(sload(_28), not(255)), /** @src 44:1800:1812  \"NFTState.SAD\" */ 1))\n                                        }\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0xc2229fea {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let _29 := sload(/** @src 44:1352:1366  \"s_tokenCounter\" */ 0x07)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let memPtr_3 := mload(_2)\n                                        finalize_allocation_18857(memPtr_3)\n                                        mstore(memPtr_3, _4)\n                                        /// @src 30:10018:10105  \"if (to == address(0)) {...\"\n                                        if /** @src 30:10022:10038  \"to == address(0)\" */ iszero(/** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                        /// @src 30:10018:10105  \"if (to == address(0)) {...\"\n                                        {\n                                            /// @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                            let _30 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                            mstore(_30, shl(225, 0x32505749))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ add(_30, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                            /// @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                            revert(_30, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                        mstore(_4, _29)\n                                        let _31 := 0x20\n                                        mstore(_31, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let cleaned_1 := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                        /// @src 30:9161:9179  \"from != address(0)\"\n                                        let _32 := iszero(iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned_1))\n                                        /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                                        if /** @src 30:9161:9179  \"from != address(0)\" */ _32\n                                        /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                                        {\n                                            /// @src 30:9319:9324  \"false\"\n                                            fun_approve(_29)\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(_4, cleaned_1)\n                                            mstore(_31, /** @src 30:9368:9377  \"_balances\" */ 0x03)\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            let dataSlot_1 := keccak256(_4, _2)\n                                            sstore(dataSlot_1, add(sload(/** @src 30:9368:9388  \"_balances[from] -= 1\" */ dataSlot_1), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)))\n                                        }\n                                        mstore(_4, /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        mstore(_31, /** @src 30:9487:9496  \"_balances\" */ 0x03)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let dataSlot_2 := keccak256(_4, _2)\n                                        sstore(dataSlot_2, add(sload(/** @src 30:9487:9505  \"_balances[to] += 1\" */ dataSlot_2), /** @src 30:9427:9443  \"to != address(0)\" */ 1))\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        mstore(_4, _29)\n                                        mstore(_31, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let _33 := keccak256(_4, _2)\n                                        sstore(_33, or(and(sload(_33), shl(160, 0xffffffffffffffffffffffff)), /** @src 44:1386:1396  \"msg.sender\" */ caller()))\n                                        /// @src 30:9577:9604  \"Transfer(from, to, tokenId)\"\n                                        log4(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 30:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned_1, /** @src 44:1386:1396  \"msg.sender\" */ caller(), /** @src 30:9577:9604  \"Transfer(from, to, tokenId)\" */ _29)\n                                        /// @src 30:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                        if /** @src 30:10184:10211  \"previousOwner != address(0)\" */ _32\n                                        /// @src 30:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                        {\n                                            /// @src 30:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                            let _34 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 30:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                            mstore(_34, shl(225, 0x39e35637))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:10234:10265  \"ERC721InvalidSender(address(0))\" */ add(_34, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                            /// @src 30:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                            revert(_34, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                        /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                                        if /** @src 30:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 30:17034:17048  \"to.code.length\" */ extcodesize(/** @src 44:1386:1396  \"msg.sender\" */ caller())))\n                                        /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                                        {\n                                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            let _35 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            let _36 := shl(225, 0x0a85bd01)\n                                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            mstore(_35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _36)\n                                            mstore(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), _4)\n                                            mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68), _29)\n                                            mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 100), 128)\n                                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            let trySuccessCondition := call(gas(), /** @src 44:1386:1396  \"msg.sender\" */ caller(), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ abi_encode_string(memPtr_3, add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 132)), /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35), _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31)\n                                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            let expr_7 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4\n                                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            if trySuccessCondition\n                                            {\n                                                let _37 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31\n                                                /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                                if gt(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ returndatasize()) { _37 := returndatasize() }\n                                                finalize_allocation(_35, _37)\n                                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                                if slt(sub(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_35, _37), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _35), _31) { revert(_4, _4) }\n                                                let value_7 := mload(_35)\n                                                if iszero(eq(value_7, and(value_7, shl(224, 0xffffffff)))) { revert(_4, _4) }\n                                                /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                                expr_7 := value_7\n                                            }\n                                            /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                            switch iszero(trySuccessCondition)\n                                            case 0 {\n                                                /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                                if /** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr_7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0xffffffff)), _36))\n                                                /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                                {\n                                                    /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                                    let _38 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                                    /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                                    mstore(_38, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                                    mstore(/** @src 30:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_38, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                                    /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                                    revert(_38, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                                }\n                                            }\n                                            default /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                            {\n                                                /// @src 30:17331:17684  \"catch (bytes memory reason) {...\"\n                                                let data := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4\n                                                switch returndatasize()\n                                                case 0 { data := 96 }\n                                                default {\n                                                    let _39 := returndatasize()\n                                                    let _40 := array_allocation_size_bytes(_39)\n                                                    let memPtr_4 := mload(_2)\n                                                    finalize_allocation(memPtr_4, _40)\n                                                    mstore(memPtr_4, _39)\n                                                    data := memPtr_4\n                                                    returndatacopy(add(memPtr_4, _31), _4, returndatasize())\n                                                }\n                                                let _41 := mload(/** @src 30:17381:17394  \"reason.length\" */ data)\n                                                /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                                switch /** @src 30:17381:17399  \"reason.length == 0\" */ iszero(_41)\n                                                case /** @src 30:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                                    /// @src 30:17557:17652  \"assembly {...\"\n                                                    revert(add(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31, /** @src 30:17557:17652  \"assembly {...\" */ data), _41)\n                                                }\n                                                default /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                                {\n                                                    /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                                    let _42 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                                    /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                                    mstore(_42, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                                    mstore(/** @src 30:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_42, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                                    /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                                    revert(_42, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                                }\n                                            }\n                                        }\n                                        let _43 := sload(/** @src 44:1352:1366  \"s_tokenCounter\" */ 0x07)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let sum := add(_43, /** @src 30:9427:9443  \"to != address(0)\" */ 1)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        if gt(_43, sum)\n                                        {\n                                            mstore(_4, shl(224, 0x4e487b71))\n                                            mstore(_3, 0x11)\n                                            revert(_4, 0x24)\n                                        }\n                                        sstore(/** @src 44:1352:1366  \"s_tokenCounter\" */ 0x07, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sum)\n                                        /// @src 44:1471:1495  \"CreatedNFT(tokenCounter)\"\n                                        log2(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 44:1471:1495  \"CreatedNFT(tokenCounter)\" */ 0x72102923c3d44433bd725cb2c744a4c92a536ad249b665dec9853a16ed665525, _29)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0xc87b56dd {\n                                        if callvalue() { revert(_4, _4) }\n                                        let _44 := 32\n                                        if slt(add(calldatasize(), not(3)), _44) { revert(_4, _4) }\n                                        let value_8 := calldataload(_3)\n                                        /// @src 44:2134:2249  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                        if /** @src 44:2138:2168  \"ownerOf(tokenId) == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 44:2138:2154  \"ownerOf(tokenId)\" */ value_8), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1)))\n                                        /// @src 44:2134:2249  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                        {\n                                            /// @src 44:2191:2238  \"ERC721Metadata__URI_QueryFor_NonExistentToken()\"\n                                            let _45 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 44:2191:2238  \"ERC721Metadata__URI_QueryFor_NonExistentToken()\"\n                                            mstore(_45, shl(225, 0x36faf6d7))\n                                            revert(_45, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                        }\n                                        /// @src 44:2258:2296  \"string memory imageURI = s_happySvgUri\"\n                                        let var_imageURI_mpos := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ copy_array_from_storage_to_memory_string_8216()\n                                        mstore(_4, value_8)\n                                        mstore(_44, /** @src 44:2311:2327  \"s_tokenIdToState\" */ 0x0a)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let value_9 := and(sload(keccak256(_4, _2)), 0xff)\n                                        if iszero(lt(value_9, 2))\n                                        {\n                                            mstore(_4, shl(224, 0x4e487b71))\n                                            mstore(_3, 0x21)\n                                            revert(_4, 0x24)\n                                        }\n                                        /// @src 44:2307:2401  \"if (s_tokenIdToState[tokenId] == NFTState.SAD) {...\"\n                                        if /** @src 44:2311:2352  \"s_tokenIdToState[tokenId] == NFTState.SAD\" */ eq(value_9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 1)\n                                        /// @src 44:2307:2401  \"if (s_tokenIdToState[tokenId] == NFTState.SAD) {...\"\n                                        {\n                                            /// @src 44:2368:2390  \"imageURI = s_sadSvgUri\"\n                                            var_imageURI_mpos := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ copy_array_from_storage_to_memory_string_8204()\n                                        }\n                                        let memPtr_5 := mload(_2)\n                                        let newFreePtr := add(memPtr_5, _2)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_5))\n                                        {\n                                            mstore(_4, shl(224, 0x4e487b71))\n                                            mstore(_3, 0x41)\n                                            revert(_4, 0x24)\n                                        }\n                                        mstore(_2, newFreePtr)\n                                        mstore(memPtr_5, 29)\n                                        let _46 := add(memPtr_5, _44)\n                                        mstore(_46, \"data:application/json;base64,\")\n                                        /// @src 44:2730:2736  \"name()\"\n                                        let expr_mpos := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ copy_array_from_storage_to_memory_string()\n                                        /// @src 44:2643:3079  \"abi.encodePacked(...\"\n                                        let expr_mpos_1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                        mstore(/** @src 44:2643:3079  \"abi.encodePacked(...\" */ add(expr_mpos_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _44), shl(185, 0x3d913730b6b2911d11))\n                                        let length_1 := mload(expr_mpos)\n                                        copy_memory_to_memory_with_cleanup(add(expr_mpos, _44), add(/** @src 44:2643:3079  \"abi.encodePacked(...\" */ expr_mpos_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 41), length_1)\n                                        let _47 := add(/** @src 44:2643:3079  \"abi.encodePacked(...\" */ expr_mpos_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ length_1)\n                                        mstore(add(_47, 41), 0x222c20226465736372697074696f6e223a22416e204e46542074686174207265)\n                                        mstore(add(_47, 73), \"flects the mood of the owner, 10\")\n                                        mstore(add(_47, 105), shl(141, 0x018129037b71021b430b4b71091161))\n                                        mstore(add(_47, 120), 0x2261747472696275746573223a205b7b2274726169745f74797065223a20226d)\n                                        mstore(add(_47, 152), 0x6f6f64696e657373222c202276616c7565223a203130307d5d2c2022696d6167)\n                                        mstore(add(_47, 184), shl(225, 0x32911d11))\n                                        let length_2 := mload(var_imageURI_mpos)\n                                        copy_memory_to_memory_with_cleanup(add(var_imageURI_mpos, _44), add(_47, 188), length_2)\n                                        let _48 := add(_47, length_2)\n                                        mstore(add(_48, 188), shl(240, 8829))\n                                        /// @src 44:2643:3079  \"abi.encodePacked(...\"\n                                        let _49 := sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _48, /** @src 44:2643:3079  \"abi.encodePacked(...\" */ expr_mpos_1)\n                                        mstore(expr_mpos_1, add(_49, 158))\n                                        finalize_allocation(expr_mpos_1, add(_49, 190))\n                                        /// @src 44:2499:3119  \"Base64.encode(...\"\n                                        let expr_mpos_2 := fun_encode(expr_mpos_1)\n                                        /// @src 44:2437:3133  \"abi.encodePacked(...\"\n                                        let expr_mpos_3 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                        let length_3 := mload(memPtr_5)\n                                        copy_memory_to_memory_with_cleanup(_46, /** @src 44:2437:3133  \"abi.encodePacked(...\" */ add(expr_mpos_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _44), length_3)\n                                        let _50 := add(/** @src 44:2437:3133  \"abi.encodePacked(...\" */ expr_mpos_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ length_3)\n                                        let length_4 := mload(expr_mpos_2)\n                                        copy_memory_to_memory_with_cleanup(add(expr_mpos_2, _44), add(_50, _44), length_4)\n                                        /// @src 44:2437:3133  \"abi.encodePacked(...\"\n                                        let _51 := sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ add(_50, length_4), /** @src 44:2437:3133  \"abi.encodePacked(...\" */ expr_mpos_3)\n                                        mstore(expr_mpos_3, _51)\n                                        finalize_allocation(expr_mpos_3, add(_51, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _44))\n                                        let memPos_8 := mload(_2)\n                                        mstore(memPos_8, _44)\n                                        return(memPos_8, sub(abi_encode_string(expr_mpos_3, add(memPos_8, _44)), memPos_8))\n                                    }\n                                    case 0xe985e9c5 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                        let value0_3 := abi_decode_address_8199()\n                                        let value1_1 := abi_decode_address()\n                                        let _52 := sub(shl(160, 1), 1)\n                                        mstore(_4, and(value0_3, _52))\n                                        mstore(32, /** @src 30:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let _53 := keccak256(_4, _2)\n                                        mstore(_4, and(value1_1, _52))\n                                        mstore(32, _53)\n                                        let value_10 := and(sload(keccak256(_4, _2)), 0xff)\n                                        let memPos_9 := mload(_2)\n                                        mstore(memPos_9, iszero(iszero(value_10)))\n                                        return(memPos_9, 32)\n                                    }\n                                    case 0xf2fde38b {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let value0_4 := abi_decode_address_8199()\n                                        /// @src 28:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let _54 := sub(shl(160, 1), 1)\n                                        let _55 := and(/** @src 28:2627:2649  \"newOwner == address(0)\" */ value0_4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _54)\n                                        /// @src 28:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        if /** @src 28:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _55)\n                                        /// @src 28:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        {\n                                            /// @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            let _56 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            mstore(_56, shl(224, 0x1e4fbdf7))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\" */ add(_56, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                            /// @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            revert(_56, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                        let _57 := sload(/** @src 28:3004:3010  \"_owner\" */ 0x06)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        sstore(/** @src 28:3004:3010  \"_owner\" */ 0x06, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(_57, shl(160, 0xffffffffffffffffffffffff)), _55))\n                                        /// @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_57, _54), /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _55)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0xfc842121 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let converted_2 := copy_array_from_storage_to_memory_string_8216()\n                                        let memPos_10 := mload(_2)\n                                        mstore(memPos_10, 32)\n                                        return(memPos_10, sub(abi_encode_string(converted_2, add(memPos_10, 32)), memPos_10))\n                                    }\n                                }\n                                revert(0, 0)\n                            }\n                            function copy_memory_to_memory_with_cleanup(src, dst, length)\n                            {\n                                let i := 0\n                                for { } lt(i, length) { i := add(i, 32) }\n                                {\n                                    mstore(add(dst, i), mload(add(src, i)))\n                                }\n                                mstore(add(dst, length), 0)\n                            }\n                            function abi_encode_string(value, pos) -> end\n                            {\n                                let length := mload(value)\n                                mstore(pos, length)\n                                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                            }\n                            function abi_decode_address_8199() -> value\n                            {\n                                value := calldataload(4)\n                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            }\n                            function abi_decode_address() -> value\n                            {\n                                value := calldataload(36)\n                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            }\n                            function abi_decode_addresst_addresst_uint256(dataEnd) -> value0, value1, value2\n                            {\n                                if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                                let value := calldataload(4)\n                                let _1 := sub(shl(160, 1), 1)\n                                if iszero(eq(value, and(value, _1)))\n                                {\n                                    revert(/** @src -1:-1:-1 */ 0, 0)\n                                }\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                value0 := value\n                                let value_1 := calldataload(36)\n                                if iszero(eq(value_1, and(value_1, _1)))\n                                {\n                                    revert(/** @src -1:-1:-1 */ 0, 0)\n                                }\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                value1 := value_1\n                                value2 := calldataload(68)\n                            }\n                            function finalize_allocation_18857(memPtr)\n                            {\n                                let newFreePtr := add(memPtr, 0x20)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function finalize_allocation(memPtr, size)\n                            {\n                                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function array_allocation_size_bytes(length) -> size\n                            {\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                size := add(and(add(length, 31), not(31)), 0x20)\n                            }\n                            /// @ast-id 47570 @src 28:1796:1958  \"function _checkOwner() internal view virtual {...\"\n                            function fun_checkOwner()\n                            {\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let cleaned := and(sload(/** @src 28:1710:1716  \"_owner\" */ 0x06), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1))\n                                /// @src 28:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                if /** @src 28:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned, /** @src 35:735:745  \"msg.sender\" */ caller()))\n                                /// @src 28:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                {\n                                    /// @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    let _1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                    /// @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    mstore(_1, shl(224, 0x118cdaa7))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ add(_1, 4), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                    /// @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    revert(_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                            }\n                            function copy_array_from_storage_to_memory_string() -> memPtr\n                            {\n                                memPtr := mload(64)\n                                let ret := 0\n                                let slotValue := sload(ret)\n                                let length := ret\n                                let _1 := 1\n                                length := shr(_1, slotValue)\n                                let outOfPlaceEncoding := and(slotValue, _1)\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                let _2 := 32\n                                if eq(outOfPlaceEncoding, lt(length, _2))\n                                {\n                                    mstore(ret, shl(224, 0x4e487b71))\n                                    mstore(4, 0x22)\n                                    revert(ret, 0x24)\n                                }\n                                mstore(memPtr, length)\n                                switch outOfPlaceEncoding\n                                case 0 {\n                                    mstore(add(memPtr, _2), and(slotValue, not(255)))\n                                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                                }\n                                case 1 {\n                                    mstore(0, 0)\n                                    let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                                    let i := 0\n                                    for { } lt(i, length) { i := add(i, _2) }\n                                    {\n                                        mstore(add(add(memPtr, i), _2), sload(dataPos))\n                                        dataPos := add(dataPos, _1)\n                                    }\n                                    ret := add(add(memPtr, i), _2)\n                                }\n                                finalize_allocation(memPtr, sub(ret, memPtr))\n                            }\n                            function copy_array_from_storage_to_memory_string_8204() -> memPtr\n                            {\n                                memPtr := mload(64)\n                                let ret := /** @src -1:-1:-1 */ 0\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let slotValue := sload(/** @src 44:3332:3343  \"s_sadSvgUri\" */ 0x08)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let length := /** @src -1:-1:-1 */ ret\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _1 := 1\n                                length := shr(_1, slotValue)\n                                let outOfPlaceEncoding := and(slotValue, _1)\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                let _2 := 32\n                                if eq(outOfPlaceEncoding, lt(length, _2))\n                                {\n                                    mstore(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x22)\n                                    revert(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                                }\n                                mstore(memPtr, length)\n                                switch outOfPlaceEncoding\n                                case 0 {\n                                    mstore(add(memPtr, _2), and(slotValue, not(255)))\n                                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                                }\n                                case 1 {\n                                    mstore(/** @src -1:-1:-1 */ 0, /** @src 44:3332:3343  \"s_sadSvgUri\" */ 0x08)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let dataPos := 110349606679412691172957834289542550319383271247755660854362242977991410020067\n                                    let i := /** @src -1:-1:-1 */ 0\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    for { } lt(i, length) { i := add(i, _2) }\n                                    {\n                                        mstore(add(add(memPtr, i), _2), sload(dataPos))\n                                        dataPos := add(dataPos, _1)\n                                    }\n                                    ret := add(add(memPtr, i), _2)\n                                }\n                                finalize_allocation(memPtr, sub(ret, memPtr))\n                            }\n                            function copy_array_from_storage_to_memory_string_8216() -> memPtr\n                            {\n                                memPtr := mload(64)\n                                let ret := /** @src -1:-1:-1 */ 0\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let slotValue := sload(/** @src 44:2283:2296  \"s_happySvgUri\" */ 0x09)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let length := /** @src -1:-1:-1 */ ret\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _1 := 1\n                                length := shr(_1, slotValue)\n                                let outOfPlaceEncoding := and(slotValue, _1)\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                let _2 := 32\n                                if eq(outOfPlaceEncoding, lt(length, _2))\n                                {\n                                    mstore(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x22)\n                                    revert(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                                }\n                                mstore(memPtr, length)\n                                switch outOfPlaceEncoding\n                                case 0 {\n                                    mstore(add(memPtr, _2), and(slotValue, not(255)))\n                                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                                }\n                                case 1 {\n                                    mstore(/** @src -1:-1:-1 */ 0, /** @src 44:2283:2296  \"s_happySvgUri\" */ 0x09)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let dataPos := 49791959467252497455735130940088646708311117250336157395101362029847983277999\n                                    let i := /** @src -1:-1:-1 */ 0\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    for { } lt(i, length) { i := add(i, _2) }\n                                    {\n                                        mstore(add(add(memPtr, i), _2), sload(dataPos))\n                                        dataPos := add(dataPos, _1)\n                                    }\n                                    ret := add(add(memPtr, i), _2)\n                                }\n                                finalize_allocation(memPtr, sub(ret, memPtr))\n                            }\n                            /// @ast-id 48008 @src 30:3497:3651  \"function getApproved(uint256 tokenId) public view virtual returns (address) {...\"\n                            function fun_getApproved(var_tokenId) -> var\n                            {\n                                /// @src 30:3583:3605  \"_requireOwned(tokenId)\"\n                                pop(fun_requireOwned(var_tokenId))\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                mstore(0x20, /** @src 30:6034:6049  \"_tokenApprovals\" */ 0x04)\n                                /// @src 30:3616:3644  \"return _getApproved(tokenId)\"\n                                var := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x40)), sub(shl(160, 1), 1))\n                            }\n                            /// @ast-id 48087 @src 30:4143:4721  \"function transferFrom(address from, address to, uint256 tokenId) public virtual {...\"\n                            function fun_transferFrom(var_from, var_to, var_tokenId)\n                            {\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _1 := sub(shl(160, 1), 1)\n                                let _2 := and(/** @src 30:4237:4253  \"to == address(0)\" */ var_to, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _1)\n                                /// @src 30:4233:4320  \"if (to == address(0)) {...\"\n                                if /** @src 30:4237:4253  \"to == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                                /// @src 30:4233:4320  \"if (to == address(0)) {...\"\n                                {\n                                    /// @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                                    let _3 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                    /// @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                                    mstore(_3, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\" */ add(_3, 4), /** @src 30:4251:4252  \"0\" */ 0x00)\n                                    /// @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                                    revert(_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                /// @src -1:-1:-1\n                                let _4 := 0\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                let _5 := 0x20\n                                mstore(_5, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _6 := 0x40\n                                let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)), _1)\n                                /// @src 30:9035:9053  \"auth != address(0)\"\n                                let _7 := iszero(iszero(/** @src 35:735:745  \"msg.sender\" */ caller()))\n                                /// @src 30:9031:9117  \"if (auth != address(0)) {...\"\n                                if /** @src 30:9035:9053  \"auth != address(0)\" */ _7\n                                /// @src 30:9031:9117  \"if (auth != address(0)) {...\"\n                                {\n                                    /// @src 30:6514:6641  \"spender != address(0) &&...\"\n                                    let expr := _7\n                                    if _7\n                                    {\n                                        /// @src 30:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                        let expr_1 := /** @src 30:6552:6568  \"owner == spender\" */ eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                        /// @src 30:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                        if iszero(expr_1)\n                                        {\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                                            mstore(_5, /** @src 30:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            let _8 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                                            mstore(/** @src -1:-1:-1 */ _4, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(_5, _8)\n                                            /// @src 30:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                            expr_1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)), 0xff)\n                                        }\n                                        /// @src 30:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                        let expr_2 := expr_1\n                                        if iszero(expr_1)\n                                        {\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                            mstore(_5, /** @src 30:6034:6049  \"_tokenApprovals\" */ 0x04)\n                                            /// @src 30:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                            expr_2 := /** @src 30:6608:6640  \"_getApproved(tokenId) == spender\" */ eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)), _1), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                        }\n                                        /// @src 30:6514:6641  \"spender != address(0) &&...\"\n                                        expr := expr_2\n                                    }\n                                    /// @src 30:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                                    if /** @src 30:7193:7232  \"!_isAuthorized(owner, spender, tokenId)\" */ iszero(/** @src 30:7194:7232  \"_isAuthorized(owner, spender, tokenId)\" */ expr)\n                                    /// @src 30:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                                    {\n                                        /// @src 30:7248:7434  \"if (owner == address(0)) {...\"\n                                        switch /** @src 30:7252:7271  \"owner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                                        case /** @src 30:7248:7434  \"if (owner == address(0)) {...\" */ 0 {\n                                            /// @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                            let _9 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_6)\n                                            /// @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                            mstore(_9, shl(224, 0x177e802f))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ add(_9, 4), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(add(/** @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ _9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), var_tokenId)\n                                            /// @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                            revert(_9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68)\n                                        }\n                                        default /// @src 30:7248:7434  \"if (owner == address(0)) {...\"\n                                        {\n                                            /// @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                            let _10 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_6)\n                                            /// @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                            mstore(_10, shl(224, 0x7e273289))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ add(_10, 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                            /// @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                            revert(_10, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                    }\n                                }\n                                /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                                if /** @src 30:9161:9179  \"from != address(0)\" */ iszero(iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned))\n                                /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                                {\n                                    /// @src 30:9319:9324  \"false\"\n                                    fun_approve(var_tokenId)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                                    mstore(_5, /** @src 30:9368:9377  \"_balances\" */ 0x03)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let dataSlot := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                                    sstore(dataSlot, add(sload(/** @src 30:9368:9388  \"_balances[from] -= 1\" */ dataSlot), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)))\n                                }\n                                mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                                mstore(_5, /** @src 30:9487:9496  \"_balances\" */ 0x03)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                                sstore(dataSlot_1, add(sload(/** @src 30:9487:9505  \"_balances[to] += 1\" */ dataSlot_1), /** @src 30:9427:9443  \"to != address(0)\" */ 1))\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                mstore(_5, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _11 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                                sstore(_11, or(and(sload(_11), shl(160, 0xffffffffffffffffffffffff)), _2))\n                                /// @src 30:9577:9604  \"Transfer(from, to, tokenId)\"\n                                log4(/** @src -1:-1:-1 */ _4, _4, /** @src 30:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned, _2, var_tokenId)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _12 := and(/** @src 30:4610:4631  \"previousOwner != from\" */ var_from, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _1)\n                                /// @src 30:4606:4715  \"if (previousOwner != from) {...\"\n                                if /** @src 30:4610:4631  \"previousOwner != from\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned, _12))\n                                /// @src 30:4606:4715  \"if (previousOwner != from) {...\"\n                                {\n                                    /// @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                                    let _13 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_6)\n                                    /// @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                                    mstore(_13, shl(224, 0x64283d7b))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ add(_13, 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _12)\n                                    mstore(add(/** @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), var_tokenId)\n                                    mstore(add(/** @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68), cleaned)\n                                    /// @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                                    revert(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 100)\n                                }\n                            }\n                            /// @ast-id 48648 @src 30:14720:15382  \"function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {...\"\n                            function fun_approve(var_tokenId)\n                            {\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(0, var_tokenId)\n                                mstore(0x20, /** @src 30:15346:15361  \"_tokenApprovals\" */ 0x04)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _1 := keccak256(0, 0x40)\n                                sstore(_1, and(sload(_1), shl(160, 0xffffffffffffffffffffffff)))\n                            }\n                            /// @ast-id 48714 @src 30:16138:16379  \"function _requireOwned(uint256 tokenId) internal view returns (address) {...\"\n                            function fun_requireOwned(var_tokenId) -> var\n                            {\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                mstore(0x20, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x40)), sub(shl(160, 1), 1))\n                                /// @src 30:16263:16351  \"if (owner == address(0)) {...\"\n                                if /** @src 30:16267:16286  \"owner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                                /// @src 30:16263:16351  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                                    let _1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(0x40)\n                                    /// @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                                    mstore(_1, /** @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ shl(224, 0x7e273289))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\" */ add(_1, 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                    /// @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                                    revert(_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                /// @src 30:16360:16372  \"return owner\"\n                                var := cleaned\n                            }\n                            /// @ast-id 48778 @src 30:16918:17700  \"function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {...\"\n                            function fun_checkOnERC721Received(var_from, var_to, var_tokenId, var_data_mpos)\n                            {\n                                /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                                if /** @src 30:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 30:17034:17048  \"to.code.length\" */ extcodesize(var_to)))\n                                /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                                {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let _1 := sub(shl(160, 1), 1)\n                                    let _2 := and(/** @src 30:17072:17091  \"IERC721Receiver(to)\" */ var_to, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _1)\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let _3 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                    let _4 := shl(225, 0x0a85bd01)\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    mstore(_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4)\n                                    mstore(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, 4), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), and(var_from, _1))\n                                    mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68), var_tokenId)\n                                    mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 100), 128)\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let _5 := 32\n                                    let _6 := sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ abi_encode_string(var_data_mpos, add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 132)), /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3)\n                                    /// @src 30:17051:17052  \"0\"\n                                    let _7 := 0x00\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let trySuccessCondition := call(gas(), _2, /** @src 30:17051:17052  \"0\" */ _7, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, _6, _3, _5)\n                                    let expr := /** @src 30:17051:17052  \"0\" */ _7\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    if trySuccessCondition\n                                    {\n                                        let _8 := _5\n                                        if gt(_5, returndatasize()) { _8 := returndatasize() }\n                                        finalize_allocation(_3, _8)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        if slt(sub(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, _8), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        {\n                                            revert(/** @src 30:17051:17052  \"0\" */ _7, _7)\n                                        }\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        let value := mload(_3)\n                                        if iszero(eq(value, and(value, shl(224, 0xffffffff))))\n                                        {\n                                            revert(/** @src 30:17051:17052  \"0\" */ _7, _7)\n                                        }\n                                        /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        expr := value\n                                    }\n                                    /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    switch iszero(trySuccessCondition)\n                                    case 0 {\n                                        /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        if /** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0xffffffff)), _4))\n                                        /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        {\n                                            /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            let _9 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                            /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_9, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_9, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                                            /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            revert(_9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                    }\n                                    default /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    {\n                                        /// @src 30:17331:17684  \"catch (bytes memory reason) {...\"\n                                        let data := /** @src 30:17051:17052  \"0\" */ _7\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        switch returndatasize()\n                                        case 0 { data := 96 }\n                                        default {\n                                            let _10 := returndatasize()\n                                            let _11 := array_allocation_size_bytes(_10)\n                                            let memPtr := mload(64)\n                                            finalize_allocation(memPtr, _11)\n                                            mstore(memPtr, _10)\n                                            data := memPtr\n                                            returndatacopy(add(memPtr, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5), /** @src 30:17051:17052  \"0\" */ _7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ returndatasize())\n                                        }\n                                        let _12 := mload(/** @src 30:17381:17394  \"reason.length\" */ data)\n                                        /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                        switch /** @src 30:17381:17399  \"reason.length == 0\" */ iszero(_12)\n                                        case /** @src 30:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                            /// @src 30:17557:17652  \"assembly {...\"\n                                            revert(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5, /** @src 30:17557:17652  \"assembly {...\" */ data), _12)\n                                        }\n                                        default /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                        {\n                                            /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            let _13 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                            /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_13, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_13, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                                            /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            revert(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                    }\n                                }\n                            }\n                            /// @ast-id 48988 @src 34:476:3858  \"function encode(bytes memory data) internal pure returns (string memory) {...\"\n                            function fun_encode(var_data_48952_mpos) -> var_mpos\n                            {\n                                /// @src 34:762:793  \"if (data.length == 0) return \\\"\\\"\"\n                                if /** @src 34:766:782  \"data.length == 0\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(/** @src 34:766:777  \"data.length\" */ var_data_48952_mpos))\n                                /// @src 34:762:793  \"if (data.length == 0) return \\\"\\\"\"\n                                {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let memPtr := mload(64)\n                                    finalize_allocation_18857(memPtr)\n                                    mstore(memPtr, /** @src 34:781:782  \"0\" */ 0x00)\n                                    /// @src 34:784:793  \"return \\\"\\\"\"\n                                    var_mpos := memPtr\n                                    leave\n                                }\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let memPtr_1 := mload(64)\n                                let newFreePtr := add(memPtr_1, 96)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                                mstore(memPtr_1, 64)\n                                mstore(add(memPtr_1, 32), \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\")\n                                mstore(add(memPtr_1, 64), \"ghijklmnopqrstuvwxyz0123456789+/\")\n                                /// @src 34:1314:1325  \"data.length\"\n                                let expr := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(/** @src 34:1314:1325  \"data.length\" */ var_data_48952_mpos)\n                                /// @src 34:1328:1329  \"2\"\n                                let _1 := 0x02\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let sum := add(expr, /** @src 34:1328:1329  \"2\" */ _1)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if gt(expr, sum)\n                                {\n                                    mstore(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x11)\n                                    revert(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                                }\n                                /// @src 34:1333:1334  \"3\"\n                                let _2 := 0x03\n                                /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                                let r := div(sum, /** @src 34:1333:1334  \"3\" */ _2)\n                                /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                                let product := shl(/** @src 34:1328:1329  \"2\" */ _1, /** @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\" */ r)\n                                if iszero(eq(r, and(r, sub(shl(254, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 1), 1))))\n                                /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                                {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 34:1308:1309  \"4\" */ 0x04, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x11)\n                                    revert(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                                }\n                                let _3 := array_allocation_size_bytes(product)\n                                let memPtr_2 := mload(64)\n                                finalize_allocation(memPtr_2, _3)\n                                mstore(memPtr_2, product)\n                                /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                                let dataSize := array_allocation_size_bytes(product)\n                                let dataStart := add(memPtr_2, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 32)\n                                /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                                calldatacopy(dataStart, calldatasize(), add(dataSize, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(31)))\n                                /// @src 34:1390:3828  \"assembly {...\"\n                                let usr$resultPtr := dataStart\n                                let usr$dataPtr := var_data_48952_mpos\n                                let usr$endPtr := add(var_data_48952_mpos, mload(var_data_48952_mpos))\n                                let usr$afterPtr := add(usr$endPtr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 32)\n                                /// @src 34:1390:3828  \"assembly {...\"\n                                let usr$afterCache := mload(usr$afterPtr)\n                                mstore(usr$afterPtr, /** @src 34:781:782  \"0\" */ 0x00)\n                                /// @src 34:1390:3828  \"assembly {...\"\n                                for { } lt(usr$dataPtr, usr$endPtr) { }\n                                {\n                                    usr$dataPtr := add(usr$dataPtr, /** @src 34:1333:1334  \"3\" */ _2)\n                                    /// @src 34:1390:3828  \"assembly {...\"\n                                    let usr$input := mload(usr$dataPtr)\n                                    let _4 := 1\n                                    let _5 := 0x3F\n                                    mstore8(usr$resultPtr, mload(add(add(memPtr_1, and(shr(18, usr$input), _5)), _4)))\n                                    mstore8(add(usr$resultPtr, _4), mload(add(add(memPtr_1, and(shr(12, usr$input), _5)), _4)))\n                                    mstore8(add(usr$resultPtr, /** @src 34:1328:1329  \"2\" */ _1), /** @src 34:1390:3828  \"assembly {...\" */ mload(add(add(memPtr_1, and(shr(6, usr$input), _5)), _4)))\n                                    mstore8(add(usr$resultPtr, /** @src 34:1333:1334  \"3\" */ _2), /** @src 34:1390:3828  \"assembly {...\" */ mload(add(add(memPtr_1, and(usr$input, _5)), _4)))\n                                    usr$resultPtr := add(usr$resultPtr, /** @src 34:1308:1309  \"4\" */ 0x04)\n                                }\n                                /// @src 34:1390:3828  \"assembly {...\"\n                                mstore(usr$afterPtr, usr$afterCache)\n                                switch mod(mload(var_data_48952_mpos), /** @src 34:1333:1334  \"3\" */ _2)\n                                case /** @src 34:1390:3828  \"assembly {...\" */ 1 {\n                                    mstore8(add(usr$resultPtr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)), /** @src 34:1390:3828  \"assembly {...\" */ 0x3d)\n                                    mstore8(add(usr$resultPtr, not(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 1)), /** @src 34:1390:3828  \"assembly {...\" */ 0x3d)\n                                }\n                                case 2 {\n                                    mstore8(add(usr$resultPtr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)), /** @src 34:1390:3828  \"assembly {...\" */ 0x3d)\n                                }\n                                /// @src 34:3838:3851  \"return result\"\n                                var_mpos := memPtr_2\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000814000a\"\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000814000a\"\n            }\n        }\n        /// @use-src 28:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 29:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 30:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 31:\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\", 33:\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\", 35:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 37:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 38:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\", 44:\"src/MoodNft.sol\"\n        object \"MoodNft_51029\" {\n            code {\n                {\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    mstore(64, memoryguard(0x80))\n                    if callvalue() { revert(0, 0) }\n                    let programSize := datasize(\"MoodNft_51029\")\n                    let argSize := sub(codesize(), programSize)\n                    let memoryDataOffset := allocate_memory(argSize)\n                    codecopy(memoryDataOffset, programSize, argSize)\n                    let _1 := add(memoryDataOffset, argSize)\n                    if slt(sub(_1, memoryDataOffset), 64)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let offset := mload(memoryDataOffset)\n                    let _2 := sub(shl(64, 1), 1)\n                    if gt(offset, _2)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n                    let _3 := 32\n                    let offset_1 := mload(add(memoryDataOffset, _3))\n                    if gt(offset_1, _2)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let value1 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n                    let memPtr := allocate_memory_6113()\n                    let _4 := 8\n                    mstore(memPtr, _4)\n                    mstore(add(memPtr, _3), \"Mood NFT\")\n                    let memPtr_1 := allocate_memory_6113()\n                    mstore(memPtr_1, 2)\n                    mstore(add(memPtr_1, _3), \"MN\")\n                    let newLen := mload(memPtr)\n                    if gt(newLen, _2)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    /// @src -1:-1:-1\n                    let _5 := 0\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let _6 := sload(/** @src -1:-1:-1 */ _5)\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let length := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let _7 := 1\n                    length := shr(_7, _6)\n                    let outOfPlaceEncoding := and(_6, _7)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, _3))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    let _8 := 31\n                    if gt(length, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, _5)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let data := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let deleteStart := add(data, shr(5, add(newLen, _8)))\n                        if lt(newLen, _3) { deleteStart := data }\n                        let _9 := add(data, shr(5, add(length, _8)))\n                        let start := deleteStart\n                        for { } lt(start, _9) { start := add(start, _7) }\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let srcOffset := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    srcOffset := _3\n                    switch gt(newLen, _8)\n                    case 1 {\n                        let loopEnd := and(newLen, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, _5)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let dstPtr := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let i := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        for { } lt(i, loopEnd) { i := add(i, _3) }\n                        {\n                            sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                            dstPtr := add(dstPtr, _7)\n                            srcOffset := add(srcOffset, _3)\n                        }\n                        if lt(loopEnd, newLen)\n                        {\n                            let lastValue := mload(add(memPtr, srcOffset))\n                            sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                        }\n                        sstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ add(shl(_7, newLen), _7))\n                    }\n                    default {\n                        let value := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        if newLen\n                        {\n                            value := mload(add(memPtr, srcOffset))\n                        }\n                        sstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_7, newLen)))\n                    }\n                    let newLen_1 := mload(memPtr_1)\n                    if gt(newLen_1, _2)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    let _10 := sload(_7)\n                    let length_1 := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    length_1 := shr(_7, _10)\n                    let outOfPlaceEncoding_1 := and(_10, _7)\n                    if iszero(outOfPlaceEncoding_1)\n                    {\n                        length_1 := and(length_1, 0x7f)\n                    }\n                    if eq(outOfPlaceEncoding_1, lt(length_1, _3))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    if gt(length_1, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _7)\n                        let data_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _8)))\n                        if lt(newLen_1, _3) { deleteStart_1 := data_1 }\n                        let _11 := add(data_1, shr(5, add(length_1, _8)))\n                        let start_1 := deleteStart_1\n                        for { } lt(start_1, _11) { start_1 := add(start_1, _7) }\n                        {\n                            sstore(start_1, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let srcOffset_1 := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    srcOffset_1 := _3\n                    switch gt(newLen_1, _8)\n                    case 1 {\n                        let loopEnd_1 := and(newLen_1, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _7)\n                        let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let i_1 := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _3) }\n                        {\n                            sstore(dstPtr_1, mload(add(memPtr_1, srcOffset_1)))\n                            dstPtr_1 := add(dstPtr_1, _7)\n                            srcOffset_1 := add(srcOffset_1, _3)\n                        }\n                        if lt(loopEnd_1, newLen_1)\n                        {\n                            let lastValue_1 := mload(add(memPtr_1, srcOffset_1))\n                            sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                        }\n                        sstore(_7, add(shl(_7, newLen_1), _7))\n                    }\n                    default {\n                        let value_1 := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        if newLen_1\n                        {\n                            value_1 := mload(add(memPtr_1, srcOffset_1))\n                        }\n                        sstore(_7, or(and(value_1, not(shr(shl(3, newLen_1), not(0)))), shl(_7, newLen_1)))\n                    }\n                    /// @src 28:1269:1364  \"if (initialOwner == address(0)) {...\"\n                    if /** @src 28:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 44:1115:1125  \"msg.sender\" */ caller())\n                    /// @src 28:1269:1364  \"if (initialOwner == address(0)) {...\"\n                    {\n                        /// @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                        let _12 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                        /// @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                        mstore(_12, shl(224, 0x1e4fbdf7))\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        mstore(/** @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\" */ add(_12, 4), /** @src -1:-1:-1 */ _5)\n                        /// @src 28:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                        revert(_12, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                    }\n                    let _13 := sload(/** @src 28:3004:3010  \"_owner\" */ 0x06)\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    sstore(/** @src 28:3004:3010  \"_owner\" */ 0x06, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(_13, not(sub(shl(160, 1), 1))), /** @src 44:1115:1125  \"msg.sender\" */ caller()))\n                    /// @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                    log3(/** @src -1:-1:-1 */ _5, _5, /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_13, sub(shl(160, 1), 1)), /** @src 44:1115:1125  \"msg.sender\" */ caller())\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    sstore(/** @src 44:1137:1155  \"s_tokenCounter = 0\" */ 0x07, /** @src -1:-1:-1 */ _5)\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let newLen_2 := mload(value0)\n                    if gt(newLen_2, _2)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    let _14 := sload(_4)\n                    let length_2 := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    length_2 := shr(_7, _14)\n                    let outOfPlaceEncoding_2 := and(_14, _7)\n                    if iszero(outOfPlaceEncoding_2)\n                    {\n                        length_2 := and(length_2, 0x7f)\n                    }\n                    if eq(outOfPlaceEncoding_2, lt(length_2, _3))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    if gt(length_2, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4)\n                        let data_2 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let deleteStart_2 := add(data_2, shr(5, add(newLen_2, _8)))\n                        if lt(newLen_2, _3) { deleteStart_2 := data_2 }\n                        let _15 := add(data_2, shr(5, add(length_2, _8)))\n                        let start_2 := deleteStart_2\n                        for { } lt(start_2, _15) { start_2 := add(start_2, _7) }\n                        {\n                            sstore(start_2, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let srcOffset_2 := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    srcOffset_2 := _3\n                    switch gt(newLen_2, _8)\n                    case 1 {\n                        let loopEnd_2 := and(newLen_2, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4)\n                        let dstPtr_2 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let i_2 := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        for { } lt(i_2, loopEnd_2) { i_2 := add(i_2, _3) }\n                        {\n                            sstore(dstPtr_2, mload(add(value0, srcOffset_2)))\n                            dstPtr_2 := add(dstPtr_2, _7)\n                            srcOffset_2 := add(srcOffset_2, _3)\n                        }\n                        if lt(loopEnd_2, newLen_2)\n                        {\n                            let lastValue_2 := mload(add(value0, srcOffset_2))\n                            sstore(dstPtr_2, and(lastValue_2, not(shr(and(shl(3, newLen_2), 248), not(0)))))\n                        }\n                        sstore(_4, add(shl(_7, newLen_2), _7))\n                    }\n                    default {\n                        let value_2 := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        if newLen_2\n                        {\n                            value_2 := mload(add(value0, srcOffset_2))\n                        }\n                        sstore(_4, or(and(value_2, not(shr(shl(3, newLen_2), not(0)))), shl(_7, newLen_2)))\n                    }\n                    let newLen_3 := mload(value1)\n                    if gt(newLen_3, _2)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    let _16 := sload(/** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09)\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let length_3 := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    length_3 := shr(_7, _16)\n                    let outOfPlaceEncoding_3 := and(_16, _7)\n                    if iszero(outOfPlaceEncoding_3)\n                    {\n                        length_3 := and(length_3, 0x7f)\n                    }\n                    if eq(outOfPlaceEncoding_3, lt(length_3, _3))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    if gt(length_3, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let data_3 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let deleteStart_3 := add(data_3, shr(5, add(newLen_3, _8)))\n                        if lt(newLen_3, _3) { deleteStart_3 := data_3 }\n                        let _17 := add(data_3, shr(5, add(length_3, _8)))\n                        let start_3 := deleteStart_3\n                        for { } lt(start_3, _17) { start_3 := add(start_3, _7) }\n                        {\n                            sstore(start_3, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let srcOffset_3 := /** @src -1:-1:-1 */ _5\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    srcOffset_3 := _3\n                    switch gt(newLen_3, _8)\n                    case 1 {\n                        let loopEnd_3 := and(newLen_3, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let dstPtr_3 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                        let i_3 := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        for { } lt(i_3, loopEnd_3) { i_3 := add(i_3, _3) }\n                        {\n                            sstore(dstPtr_3, mload(add(value1, srcOffset_3)))\n                            dstPtr_3 := add(dstPtr_3, _7)\n                            srcOffset_3 := add(srcOffset_3, _3)\n                        }\n                        if lt(loopEnd_3, newLen_3)\n                        {\n                            let lastValue_3 := mload(add(value1, srcOffset_3))\n                            sstore(dstPtr_3, and(lastValue_3, not(shr(and(shl(3, newLen_3), 248), not(0)))))\n                        }\n                        sstore(/** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ add(shl(_7, newLen_3), _7))\n                    }\n                    default {\n                        let value_3 := /** @src -1:-1:-1 */ _5\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        if newLen_3\n                        {\n                            value_3 := mload(add(value1, srcOffset_3))\n                        }\n                        sstore(/** @src 44:1198:1225  \"s_happySvgUri = happySvgUri\" */ 0x09, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(value_3, not(shr(shl(3, newLen_3), not(0)))), shl(_7, newLen_3)))\n                    }\n                    let _18 := mload(64)\n                    let _19 := datasize(\"MoodNft_51029_deployed\")\n                    codecopy(_18, dataoffset(\"MoodNft_51029_deployed\"), _19)\n                    return(_18, _19)\n                }\n                function allocate_memory_6113() -> memPtr\n                {\n                    memPtr := mload(64)\n                    let newFreePtr := add(memPtr, 64)\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                }\n                function allocate_memory(size) -> memPtr\n                {\n                    memPtr := mload(64)\n                    let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    mstore(64, newFreePtr)\n                }\n                function abi_decode_string_fromMemory(offset, end) -> array\n                {\n                    if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                    let _1 := mload(offset)\n                    if gt(_1, sub(shl(64, 1), 1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                    }\n                    let _2 := 0x20\n                    let array_1 := allocate_memory(add(and(add(_1, 0x1f), not(31)), _2))\n                    mstore(array_1, _1)\n                    if gt(add(add(offset, _1), _2), end)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    for { } lt(i, _1) { i := add(i, _2) }\n                    {\n                        mstore(add(add(array_1, i), _2), mload(add(add(offset, i), _2)))\n                    }\n                    mstore(add(add(array_1, _1), _2), /** @src -1:-1:-1 */ 0)\n                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                    array := array_1\n                }\n            }\n            /// @use-src 28:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 30:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\", 35:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 37:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 44:\"src/MoodNft.sol\"\n            object \"MoodNft_51029_deployed\" {\n                code {\n                    {\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x01ffc9a7 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value := calldataload(_3)\n                                let _5 := and(value, shl(224, 0xffffffff))\n                                if iszero(eq(value, _5)) { revert(_4, _4) }\n                                /// @src 30:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                let expr := /** @src 30:1698:1738  \"interfaceId == type(IERC721).interfaceId\" */ eq(_5, /** @src 30:1713:1738  \"type(IERC721).interfaceId\" */ shl(224, 0x80ac58cd))\n                                /// @src 30:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                if iszero(expr)\n                                {\n                                    expr := /** @src 30:1754:1802  \"interfaceId == type(IERC721Metadata).interfaceId\" */ eq(_5, /** @src 30:1769:1802  \"type(IERC721Metadata).interfaceId\" */ shl(224, 0x5b5e139f))\n                                }\n                                /// @src 30:1698:1854  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                let expr_1 := expr\n                                if iszero(expr)\n                                {\n                                    expr_1 := /** @src 37:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_5, /** @src 37:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                }\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(_1, iszero(iszero(expr_1)))\n                                return(_1, 32)\n                            }\n                            case 0x06fdde03 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let converted := copy_array_from_storage_to_memory_string()\n                                let memPos := mload(_2)\n                                mstore(memPos, 32)\n                                return(memPos, sub(abi_encode_string(converted, add(memPos, 32)), memPos))\n                            }\n                            case 0x081812fc {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let ret := fun_getApproved(calldataload(_3))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, and(ret, sub(shl(160, 1), 1)))\n                                return(memPos_1, 32)\n                            }\n                            case 0x095ea7b3 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0 := abi_decode_address_8199()\n                                let value_1 := calldataload(36)\n                                /// @src 30:14943:14965  \"_requireOwned(tokenId)\"\n                                let expr_2 := fun_requireOwned(value_1)\n                                /// @src 30:15093:15128  \"auth != address(0) && owner != auth\"\n                                let expr_3 := /** @src 30:15093:15111  \"auth != address(0)\" */ iszero(iszero(/** @src 35:735:745  \"msg.sender\" */ caller()))\n                                /// @src 30:15093:15128  \"auth != address(0) && owner != auth\"\n                                if expr_3\n                                {\n                                    expr_3 := /** @src 30:15115:15128  \"owner != auth\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:15115:15128  \"owner != auth\" */ expr_2, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1)), /** @src 35:735:745  \"msg.sender\" */ caller()))\n                                }\n                                /// @src 30:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                let expr_4 := expr_3\n                                if expr_3\n                                {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(_4, and(expr_2, sub(shl(160, 1), 1)))\n                                    mstore(0x20, /** @src 30:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let _6 := keccak256(_4, _2)\n                                    mstore(_4, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(0x20, _6)\n                                    /// @src 30:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                    expr_4 := /** @src 30:15132:15162  \"!isApprovedForAll(owner, auth)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(_4, _2)), 0xff))\n                                }\n                                /// @src 30:15089:15231  \"if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {...\"\n                                if expr_4\n                                {\n                                    /// @src 30:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    let _7 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 30:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    mstore(_7, shl(224, 0xa9fbf51f))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:15189:15216  \"ERC721InvalidApprover(auth)\" */ add(_7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                    /// @src 30:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    revert(_7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                let _8 := sub(shl(160, 1), 1)\n                                let _9 := and(/** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ value0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _8)\n                                /// @src 30:15283:15311  \"Approval(owner, to, tokenId)\"\n                                log4(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ expr_2, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _8), _9, /** @src 30:15283:15311  \"Approval(owner, to, tokenId)\" */ value_1)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(_4, value_1)\n                                mstore(0x20, _3)\n                                let _10 := keccak256(_4, _2)\n                                sstore(_10, or(and(sload(_10), shl(160, 0xffffffffffffffffffffffff)), _9))\n                                return(_4, _4)\n                            }\n                            case 0x23b872dd {\n                                if callvalue() { revert(_4, _4) }\n                                let param, param_1, param_2 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                fun_transferFrom(param, param_1, param_2)\n                                return(_4, _4)\n                            }\n                            case 0x42842e0e {\n                                if callvalue() { revert(_4, _4) }\n                                let param_3, param_4, param_5 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                let memPtr := mload(_2)\n                                finalize_allocation_18857(memPtr)\n                                mstore(memPtr, _4)\n                                /// @src 30:5121:5128  \"tokenId\"\n                                fun_transferFrom(param_3, param_4, param_5)\n                                /// @src 30:5181:5185  \"data\"\n                                fun_checkOnERC721Received(param_3, param_4, param_5, memPtr)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                return(_4, _4)\n                            }\n                            case 0x5de0682f {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let converted_1 := copy_array_from_storage_to_memory_string_8204()\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, 32)\n                                return(memPos_2, sub(abi_encode_string(converted_1, add(memPos_2, 32)), memPos_2))\n                            }\n                            case 0x6352211e {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                /// @src 30:2267:2296  \"return _requireOwned(tokenId)\"\n                                let var := /** @src 30:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ calldataload(_3))\n                                let memPos_3 := mload(_2)\n                                mstore(memPos_3, and(var, sub(shl(160, 1), 1)))\n                                return(memPos_3, 32)\n                            }\n                            case 0x6e02007d {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _11 := sload(/** @src 44:3430:3444  \"s_tokenCounter\" */ 0x07)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let memPos_4 := mload(_2)\n                                mstore(memPos_4, _11)\n                                return(memPos_4, 32)\n                            }\n                            case 0x70a08231 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let _12 := and(abi_decode_address_8199(), sub(shl(160, 1), 1))\n                                /// @src 30:2002:2089  \"if (owner == address(0)) {...\"\n                                if /** @src 30:2006:2025  \"owner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _12)\n                                /// @src 30:2002:2089  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    let _13 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    mstore(_13, shl(226, 0x22718ad9))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\" */ add(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                    /// @src 30:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    revert(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                mstore(_4, _12)\n                                mstore(32, /** @src 30:2105:2114  \"_balances\" */ 0x03)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _14 := sload(keccak256(_4, _2))\n                                let memPos_5 := mload(_2)\n                                mstore(memPos_5, _14)\n                                return(memPos_5, 32)\n                            }\n                            case 0x715018a6 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                /// @src 28:1500:1562  \"modifier onlyOwner() {...\"\n                                fun_checkOwner()\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _15 := sload(/** @src 28:3004:3010  \"_owner\" */ 0x06)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                sstore(/** @src 28:3004:3010  \"_owner\" */ 0x06, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_15, shl(160, 0xffffffffffffffffffffffff)))\n                                /// @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                log3(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_15, sub(shl(160, 1), 1)), _4)\n                                return(_4, _4)\n                            }\n                            case 0x8da5cb5b {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let cleaned := and(sload(/** @src 28:1710:1716  \"_owner\" */ 0x06), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1))\n                                let memPos_6 := mload(_2)\n                                mstore(memPos_6, cleaned)\n                                return(memPos_6, 32)\n                            }\n                            case 0x95d89b41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr_1 := mload(_2)\n                                let ret_1 := _4\n                                /// @src 30:2597:2604  \"_symbol\"\n                                let _16 := 0x01\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let slotValue := sload(/** @src 30:2597:2604  \"_symbol\" */ _16)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let length := _4\n                                length := shr(/** @src 30:2597:2604  \"_symbol\" */ _16, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ slotValue)\n                                let outOfPlaceEncoding := and(slotValue, /** @src 30:2597:2604  \"_symbol\" */ _16)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                let _17 := 32\n                                if eq(outOfPlaceEncoding, lt(length, _17))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x22)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(memPtr_1, length)\n                                switch outOfPlaceEncoding\n                                case 0 {\n                                    mstore(add(memPtr_1, _17), and(slotValue, not(255)))\n                                    ret_1 := add(add(memPtr_1, shl(5, iszero(iszero(length)))), _17)\n                                }\n                                case 1 {\n                                    mstore(_4, /** @src 30:2597:2604  \"_symbol\" */ _16)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let dataPos := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _17) }\n                                    {\n                                        mstore(add(add(memPtr_1, i), _17), sload(dataPos))\n                                        dataPos := add(dataPos, /** @src 30:2597:2604  \"_symbol\" */ _16)\n                                    }\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    ret_1 := add(add(memPtr_1, i), _17)\n                                }\n                                finalize_allocation(memPtr_1, sub(ret_1, memPtr_1))\n                                let memPos_7 := mload(_2)\n                                mstore(memPos_7, _17)\n                                return(memPos_7, sub(abi_encode_string(memPtr_1, add(memPos_7, _17)), memPos_7))\n                            }\n                            case 0xa22cb465 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_1 := abi_decode_address_8199()\n                                let value_2 := calldataload(36)\n                                let _18 := iszero(iszero(value_2))\n                                if iszero(eq(value_2, _18)) { revert(_4, _4) }\n                                let _19 := and(/** @src 30:15698:15720  \"operator == address(0)\" */ value0_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1))\n                                /// @src 30:15694:15785  \"if (operator == address(0)) {...\"\n                                if /** @src 30:15698:15720  \"operator == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _19)\n                                /// @src 30:15694:15785  \"if (operator == address(0)) {...\"\n                                {\n                                    /// @src 30:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    let _20 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 30:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    mstore(_20, shl(227, 0x0b611743))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:15743:15774  \"ERC721InvalidOperator(operator)\" */ add(_20, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _19)\n                                    /// @src 30:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    revert(_20, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                mstore(_4, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(32, /** @src 30:15794:15812  \"_operatorApprovals\" */ 0x05)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _21 := keccak256(_4, _2)\n                                mstore(_4, _19)\n                                mstore(32, _21)\n                                let dataSlot := keccak256(_4, _2)\n                                let value_3 := and(sload(dataSlot), not(255))\n                                sstore(dataSlot, or(value_3, and(_18, 255)))\n                                /// @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                let _22 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                mstore(_22, _18)\n                                /// @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                log3(_22, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 32, /** @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, /** @src 35:735:745  \"msg.sender\" */ caller(), /** @src 30:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ _19)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                return(_4, _4)\n                            }\n                            case 0xb88d4fde {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                                let value0_2 := abi_decode_address_8199()\n                                let value1 := abi_decode_address()\n                                let value_4 := calldataload(68)\n                                let offset := calldataload(100)\n                                if gt(offset, 0xffffffffffffffff) { revert(_4, _4) }\n                                if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                                let _23 := calldataload(add(_3, offset))\n                                let _24 := array_allocation_size_bytes(_23)\n                                let memPtr_2 := mload(_2)\n                                finalize_allocation(memPtr_2, _24)\n                                mstore(memPtr_2, _23)\n                                if gt(add(add(offset, _23), 36), calldatasize()) { revert(_4, _4) }\n                                calldatacopy(add(memPtr_2, 32), add(offset, 36), _23)\n                                mstore(add(add(memPtr_2, _23), 32), _4)\n                                /// @src 30:5121:5128  \"tokenId\"\n                                fun_transferFrom(value0_2, value1, value_4)\n                                /// @src 30:5181:5185  \"data\"\n                                fun_checkOnERC721Received(value0_2, value1, value_4, memPtr_2)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                return(_4, _4)\n                            }\n                            case 0xc1a147a0 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value_5 := calldataload(_3)\n                                /// @src 44:1564:1584  \"getApproved(tokenId)\"\n                                let expr_5 := fun_getApproved(value_5)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _25 := sub(shl(160, 1), 1)\n                                /// @src 44:1564:1632  \"getApproved(tokenId) != msg.sender && ownerOf(tokenId) != msg.sender\"\n                                let expr_6 := /** @src 44:1564:1598  \"getApproved(tokenId) != msg.sender\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 44:1564:1598  \"getApproved(tokenId) != msg.sender\" */ expr_5, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _25), /** @src 44:1588:1598  \"msg.sender\" */ caller()))\n                                /// @src 44:1564:1632  \"getApproved(tokenId) != msg.sender && ownerOf(tokenId) != msg.sender\"\n                                if expr_6\n                                {\n                                    expr_6 := /** @src 44:1602:1632  \"ownerOf(tokenId) != msg.sender\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 44:1602:1618  \"ownerOf(tokenId)\" */ value_5), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _25), /** @src 44:1588:1598  \"msg.sender\" */ caller()))\n                                }\n                                /// @src 44:1560:1699  \"if (getApproved(tokenId) != msg.sender && ownerOf(tokenId) != msg.sender) {...\"\n                                if expr_6\n                                {\n                                    /// @src 44:1655:1688  \"MoodNft__CantFlipMoodIfNotOwner()\"\n                                    let _26 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 44:1655:1688  \"MoodNft__CantFlipMoodIfNotOwner()\"\n                                    mstore(_26, shl(224, 0x85046ca7))\n                                    revert(_26, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                }\n                                mstore(_4, value_5)\n                                mstore(32, /** @src 44:1713:1729  \"s_tokenIdToState\" */ 0x0a)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let value_6 := and(sload(keccak256(_4, _2)), 0xff)\n                                if iszero(lt(value_6, 2))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x21)\n                                    revert(_4, 0x24)\n                                }\n                                /// @src 44:1709:1896  \"if (s_tokenIdToState[tokenId] == NFTState.HAPPY) {...\"\n                                switch /** @src 44:1713:1756  \"s_tokenIdToState[tokenId] == NFTState.HAPPY\" */ iszero(value_6)\n                                case /** @src 44:1709:1896  \"if (s_tokenIdToState[tokenId] == NFTState.HAPPY) {...\" */ 0 {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(_4, value_5)\n                                    mstore(32, /** @src 44:1713:1729  \"s_tokenIdToState\" */ 0x0a)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let _27 := keccak256(_4, _2)\n                                    sstore(_27, and(sload(_27), not(255)))\n                                }\n                                default /// @src 44:1709:1896  \"if (s_tokenIdToState[tokenId] == NFTState.HAPPY) {...\"\n                                {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(_4, value_5)\n                                    mstore(32, /** @src 44:1713:1729  \"s_tokenIdToState\" */ 0x0a)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let _28 := keccak256(_4, _2)\n                                    sstore(_28, or(and(sload(_28), not(255)), /** @src 44:1800:1812  \"NFTState.SAD\" */ 1))\n                                }\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                return(_4, _4)\n                            }\n                            case 0xc2229fea {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _29 := sload(/** @src 44:1352:1366  \"s_tokenCounter\" */ 0x07)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let memPtr_3 := mload(_2)\n                                finalize_allocation_18857(memPtr_3)\n                                mstore(memPtr_3, _4)\n                                /// @src 30:10018:10105  \"if (to == address(0)) {...\"\n                                if /** @src 30:10022:10038  \"to == address(0)\" */ iszero(/** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                /// @src 30:10018:10105  \"if (to == address(0)) {...\"\n                                {\n                                    /// @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    let _30 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    mstore(_30, shl(225, 0x32505749))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ add(_30, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                    /// @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    revert(_30, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                mstore(_4, _29)\n                                let _31 := 0x20\n                                mstore(_31, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let cleaned_1 := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                /// @src 30:9161:9179  \"from != address(0)\"\n                                let _32 := iszero(iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned_1))\n                                /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                                if /** @src 30:9161:9179  \"from != address(0)\" */ _32\n                                /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                                {\n                                    /// @src 30:9319:9324  \"false\"\n                                    fun_approve(_29)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(_4, cleaned_1)\n                                    mstore(_31, /** @src 30:9368:9377  \"_balances\" */ 0x03)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let dataSlot_1 := keccak256(_4, _2)\n                                    sstore(dataSlot_1, add(sload(/** @src 30:9368:9388  \"_balances[from] -= 1\" */ dataSlot_1), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)))\n                                }\n                                mstore(_4, /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(_31, /** @src 30:9487:9496  \"_balances\" */ 0x03)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let dataSlot_2 := keccak256(_4, _2)\n                                sstore(dataSlot_2, add(sload(/** @src 30:9487:9505  \"_balances[to] += 1\" */ dataSlot_2), /** @src 30:9427:9443  \"to != address(0)\" */ 1))\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                mstore(_4, _29)\n                                mstore(_31, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _33 := keccak256(_4, _2)\n                                sstore(_33, or(and(sload(_33), shl(160, 0xffffffffffffffffffffffff)), /** @src 44:1386:1396  \"msg.sender\" */ caller()))\n                                /// @src 30:9577:9604  \"Transfer(from, to, tokenId)\"\n                                log4(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 30:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned_1, /** @src 44:1386:1396  \"msg.sender\" */ caller(), /** @src 30:9577:9604  \"Transfer(from, to, tokenId)\" */ _29)\n                                /// @src 30:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                if /** @src 30:10184:10211  \"previousOwner != address(0)\" */ _32\n                                /// @src 30:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                {\n                                    /// @src 30:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    let _34 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 30:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    mstore(_34, shl(225, 0x39e35637))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:10234:10265  \"ERC721InvalidSender(address(0))\" */ add(_34, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                    /// @src 30:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    revert(_34, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                                if /** @src 30:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 30:17034:17048  \"to.code.length\" */ extcodesize(/** @src 44:1386:1396  \"msg.sender\" */ caller())))\n                                /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                                {\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let _35 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    let _36 := shl(225, 0x0a85bd01)\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    mstore(_35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _36)\n                                    mstore(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), _4)\n                                    mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68), _29)\n                                    mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 100), 128)\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let trySuccessCondition := call(gas(), /** @src 44:1386:1396  \"msg.sender\" */ caller(), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ abi_encode_string(memPtr_3, add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 132)), /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _35), _35, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31)\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let expr_7 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4\n                                    /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    if trySuccessCondition\n                                    {\n                                        let _37 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31\n                                        /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        if gt(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ returndatasize()) { _37 := returndatasize() }\n                                        finalize_allocation(_35, _37)\n                                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                        if slt(sub(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_35, _37), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _35), _31) { revert(_4, _4) }\n                                        let value_7 := mload(_35)\n                                        if iszero(eq(value_7, and(value_7, shl(224, 0xffffffff)))) { revert(_4, _4) }\n                                        /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        expr_7 := value_7\n                                    }\n                                    /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    switch iszero(trySuccessCondition)\n                                    case 0 {\n                                        /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        if /** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr_7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0xffffffff)), _36))\n                                        /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        {\n                                            /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            let _38 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_38, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_38, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                            /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            revert(_38, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                    }\n                                    default /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    {\n                                        /// @src 30:17331:17684  \"catch (bytes memory reason) {...\"\n                                        let data := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4\n                                        switch returndatasize()\n                                        case 0 { data := 96 }\n                                        default {\n                                            let _39 := returndatasize()\n                                            let _40 := array_allocation_size_bytes(_39)\n                                            let memPtr_4 := mload(_2)\n                                            finalize_allocation(memPtr_4, _40)\n                                            mstore(memPtr_4, _39)\n                                            data := memPtr_4\n                                            returndatacopy(add(memPtr_4, _31), _4, returndatasize())\n                                        }\n                                        let _41 := mload(/** @src 30:17381:17394  \"reason.length\" */ data)\n                                        /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                        switch /** @src 30:17381:17399  \"reason.length == 0\" */ iszero(_41)\n                                        case /** @src 30:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                            /// @src 30:17557:17652  \"assembly {...\"\n                                            revert(add(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _31, /** @src 30:17557:17652  \"assembly {...\" */ data), _41)\n                                        }\n                                        default /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                        {\n                                            /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            let _42 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                            /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_42, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                            mstore(/** @src 30:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_42, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 44:1386:1396  \"msg.sender\" */ caller())\n                                            /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            revert(_42, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                        }\n                                    }\n                                }\n                                let _43 := sload(/** @src 44:1352:1366  \"s_tokenCounter\" */ 0x07)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let sum := add(_43, /** @src 30:9427:9443  \"to != address(0)\" */ 1)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if gt(_43, sum)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x11)\n                                    revert(_4, 0x24)\n                                }\n                                sstore(/** @src 44:1352:1366  \"s_tokenCounter\" */ 0x07, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sum)\n                                /// @src 44:1471:1495  \"CreatedNFT(tokenCounter)\"\n                                log2(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 44:1471:1495  \"CreatedNFT(tokenCounter)\" */ 0x72102923c3d44433bd725cb2c744a4c92a536ad249b665dec9853a16ed665525, _29)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                return(_4, _4)\n                            }\n                            case 0xc87b56dd {\n                                if callvalue() { revert(_4, _4) }\n                                let _44 := 32\n                                if slt(add(calldatasize(), not(3)), _44) { revert(_4, _4) }\n                                let value_8 := calldataload(_3)\n                                /// @src 44:2134:2249  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                if /** @src 44:2138:2168  \"ownerOf(tokenId) == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 44:2138:2154  \"ownerOf(tokenId)\" */ value_8), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1)))\n                                /// @src 44:2134:2249  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                {\n                                    /// @src 44:2191:2238  \"ERC721Metadata__URI_QueryFor_NonExistentToken()\"\n                                    let _45 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 44:2191:2238  \"ERC721Metadata__URI_QueryFor_NonExistentToken()\"\n                                    mstore(_45, shl(225, 0x36faf6d7))\n                                    revert(_45, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3)\n                                }\n                                /// @src 44:2258:2296  \"string memory imageURI = s_happySvgUri\"\n                                let var_imageURI_mpos := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ copy_array_from_storage_to_memory_string_8216()\n                                mstore(_4, value_8)\n                                mstore(_44, /** @src 44:2311:2327  \"s_tokenIdToState\" */ 0x0a)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let value_9 := and(sload(keccak256(_4, _2)), 0xff)\n                                if iszero(lt(value_9, 2))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x21)\n                                    revert(_4, 0x24)\n                                }\n                                /// @src 44:2307:2401  \"if (s_tokenIdToState[tokenId] == NFTState.SAD) {...\"\n                                if /** @src 44:2311:2352  \"s_tokenIdToState[tokenId] == NFTState.SAD\" */ eq(value_9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 1)\n                                /// @src 44:2307:2401  \"if (s_tokenIdToState[tokenId] == NFTState.SAD) {...\"\n                                {\n                                    /// @src 44:2368:2390  \"imageURI = s_sadSvgUri\"\n                                    var_imageURI_mpos := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ copy_array_from_storage_to_memory_string_8204()\n                                }\n                                let memPtr_5 := mload(_2)\n                                let newFreePtr := add(memPtr_5, _2)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_5))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr)\n                                mstore(memPtr_5, 29)\n                                let _46 := add(memPtr_5, _44)\n                                mstore(_46, \"data:application/json;base64,\")\n                                /// @src 44:2730:2736  \"name()\"\n                                let expr_mpos := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ copy_array_from_storage_to_memory_string()\n                                /// @src 44:2643:3079  \"abi.encodePacked(...\"\n                                let expr_mpos_1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                mstore(/** @src 44:2643:3079  \"abi.encodePacked(...\" */ add(expr_mpos_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _44), shl(185, 0x3d913730b6b2911d11))\n                                let length_1 := mload(expr_mpos)\n                                copy_memory_to_memory_with_cleanup(add(expr_mpos, _44), add(/** @src 44:2643:3079  \"abi.encodePacked(...\" */ expr_mpos_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 41), length_1)\n                                let _47 := add(/** @src 44:2643:3079  \"abi.encodePacked(...\" */ expr_mpos_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ length_1)\n                                mstore(add(_47, 41), 0x222c20226465736372697074696f6e223a22416e204e46542074686174207265)\n                                mstore(add(_47, 73), \"flects the mood of the owner, 10\")\n                                mstore(add(_47, 105), shl(141, 0x018129037b71021b430b4b71091161))\n                                mstore(add(_47, 120), 0x2261747472696275746573223a205b7b2274726169745f74797065223a20226d)\n                                mstore(add(_47, 152), 0x6f6f64696e657373222c202276616c7565223a203130307d5d2c2022696d6167)\n                                mstore(add(_47, 184), shl(225, 0x32911d11))\n                                let length_2 := mload(var_imageURI_mpos)\n                                copy_memory_to_memory_with_cleanup(add(var_imageURI_mpos, _44), add(_47, 188), length_2)\n                                let _48 := add(_47, length_2)\n                                mstore(add(_48, 188), shl(240, 8829))\n                                /// @src 44:2643:3079  \"abi.encodePacked(...\"\n                                let _49 := sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _48, /** @src 44:2643:3079  \"abi.encodePacked(...\" */ expr_mpos_1)\n                                mstore(expr_mpos_1, add(_49, 158))\n                                finalize_allocation(expr_mpos_1, add(_49, 190))\n                                /// @src 44:2499:3119  \"Base64.encode(...\"\n                                let expr_mpos_2 := fun_encode(expr_mpos_1)\n                                /// @src 44:2437:3133  \"abi.encodePacked(...\"\n                                let expr_mpos_3 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                let length_3 := mload(memPtr_5)\n                                copy_memory_to_memory_with_cleanup(_46, /** @src 44:2437:3133  \"abi.encodePacked(...\" */ add(expr_mpos_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _44), length_3)\n                                let _50 := add(/** @src 44:2437:3133  \"abi.encodePacked(...\" */ expr_mpos_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ length_3)\n                                let length_4 := mload(expr_mpos_2)\n                                copy_memory_to_memory_with_cleanup(add(expr_mpos_2, _44), add(_50, _44), length_4)\n                                /// @src 44:2437:3133  \"abi.encodePacked(...\"\n                                let _51 := sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ add(_50, length_4), /** @src 44:2437:3133  \"abi.encodePacked(...\" */ expr_mpos_3)\n                                mstore(expr_mpos_3, _51)\n                                finalize_allocation(expr_mpos_3, add(_51, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _44))\n                                let memPos_8 := mload(_2)\n                                mstore(memPos_8, _44)\n                                return(memPos_8, sub(abi_encode_string(expr_mpos_3, add(memPos_8, _44)), memPos_8))\n                            }\n                            case 0xe985e9c5 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_3 := abi_decode_address_8199()\n                                let value1_1 := abi_decode_address()\n                                let _52 := sub(shl(160, 1), 1)\n                                mstore(_4, and(value0_3, _52))\n                                mstore(32, /** @src 30:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _53 := keccak256(_4, _2)\n                                mstore(_4, and(value1_1, _52))\n                                mstore(32, _53)\n                                let value_10 := and(sload(keccak256(_4, _2)), 0xff)\n                                let memPos_9 := mload(_2)\n                                mstore(memPos_9, iszero(iszero(value_10)))\n                                return(memPos_9, 32)\n                            }\n                            case 0xf2fde38b {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value0_4 := abi_decode_address_8199()\n                                /// @src 28:1500:1562  \"modifier onlyOwner() {...\"\n                                fun_checkOwner()\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let _54 := sub(shl(160, 1), 1)\n                                let _55 := and(/** @src 28:2627:2649  \"newOwner == address(0)\" */ value0_4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _54)\n                                /// @src 28:2623:2714  \"if (newOwner == address(0)) {...\"\n                                if /** @src 28:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _55)\n                                /// @src 28:2623:2714  \"if (newOwner == address(0)) {...\"\n                                {\n                                    /// @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                    let _56 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_2)\n                                    /// @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                    mstore(_56, shl(224, 0x1e4fbdf7))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\" */ add(_56, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), _4)\n                                    /// @src 28:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                    revert(_56, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                                let _57 := sload(/** @src 28:3004:3010  \"_owner\" */ 0x06)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                sstore(/** @src 28:3004:3010  \"_owner\" */ 0x06, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ or(and(_57, shl(160, 0xffffffffffffffffffffffff)), _55))\n                                /// @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                log3(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4, _4, /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(_57, _54), /** @src 28:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _55)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                return(_4, _4)\n                            }\n                            case 0xfc842121 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let converted_2 := copy_array_from_storage_to_memory_string_8216()\n                                let memPos_10 := mload(_2)\n                                mstore(memPos_10, 32)\n                                return(memPos_10, sub(abi_encode_string(converted_2, add(memPos_10, 32)), memPos_10))\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                    {\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 32) }\n                        {\n                            mstore(add(dst, i), mload(add(src, i)))\n                        }\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_encode_string(value, pos) -> end\n                    {\n                        let length := mload(value)\n                        mstore(pos, length)\n                        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                    }\n                    function abi_decode_address_8199() -> value\n                    {\n                        value := calldataload(4)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_address() -> value\n                    {\n                        value := calldataload(36)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_addresst_addresst_uint256(dataEnd) -> value0, value1, value2\n                    {\n                        if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                        let value := calldataload(4)\n                        let _1 := sub(shl(160, 1), 1)\n                        if iszero(eq(value, and(value, _1)))\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        value0 := value\n                        let value_1 := calldataload(36)\n                        if iszero(eq(value_1, and(value_1, _1)))\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        value1 := value_1\n                        value2 := calldataload(68)\n                    }\n                    function finalize_allocation_18857(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 0x20)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size := add(and(add(length, 31), not(31)), 0x20)\n                    }\n                    /// @ast-id 47570 @src 28:1796:1958  \"function _checkOwner() internal view virtual {...\"\n                    function fun_checkOwner()\n                    {\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let cleaned := and(sload(/** @src 28:1710:1716  \"_owner\" */ 0x06), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ sub(shl(160, 1), 1))\n                        /// @src 28:1851:1952  \"if (owner() != _msgSender()) {...\"\n                        if /** @src 28:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned, /** @src 35:735:745  \"msg.sender\" */ caller()))\n                        /// @src 28:1851:1952  \"if (owner() != _msgSender()) {...\"\n                        {\n                            /// @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                            let _1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                            /// @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                            mstore(_1, shl(224, 0x118cdaa7))\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(/** @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ add(_1, 4), /** @src 35:735:745  \"msg.sender\" */ caller())\n                            /// @src 28:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                            revert(_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                        }\n                    }\n                    function copy_array_from_storage_to_memory_string() -> memPtr\n                    {\n                        memPtr := mload(64)\n                        let ret := 0\n                        let slotValue := sload(ret)\n                        let length := ret\n                        let _1 := 1\n                        length := shr(_1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, _1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _2 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _2))\n                        {\n                            mstore(ret, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(ret, 0x24)\n                        }\n                        mstore(memPtr, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(memPtr, _2), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                        }\n                        case 1 {\n                            mstore(0, 0)\n                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, _2) }\n                            {\n                                mstore(add(add(memPtr, i), _2), sload(dataPos))\n                                dataPos := add(dataPos, _1)\n                            }\n                            ret := add(add(memPtr, i), _2)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                    }\n                    function copy_array_from_storage_to_memory_string_8204() -> memPtr\n                    {\n                        memPtr := mload(64)\n                        let ret := /** @src -1:-1:-1 */ 0\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let slotValue := sload(/** @src 44:3332:3343  \"s_sadSvgUri\" */ 0x08)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let length := /** @src -1:-1:-1 */ ret\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _1 := 1\n                        length := shr(_1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, _1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _2 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _2))\n                        {\n                            mstore(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                        }\n                        mstore(memPtr, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(memPtr, _2), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                        }\n                        case 1 {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 44:3332:3343  \"s_sadSvgUri\" */ 0x08)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let dataPos := 110349606679412691172957834289542550319383271247755660854362242977991410020067\n                            let i := /** @src -1:-1:-1 */ 0\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            for { } lt(i, length) { i := add(i, _2) }\n                            {\n                                mstore(add(add(memPtr, i), _2), sload(dataPos))\n                                dataPos := add(dataPos, _1)\n                            }\n                            ret := add(add(memPtr, i), _2)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                    }\n                    function copy_array_from_storage_to_memory_string_8216() -> memPtr\n                    {\n                        memPtr := mload(64)\n                        let ret := /** @src -1:-1:-1 */ 0\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let slotValue := sload(/** @src 44:2283:2296  \"s_happySvgUri\" */ 0x09)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let length := /** @src -1:-1:-1 */ ret\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _1 := 1\n                        length := shr(_1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, _1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _2 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _2))\n                        {\n                            mstore(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(/** @src -1:-1:-1 */ ret, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                        }\n                        mstore(memPtr, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(memPtr, _2), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                        }\n                        case 1 {\n                            mstore(/** @src -1:-1:-1 */ 0, /** @src 44:2283:2296  \"s_happySvgUri\" */ 0x09)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let dataPos := 49791959467252497455735130940088646708311117250336157395101362029847983277999\n                            let i := /** @src -1:-1:-1 */ 0\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            for { } lt(i, length) { i := add(i, _2) }\n                            {\n                                mstore(add(add(memPtr, i), _2), sload(dataPos))\n                                dataPos := add(dataPos, _1)\n                            }\n                            ret := add(add(memPtr, i), _2)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                    }\n                    /// @ast-id 48008 @src 30:3497:3651  \"function getApproved(uint256 tokenId) public view virtual returns (address) {...\"\n                    function fun_getApproved(var_tokenId) -> var\n                    {\n                        /// @src 30:3583:3605  \"_requireOwned(tokenId)\"\n                        pop(fun_requireOwned(var_tokenId))\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                        mstore(0x20, /** @src 30:6034:6049  \"_tokenApprovals\" */ 0x04)\n                        /// @src 30:3616:3644  \"return _getApproved(tokenId)\"\n                        var := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x40)), sub(shl(160, 1), 1))\n                    }\n                    /// @ast-id 48087 @src 30:4143:4721  \"function transferFrom(address from, address to, uint256 tokenId) public virtual {...\"\n                    function fun_transferFrom(var_from, var_to, var_tokenId)\n                    {\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _1 := sub(shl(160, 1), 1)\n                        let _2 := and(/** @src 30:4237:4253  \"to == address(0)\" */ var_to, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _1)\n                        /// @src 30:4233:4320  \"if (to == address(0)) {...\"\n                        if /** @src 30:4237:4253  \"to == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                        /// @src 30:4233:4320  \"if (to == address(0)) {...\"\n                        {\n                            /// @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            let _3 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                            /// @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            mstore(_3, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(/** @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\" */ add(_3, 4), /** @src 30:4251:4252  \"0\" */ 0x00)\n                            /// @src 30:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            revert(_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                        }\n                        /// @src -1:-1:-1\n                        let _4 := 0\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                        let _5 := 0x20\n                        mstore(_5, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _6 := 0x40\n                        let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)), _1)\n                        /// @src 30:9035:9053  \"auth != address(0)\"\n                        let _7 := iszero(iszero(/** @src 35:735:745  \"msg.sender\" */ caller()))\n                        /// @src 30:9031:9117  \"if (auth != address(0)) {...\"\n                        if /** @src 30:9035:9053  \"auth != address(0)\" */ _7\n                        /// @src 30:9031:9117  \"if (auth != address(0)) {...\"\n                        {\n                            /// @src 30:6514:6641  \"spender != address(0) &&...\"\n                            let expr := _7\n                            if _7\n                            {\n                                /// @src 30:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                let expr_1 := /** @src 30:6552:6568  \"owner == spender\" */ eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                /// @src 30:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                if iszero(expr_1)\n                                {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                                    mstore(_5, /** @src 30:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    let _8 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 35:735:745  \"msg.sender\" */ caller())\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(_5, _8)\n                                    /// @src 30:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                    expr_1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)), 0xff)\n                                }\n                                /// @src 30:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                let expr_2 := expr_1\n                                if iszero(expr_1)\n                                {\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                    mstore(_5, /** @src 30:6034:6049  \"_tokenApprovals\" */ 0x04)\n                                    /// @src 30:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                    expr_2 := /** @src 30:6608:6640  \"_getApproved(tokenId) == spender\" */ eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)), _1), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                }\n                                /// @src 30:6514:6641  \"spender != address(0) &&...\"\n                                expr := expr_2\n                            }\n                            /// @src 30:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                            if /** @src 30:7193:7232  \"!_isAuthorized(owner, spender, tokenId)\" */ iszero(/** @src 30:7194:7232  \"_isAuthorized(owner, spender, tokenId)\" */ expr)\n                            /// @src 30:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                            {\n                                /// @src 30:7248:7434  \"if (owner == address(0)) {...\"\n                                switch /** @src 30:7252:7271  \"owner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                                case /** @src 30:7248:7434  \"if (owner == address(0)) {...\" */ 0 {\n                                    /// @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    let _9 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_6)\n                                    /// @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    mstore(_9, shl(224, 0x177e802f))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ add(_9, 4), /** @src 35:735:745  \"msg.sender\" */ caller())\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(add(/** @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ _9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), var_tokenId)\n                                    /// @src 30:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    revert(_9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68)\n                                }\n                                default /// @src 30:7248:7434  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    let _10 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_6)\n                                    /// @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    mstore(_10, shl(224, 0x7e273289))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ add(_10, 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                                    /// @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    revert(_10, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                            }\n                        }\n                        /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                        if /** @src 30:9161:9179  \"from != address(0)\" */ iszero(iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned))\n                        /// @src 30:9157:9413  \"if (from != address(0)) {...\"\n                        {\n                            /// @src 30:9319:9324  \"false\"\n                            fun_approve(var_tokenId)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                            mstore(_5, /** @src 30:9368:9377  \"_balances\" */ 0x03)\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let dataSlot := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                            sstore(dataSlot, add(sload(/** @src 30:9368:9388  \"_balances[from] -= 1\" */ dataSlot), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)))\n                        }\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                        mstore(_5, /** @src 30:9487:9496  \"_balances\" */ 0x03)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                        sstore(dataSlot_1, add(sload(/** @src 30:9487:9505  \"_balances[to] += 1\" */ dataSlot_1), /** @src 30:9427:9443  \"to != address(0)\" */ 1))\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                        mstore(_5, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _11 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _6)\n                        sstore(_11, or(and(sload(_11), shl(160, 0xffffffffffffffffffffffff)), _2))\n                        /// @src 30:9577:9604  \"Transfer(from, to, tokenId)\"\n                        log4(/** @src -1:-1:-1 */ _4, _4, /** @src 30:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned, _2, var_tokenId)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _12 := and(/** @src 30:4610:4631  \"previousOwner != from\" */ var_from, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _1)\n                        /// @src 30:4606:4715  \"if (previousOwner != from) {...\"\n                        if /** @src 30:4610:4631  \"previousOwner != from\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned, _12))\n                        /// @src 30:4606:4715  \"if (previousOwner != from) {...\"\n                        {\n                            /// @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            let _13 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(_6)\n                            /// @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            mstore(_13, shl(224, 0x64283d7b))\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(/** @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ add(_13, 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _12)\n                            mstore(add(/** @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), var_tokenId)\n                            mstore(add(/** @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68), cleaned)\n                            /// @src 30:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            revert(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 100)\n                        }\n                    }\n                    /// @ast-id 48648 @src 30:14720:15382  \"function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {...\"\n                    function fun_approve(var_tokenId)\n                    {\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        mstore(0, var_tokenId)\n                        mstore(0x20, /** @src 30:15346:15361  \"_tokenApprovals\" */ 0x04)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let _1 := keccak256(0, 0x40)\n                        sstore(_1, and(sload(_1), shl(160, 0xffffffffffffffffffffffff)))\n                    }\n                    /// @ast-id 48714 @src 30:16138:16379  \"function _requireOwned(uint256 tokenId) internal view returns (address) {...\"\n                    function fun_requireOwned(var_tokenId) -> var\n                    {\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                        mstore(0x20, /** @src 30:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x40)), sub(shl(160, 1), 1))\n                        /// @src 30:16263:16351  \"if (owner == address(0)) {...\"\n                        if /** @src 30:16267:16286  \"owner == address(0)\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ cleaned)\n                        /// @src 30:16263:16351  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            let _1 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(0x40)\n                            /// @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            mstore(_1, /** @src 30:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ shl(224, 0x7e273289))\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(/** @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\" */ add(_1, 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ var_tokenId)\n                            /// @src 30:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            revert(_1, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                        }\n                        /// @src 30:16360:16372  \"return owner\"\n                        var := cleaned\n                    }\n                    /// @ast-id 48778 @src 30:16918:17700  \"function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {...\"\n                    function fun_checkOnERC721Received(var_from, var_to, var_tokenId, var_data_mpos)\n                    {\n                        /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                        if /** @src 30:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 30:17034:17048  \"to.code.length\" */ extcodesize(var_to)))\n                        /// @src 30:17030:17694  \"if (to.code.length > 0) {...\"\n                        {\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let _1 := sub(shl(160, 1), 1)\n                            let _2 := and(/** @src 30:17072:17091  \"IERC721Receiver(to)\" */ var_to, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _1)\n                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let _3 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                            let _4 := shl(225, 0x0a85bd01)\n                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            mstore(_3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _4)\n                            mstore(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, 4), /** @src 35:735:745  \"msg.sender\" */ caller())\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36), and(var_from, _1))\n                            mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 68), var_tokenId)\n                            mstore(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 100), 128)\n                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let _5 := 32\n                            let _6 := sub(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ abi_encode_string(var_data_mpos, add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 132)), /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3)\n                            /// @src 30:17051:17052  \"0\"\n                            let _7 := 0x00\n                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let trySuccessCondition := call(gas(), _2, /** @src 30:17051:17052  \"0\" */ _7, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, _6, _3, _5)\n                            let expr := /** @src 30:17051:17052  \"0\" */ _7\n                            /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            if trySuccessCondition\n                            {\n                                let _8 := _5\n                                if gt(_5, returndatasize()) { _8 := returndatasize() }\n                                finalize_allocation(_3, _8)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                if slt(sub(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, _8), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _3), /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5)\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                {\n                                    revert(/** @src 30:17051:17052  \"0\" */ _7, _7)\n                                }\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                let value := mload(_3)\n                                if iszero(eq(value, and(value, shl(224, 0xffffffff))))\n                                {\n                                    revert(/** @src 30:17051:17052  \"0\" */ _7, _7)\n                                }\n                                /// @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                expr := value\n                            }\n                            /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                            switch iszero(trySuccessCondition)\n                            case 0 {\n                                /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                if /** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ and(/** @src 30:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0xffffffff)), _4))\n                                /// @src 30:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                {\n                                    /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    let _9 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                    /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    mstore(_9, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_9, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                                    /// @src 30:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    revert(_9, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                            }\n                            default /// @src 30:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                            {\n                                /// @src 30:17331:17684  \"catch (bytes memory reason) {...\"\n                                let data := /** @src 30:17051:17052  \"0\" */ _7\n                                /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                switch returndatasize()\n                                case 0 { data := 96 }\n                                default {\n                                    let _10 := returndatasize()\n                                    let _11 := array_allocation_size_bytes(_10)\n                                    let memPtr := mload(64)\n                                    finalize_allocation(memPtr, _11)\n                                    mstore(memPtr, _10)\n                                    data := memPtr\n                                    returndatacopy(add(memPtr, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5), /** @src 30:17051:17052  \"0\" */ _7, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ returndatasize())\n                                }\n                                let _12 := mload(/** @src 30:17381:17394  \"reason.length\" */ data)\n                                /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                switch /** @src 30:17381:17399  \"reason.length == 0\" */ iszero(_12)\n                                case /** @src 30:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                    /// @src 30:17557:17652  \"assembly {...\"\n                                    revert(add(/** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5, /** @src 30:17557:17652  \"assembly {...\" */ data), _12)\n                                }\n                                default /// @src 30:17377:17670  \"if (reason.length == 0) {...\"\n                                {\n                                    /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    let _13 := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(64)\n                                    /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    mstore(_13, /** @src 30:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                                    mstore(/** @src 30:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_13, /** @src 30:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ _2)\n                                    /// @src 30:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    revert(_13, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 36)\n                                }\n                            }\n                        }\n                    }\n                    /// @ast-id 48988 @src 34:476:3858  \"function encode(bytes memory data) internal pure returns (string memory) {...\"\n                    function fun_encode(var_data_48952_mpos) -> var_mpos\n                    {\n                        /// @src 34:762:793  \"if (data.length == 0) return \\\"\\\"\"\n                        if /** @src 34:766:782  \"data.length == 0\" */ iszero(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(/** @src 34:766:777  \"data.length\" */ var_data_48952_mpos))\n                        /// @src 34:762:793  \"if (data.length == 0) return \\\"\\\"\"\n                        {\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            let memPtr := mload(64)\n                            finalize_allocation_18857(memPtr)\n                            mstore(memPtr, /** @src 34:781:782  \"0\" */ 0x00)\n                            /// @src 34:784:793  \"return \\\"\\\"\"\n                            var_mpos := memPtr\n                            leave\n                        }\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let memPtr_1 := mload(64)\n                        let newFreePtr := add(memPtr_1, 96)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        mstore(memPtr_1, 64)\n                        mstore(add(memPtr_1, 32), \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\")\n                        mstore(add(memPtr_1, 64), \"ghijklmnopqrstuvwxyz0123456789+/\")\n                        /// @src 34:1314:1325  \"data.length\"\n                        let expr := /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ mload(/** @src 34:1314:1325  \"data.length\" */ var_data_48952_mpos)\n                        /// @src 34:1328:1329  \"2\"\n                        let _1 := 0x02\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        let sum := add(expr, /** @src 34:1328:1329  \"2\" */ _1)\n                        /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                        if gt(expr, sum)\n                        {\n                            mstore(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                        }\n                        /// @src 34:1333:1334  \"3\"\n                        let _2 := 0x03\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        let r := div(sum, /** @src 34:1333:1334  \"3\" */ _2)\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        let product := shl(/** @src 34:1328:1329  \"2\" */ _1, /** @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\" */ r)\n                        if iszero(eq(r, and(r, sub(shl(254, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 1), 1))))\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        {\n                            /// @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\"\n                            mstore(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 34:1308:1309  \"4\" */ 0x04, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x11)\n                            revert(/** @src 34:781:782  \"0\" */ 0x00, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 0x24)\n                        }\n                        let _3 := array_allocation_size_bytes(product)\n                        let memPtr_2 := mload(64)\n                        finalize_allocation(memPtr_2, _3)\n                        mstore(memPtr_2, product)\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        let dataSize := array_allocation_size_bytes(product)\n                        let dataStart := add(memPtr_2, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 32)\n                        /// @src 34:316:382  \"\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"\"\n                        calldatacopy(dataStart, calldatasize(), add(dataSize, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(31)))\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        let usr$resultPtr := dataStart\n                        let usr$dataPtr := var_data_48952_mpos\n                        let usr$endPtr := add(var_data_48952_mpos, mload(var_data_48952_mpos))\n                        let usr$afterPtr := add(usr$endPtr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 32)\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        let usr$afterCache := mload(usr$afterPtr)\n                        mstore(usr$afterPtr, /** @src 34:781:782  \"0\" */ 0x00)\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        for { } lt(usr$dataPtr, usr$endPtr) { }\n                        {\n                            usr$dataPtr := add(usr$dataPtr, /** @src 34:1333:1334  \"3\" */ _2)\n                            /// @src 34:1390:3828  \"assembly {...\"\n                            let usr$input := mload(usr$dataPtr)\n                            let _4 := 1\n                            let _5 := 0x3F\n                            mstore8(usr$resultPtr, mload(add(add(memPtr_1, and(shr(18, usr$input), _5)), _4)))\n                            mstore8(add(usr$resultPtr, _4), mload(add(add(memPtr_1, and(shr(12, usr$input), _5)), _4)))\n                            mstore8(add(usr$resultPtr, /** @src 34:1328:1329  \"2\" */ _1), /** @src 34:1390:3828  \"assembly {...\" */ mload(add(add(memPtr_1, and(shr(6, usr$input), _5)), _4)))\n                            mstore8(add(usr$resultPtr, /** @src 34:1333:1334  \"3\" */ _2), /** @src 34:1390:3828  \"assembly {...\" */ mload(add(add(memPtr_1, and(usr$input, _5)), _4)))\n                            usr$resultPtr := add(usr$resultPtr, /** @src 34:1308:1309  \"4\" */ 0x04)\n                        }\n                        /// @src 34:1390:3828  \"assembly {...\"\n                        mstore(usr$afterPtr, usr$afterCache)\n                        switch mod(mload(var_data_48952_mpos), /** @src 34:1333:1334  \"3\" */ _2)\n                        case /** @src 34:1390:3828  \"assembly {...\" */ 1 {\n                            mstore8(add(usr$resultPtr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)), /** @src 34:1390:3828  \"assembly {...\" */ 0x3d)\n                            mstore8(add(usr$resultPtr, not(/** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ 1)), /** @src 34:1390:3828  \"assembly {...\" */ 0x3d)\n                        }\n                        case 2 {\n                            mstore8(add(usr$resultPtr, /** @src 44:606:3453  \"contract MoodNft is ERC721, Ownable {...\" */ not(0)), /** @src 34:1390:3828  \"assembly {...\" */ 0x3d)\n                        }\n                        /// @src 34:3838:3851  \"return result\"\n                        var_mpos := memPtr_2\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000814000a\"\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000814000a\"\n    }\n}\n","hash":"01000655b461d7e9c30b07329727a342c691ac558b42f2f6cd6d4d694014823a","factoryDependencies":{"0100011b8dedc04e0dff89b013370401ca8e9c06898fb86244b2cec83efa271d":"script/DeployMoodNft.s.sol:DeployMoodNft","0100036d2b6534332884124b865b03daa5fb3847cc0d3378512d7ec772b19644":"src/MoodNft.sol:MoodNft"},"id":45}