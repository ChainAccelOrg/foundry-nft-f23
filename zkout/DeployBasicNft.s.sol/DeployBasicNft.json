{"abi":null,"bytecode":{"object":"00020000000000020003000000000002000000000301001900000060033002700000004e0330019700010000003103550000008004000039000000400040043f00000001022001900000004b0000c13d000000040230008c000000f30000413d000000000101043b000000e001100270000000530210009c0000005b0000213d000000560210009c0000006a0000613d000000570110009c000000f30000c13d0000000001000416000000000101004b000000f30000c13d0000005a0100004100000000001004390000005b0100004100000004001004430000004e0100004100000000020004140000004e0320009c0000000002018019000000c0012002100000005c011001c700008002020000390133012e0000040f0000000102200190000000f50000613d000000000101043b000000000101004b000000f30000613d000000400400043d0000005d0100004100000000001404350000004e0100004100000000020004140000004e0320009c00000000020180190000004e0340009c000300000004001d00000000010440190002004000100218000000c00120021000000002011001af0000005e011001c70000005b02000041013301290000040f000000000301001900000060033002700000004e0030019d0000004e0330019700010000000103550000000102200190000000770000613d00000003040000290000005f0140009c000000450000813d000000400040043f000000600140009c0000009a0000a13d000000680100004100000000001004350000004101000039000000040010043f000000690100004100000135000104300000000001000416000000000101004b000000f30000c13d0000000c01000039000000000201041a0000004f0220019700000050022001c7000000000021041b00000051010000410000000d02000039000000000012041b0000002001000039000001000010044300000120000004430000005201000041000001340001042e000000540210009c0000006f0000613d000000550110009c000000f30000c13d0000000001000416000000000101004b000000f30000c13d0000000c01000039000000000101041a00000058011001980000000001000019000000010100c039000000800010043f0000005901000041000001340001042e0000000001000416000000000101004b000000f30000c13d0000000d01000039000000730000013d0000000001000416000000000101004b000000f30000c13d0000000e01000039000000000101041a000000800010043f0000005901000041000001340001042e000000400200043d0000001f0430018f0000000505300272000000840000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b0000007c0000413d000000000604004b000000930000613d0000000505500210000000000151034f00000000055200190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000004e010000410000004e0420009c000000000201801900000040012002100000006002300210000000000121019f000001350001043000000024014000390000006102000041000000000021043500000044014000390000000002000414000000600300003900000000003104350000006201000041000000000014043500000064014000390000000000010435000000040140003900000000000104350000004e010000410000004e0320009c0000000002018019000000c00120021000000002011001af00000063011001c70000800602000039013301290000040f0000000102200190000000b70000613d000000000201043b000000000102004b000000e10000c13d00000001010003670000000002000031000000bc0000013d0001000000010355000000000201001900000060022002700000004e0020019d0000004e02200197000000400300043d0000001f0420018f0000000505200272000000c90000613d000000000600001900000005076002100000000008730019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b000000c10000413d000000000604004b000000d80000613d0000000505500210000000000151034f00000000055300190000000304400210000000000605043300000000064601cf000000000646022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000161019f00000000001504350000004e010000410000004e0430009c00000000030180190000004e0420009c000000000201801900000060012002100000004002300210000000000112019f0000013500010430000300000002001d0000005a0100004100000000001004390000005b0100004100000004001004430000004e0100004100000000020004140000004e0320009c0000000002018019000000c0012002100000005c011001c700008002020000390133012e0000040f0000000102200190000000f50000613d000000000101043b000000000101004b000000f60000c13d00000000010000190000013500010430000000000001042f000000400400043d000000640100004100000000001404350000004e0100004100000000020004140000004e0320009c00000000020180190000004e0340009c000200000004001d00000000010440190001004000100218000000c00120021000000001011001af0000005e011001c70000005b02000041013301290000040f000000000301001900000060033002700000004e0030019d0000004e0330019700010000000103550000000102200190000001180000613d0000000201000029000000650110009c000000450000213d0000000202000029000000400020043f000000030100002900000066011001970000000000120435000000010100002900000067011001c7000001340001042e000000400200043d0000001f0430018f0000000505300272000001250000613d000000000600001900000005076002100000000008720019000000000771034f000000000707043b00000000007804350000000106600039000000000756004b0000011d0000413d000000000604004b000000930000613d000000860000013d000000000001042f0000012c002104210000000102000039000000000001042d0000000002000019000000000001042d00000131002104230000000102000039000000000001042d0000000002000019000000000001042d0000013300000432000001340001042e00000135000104300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff000000000000000000000000000000000000000000000000000000000000010001ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000000000000000000000000000e83332f900000000000000000000000000000000000000000000000000000000e83332fa00000000000000000000000000000000000000000000000000000000f8ccbf4700000000000000000000000000000000000000000000000000000000910dde5e00000000000000000000000000000000000000000000000000000000c04062260000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000200000008000000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d02000002000000000000000000000000000000240000000000000000000000007fb5297f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000ffffffffffffff7b0100024102d875090b6b9cc1edad56782a1343cbeb68eb20263d9d2f402f09ca9c4d535bdea7cd8a978f128b93471df48c7dbab89d703809115bdc118c235bfd020000000000000000000000000000000000008400000000000000000000000076eadd3600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000200000000000000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"assembly":"\t.text\n\t.file\t\"DeployBasicNft.s.sol:DeployBasicNft\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[3]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.gt\t@.BB0_8\n\tsub.s!\t@CPI0_8[0], r1, r2\n\tjump.eq\t@.BB0_10\n\tsub.s!\t@CPI0_9[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_12[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_16\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r4\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[3]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[2]\n\tshl.s\t192, r2, r1\n\tor\tstack-[2], r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t@CPI0_13[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_19\n\tadd\tstack-[3], r0, r4\n\tsub.s!\t@CPI0_17[0], r4, r1\n\tjump.ge\t@.BB0_25\n\tst.1\t64, r4\n\tsub.s!\t@CPI0_18[0], r4, r1\n\tjump.le\t@.BB0_28\n.BB0_25:\n\tadd\t@CPI0_26[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_27[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_1[0], r2, r2\n\tor\t@CPI0_2[0], r2, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_3[0], r0, r1\n\tadd\t13, r0, r2\n\tsstore\tr2, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_4[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_8:\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.eq\t@.BB0_45\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t12, r0, r1\n\tsload\tr1, r1\n\tand!\t@CPI0_10[0], r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_11[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t13, r0, r1\n\tjump\t@.BB0_12\n.BB0_45:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t14, r0, r1\n.BB0_12:\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_11[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_19:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_51\n\tadd\tr0, r0, r6\n.BB0_21:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_21\n.BB0_51:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_23\n.BB0_22:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_23:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_28:\n\tadd\t36, r4, r1\n\tadd\t@CPI0_19[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r4, r1\n\tcontext.gas_left\tr2\n\tadd\t96, r0, r3\n\tst.1\tr1, r3\n\tadd\t@CPI0_20[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t100, r4, r1\n\tst.1\tr1, r0\n\tadd\t4, r4, r1\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\tstack-[2], r1, r1\n\tor\t@CPI0_21[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_27\n\tld\tr1, r2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_31\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_33\n.BB0_27:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_33:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_50\n\tadd\tr0, r0, r6\n.BB0_35:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_35\n.BB0_50:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_37\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_37:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_31:\n\tadd\tr2, r0, stack-[3]\n\tadd\t@CPI0_12[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_16\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_38\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_16:\n\trevert\n.BB0_38:\n\tld.1\t64, r4\n\tadd\t@CPI0_22[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[2]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[1]\n\tshl.s\t192, r2, r1\n\tor\tstack-[1], r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tadd\t@CPI0_13[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tadd\tstack-[2], r0, r1\n\tsub.s!\t@CPI0_23[0], r1, r1\n\tjump.gt\t@.BB0_25\n\tadd\tstack-[2], r0, r2\n\tst.1\t64, r2\n\tadd\tstack-[3], r0, r1\n\tand\t@CPI0_24[0], r1, r1\n\tst.1\tr2, r1\n\tadd\tstack-[1], r0, r1\n\tor\t@CPI0_25[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_39:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_49\n\tadd\tr0, r0, r6\n.BB0_41:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_41\n.BB0_49:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_23\n\tjump\t@.BB0_22\n.func_end0:\n\n__cxa_throw:\n.func_begin1:\n\trevert\n.func_end1:\n\n__farcall:\n.func_begin2:\n.tmp0:\n\tfar_call\tr1, r2, @.BB2_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB2_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell -16711936\nCPI0_2:\n\t.cell 65537\nCPI0_3:\n\t.cell -37977571911845989512430043814285979273712922650878732108812190966532310630528\nCPI0_4:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_5:\n\t.cell 3895669497\nCPI0_6:\n\t.cell 3895669498\nCPI0_7:\n\t.cell 4174167879\nCPI0_8:\n\t.cell 2433605214\nCPI0_9:\n\t.cell 3225444902\nCPI0_10:\n\t.cell 16711680\nCPI0_11:\n\t.cell 2535301202817642044428229017600\nCPI0_12:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_13:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_14:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_15:\n\t.cell 57763817484313164028313283939489504447484577087939811246371138302511295758336\nCPI0_16:\n\t.cell 316912650057057350374175801344\nCPI0_17:\n\t.cell 18446744073709551616\nCPI0_18:\n\t.cell 18446744073709551483\nCPI0_19:\n\t.cell 452328404772163232250065532150499922456623732705478093056391488735351343562\nCPI0_20:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_21:\n\t.cell 904625697166532776746648320380374280103671765658434358441154937409622769664\nCPI0_22:\n\t.cell 53787885087763336501906314510680303380505312860176240795757540877198344323072\nCPI0_23:\n\t.cell 18446744073709551615\nCPI0_24:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_25:\n\t.cell 2535301200456458802993406410752\nCPI0_26:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_27:\n\t.cell 2852213850513516153367582212096\n","methodIdentifiers":{"DEFAULT_ANVIL_PRIVATE_KEY()":"910dde5e","IS_SCRIPT()":"f8ccbf47","deployerKey()":"e83332fa","run()":"c0406226"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEFAULT_ANVIL_PRIVATE_KEY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[{\"internalType\":\"contract BasicNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"script/DeployBasicNft.s.sol\":\"DeployBasicNft\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x2ba8ee7e4a68efd4cd75331b229874f4d4dc0a1010599afad88fc2cae5cb5d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77ce1968d402b0414fec0a344b59c275d0706d4df5ac6293d605dd2202016345\",\"dweb:/ipfs/QmSVy4N4F15NzEuSpmvwRj1nTfAwaJpng7CywUBWLnWC4w\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xf92ea94fe38f8370a8dc5f591ebfb4958869e18d877469ce422162cc88c8b063\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://620b5d4b2ff24d66120ce9dbb72fbde7276f2e8b3bb93f626874183aee01e307\",\"dweb:/ipfs/Qmcyc8co7vCiJ7gUd3jj5Hc1rRPihjt3WSKs5ut6eiU1Ze\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x3293dcbb7acd28df553c954e4e39e288bf10aab7ecda8d50ef21b4f4a91a28d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eb374daf6df34f4392f8926f1fddbce9f22c423066aeaefdfbe77395f77967b\",\"dweb:/ipfs/QmWR81zBJRX2uyRjveGzikYPj6ZwKppWsU49YEQXTLWUsN\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed37f0f86e7fe31659e48c3a2a5920a92dd7f13c85cf8991fb79fe5f01e08efd\",\"dweb:/ipfs/QmUtm9bQGvjr9hHGwkPWrbgFmVqzaJcxjkaYDex2oGsonS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"script/DeployBasicNft.s.sol\":{\"keccak256\":\"0x9a1d4c8baf4d7b4e3599f88e638a277e8411b7d64b07251bf638bce63bf04072\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f7d6871e79d09f256c7a938e7eb4a30bfbe492f7d49f083c3d2950debc4d915\",\"dweb:/ipfs/QmdGq7CTJN6Rt8mJzm7zGTk95BhZ1viaciMZtYB21SWPGY\"]},\"src/BasicNft.sol\":{\"keccak256\":\"0x010af816b5710b5227ae3f72ec01b000f5342ba0cd1265391dbb625c7595f421\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec20a20536d82b335cc6cf23c2e72f9c9d001eccf9555143eaeae11a441c48a5\",\"dweb:/ipfs/QmdZtaAaxJDWnm9sQQgBgHjeAd8TnFh4RX4j7rvfmpoqrs\"]}},\"version\":1}","solc_version":"0.8.20","solc_zkvm_edition":null,"zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 3:\"lib/forge-std/src/StdChains.sol\", 4:\"lib/forge-std/src/StdCheats.sol\", 12:\"lib/forge-std/src/StdUtils.sol\", 40:\"script/DeployBasicNft.s.sol\"\nobject \"DeployBasicNft_50422\" {\n    code {\n        {\n            /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 3:3166:3170  \"true\" */ 0x0c, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ or(and(sload(/** @src 3:3166:3170  \"true\" */ 0x0c), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ not(16711935)), 65537))\n            sstore(/** @src 40:279:345  \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 0x0d, 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80)\n            /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n            let _2 := datasize(\"DeployBasicNft_50422_deployed\")\n            codecopy(_1, dataoffset(\"DeployBasicNft_50422_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 40:\"script/DeployBasicNft.s.sol\"\n    object \"DeployBasicNft_50422_deployed\" {\n        code {\n            {\n                /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x910dde5e {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        mstore(_1, sload(/** @src 40:236:345  \"uint256 public DEFAULT_ANVIL_PRIVATE_KEY = 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 13))\n                        /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                        return(_1, 32)\n                    }\n                    case 0xc0406226 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _4 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 40:437:456  \"vm.startBroadcast()\"\n                        if iszero(extcodesize(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4))\n                        /// @src 40:437:456  \"vm.startBroadcast()\"\n                        {\n                            /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                            revert(_3, _3)\n                        }\n                        /// @src 40:437:456  \"vm.startBroadcast()\"\n                        let _5 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                        /// @src 40:437:456  \"vm.startBroadcast()\"\n                        mstore(_5, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fb5297f))\n                        /// @src 40:437:456  \"vm.startBroadcast()\"\n                        let _6 := call(gas(), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4, _3, /** @src 40:437:456  \"vm.startBroadcast()\" */ _5, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 4, /** @src 40:437:456  \"vm.startBroadcast()\" */ _5, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3)\n                        /// @src 40:437:456  \"vm.startBroadcast()\"\n                        if iszero(_6)\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 40:437:456  \"vm.startBroadcast()\"\n                        if _6\n                        {\n                            finalize_allocation(_5)\n                            /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                            _3 := _3\n                        }\n                        /// @src 40:486:500  \"new BasicNft()\"\n                        let _7 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                        /// @src 40:486:500  \"new BasicNft()\"\n                        let _8 := datasize(\"BasicNft_50752\")\n                        let _9 := add(_7, _8)\n                        if or(gt(_9, 0xffffffffffffffff), lt(_9, _7))\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            mstore(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x4e487b71))\n                            mstore(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 4, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x41)\n                            revert(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x24)\n                        }\n                        /// @src 40:486:500  \"new BasicNft()\"\n                        datacopy(_7, dataoffset(\"BasicNft_50752\"), _8)\n                        let expr_address := create(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 40:486:500  \"new BasicNft()\" */ _7, sub(_9, _7))\n                        if iszero(expr_address)\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos_1 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos_1, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 40:510:528  \"vm.stopBroadcast()\"\n                        if iszero(extcodesize(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4))\n                        /// @src 40:510:528  \"vm.stopBroadcast()\"\n                        {\n                            /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                            revert(_3, _3)\n                        }\n                        /// @src 40:510:528  \"vm.stopBroadcast()\"\n                        let _10 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                        /// @src 40:510:528  \"vm.stopBroadcast()\"\n                        mstore(_10, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n                        /// @src 40:510:528  \"vm.stopBroadcast()\"\n                        let _11 := call(gas(), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4, _3, /** @src 40:510:528  \"vm.stopBroadcast()\" */ _10, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 4, /** @src 40:510:528  \"vm.stopBroadcast()\" */ _10, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3)\n                        /// @src 40:510:528  \"vm.stopBroadcast()\"\n                        if iszero(_11)\n                        {\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            let pos_2 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                            returndatacopy(pos_2, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 40:510:528  \"vm.stopBroadcast()\"\n                        if _11\n                        {\n                            finalize_allocation(_10)\n                            /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                            if _3 { revert(_3, _3) }\n                        }\n                        let memPos := mload(_2)\n                        mstore(memPos, and(expr_address, sub(shl(160, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 1), 1)))\n                        /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                        return(memPos, 32)\n                    }\n                    case 0xe83332fa {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let _12 := sload(/** @src 40:351:377  \"uint256 public deployerKey\" */ 14)\n                        /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _12)\n                        return(memPos_1, 32)\n                    }\n                    case 0xf8ccbf47 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        let value := and(shr(16, sload(/** @src 1:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 0xff)\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, iszero(iszero(value)))\n                        return(memPos_2, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n            function finalize_allocation(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n        }\n        /// @use-src 28:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 29:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 30:\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\", 32:\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 36:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 37:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\", 43:\"src/BasicNft.sol\"\n        object \"BasicNft_50752\" {\n            code {\n                {\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := 64\n                    let newFreePtr := add(_1, _2)\n                    let _3 := sub(shl(64, 1), 1)\n                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                    }\n                    mstore(_2, newFreePtr)\n                    mstore(_1, 5)\n                    let _4 := 32\n                    mstore(add(_1, _4), \"Dogie\")\n                    let memPtr := mload(_2)\n                    let newFreePtr_1 := add(memPtr, _2)\n                    if or(gt(newFreePtr_1, _3), lt(newFreePtr_1, memPtr))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    mstore(_2, newFreePtr_1)\n                    mstore(memPtr, 3)\n                    mstore(add(memPtr, _4), \"DOG\")\n                    let newLen := mload(_1)\n                    if gt(newLen, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    /// @src -1:-1:-1\n                    let _5 := 0\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _6 := sload(/** @src -1:-1:-1 */ _5)\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let length := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _7 := 1\n                    length := shr(_7, _6)\n                    let outOfPlaceEncoding := and(_6, _7)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    let _8 := 31\n                    if gt(length, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, _5)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let data := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let deleteStart := add(data, shr(5, add(newLen, _8)))\n                        if lt(newLen, _4) { deleteStart := data }\n                        let _9 := add(data, shr(5, add(length, _8)))\n                        let start := deleteStart\n                        for { } lt(start, _9) { start := add(start, _7) }\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let srcOffset := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    srcOffset := _4\n                    switch gt(newLen, _8)\n                    case 1 {\n                        let loopEnd := and(newLen, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, _5)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let dstPtr := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let i := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        for { } lt(i, loopEnd) { i := add(i, _4) }\n                        {\n                            sstore(dstPtr, mload(add(_1, srcOffset)))\n                            dstPtr := add(dstPtr, _7)\n                            srcOffset := add(srcOffset, _4)\n                        }\n                        if lt(loopEnd, newLen)\n                        {\n                            let lastValue := mload(add(_1, srcOffset))\n                            sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                        }\n                        sstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ add(shl(_7, newLen), _7))\n                    }\n                    default {\n                        let value := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        if newLen\n                        {\n                            value := mload(add(_1, srcOffset))\n                        }\n                        sstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_7, newLen)))\n                    }\n                    let newLen_1 := mload(memPtr)\n                    if gt(newLen_1, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    let _10 := sload(_7)\n                    let length_1 := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    length_1 := shr(_7, _10)\n                    let outOfPlaceEncoding_1 := and(_10, _7)\n                    if iszero(outOfPlaceEncoding_1)\n                    {\n                        length_1 := and(length_1, 0x7f)\n                    }\n                    if eq(outOfPlaceEncoding_1, lt(length_1, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    if gt(length_1, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _7)\n                        let data_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _8)))\n                        if lt(newLen_1, _4) { deleteStart_1 := data_1 }\n                        let _11 := add(data_1, shr(5, add(length_1, _8)))\n                        let start_1 := deleteStart_1\n                        for { } lt(start_1, _11) { start_1 := add(start_1, _7) }\n                        {\n                            sstore(start_1, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let srcOffset_1 := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    srcOffset_1 := _4\n                    switch gt(newLen_1, _8)\n                    case 1 {\n                        let loopEnd_1 := and(newLen_1, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _7)\n                        let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let i_1 := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _4) }\n                        {\n                            sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                            dstPtr_1 := add(dstPtr_1, _7)\n                            srcOffset_1 := add(srcOffset_1, _4)\n                        }\n                        if lt(loopEnd_1, newLen_1)\n                        {\n                            let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                            sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                        }\n                        sstore(_7, add(shl(_7, newLen_1), _7))\n                    }\n                    default {\n                        let value_1 := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        if newLen_1\n                        {\n                            value_1 := mload(add(memPtr, srcOffset_1))\n                        }\n                        sstore(_7, or(and(value_1, not(shr(shl(3, newLen_1), not(0)))), shl(_7, newLen_1)))\n                    }\n                    sstore(/** @src 43:361:379  \"s_tokenCounter = 0\" */ 0x07, /** @src -1:-1:-1 */ _5)\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _12 := mload(_2)\n                    let _13 := datasize(\"BasicNft_50752_deployed\")\n                    codecopy(_12, dataoffset(\"BasicNft_50752_deployed\"), _13)\n                    return(_12, _13)\n                }\n            }\n            /// @use-src 29:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 36:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 43:\"src/BasicNft.sol\"\n            object \"BasicNft_50752_deployed\" {\n                code {\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x01ffc9a7 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value := calldataload(_3)\n                                let _5 := and(value, shl(224, 0xffffffff))\n                                if iszero(eq(value, _5)) { revert(_4, _4) }\n                                /// @src 29:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                let expr := /** @src 29:1698:1738  \"interfaceId == type(IERC721).interfaceId\" */ eq(_5, /** @src 29:1713:1738  \"type(IERC721).interfaceId\" */ shl(224, 0x80ac58cd))\n                                /// @src 29:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                if iszero(expr)\n                                {\n                                    expr := /** @src 29:1754:1802  \"interfaceId == type(IERC721Metadata).interfaceId\" */ eq(_5, /** @src 29:1769:1802  \"type(IERC721Metadata).interfaceId\" */ shl(224, 0x5b5e139f))\n                                }\n                                /// @src 29:1698:1854  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                let expr_1 := expr\n                                if iszero(expr)\n                                {\n                                    expr_1 := /** @src 36:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_5, /** @src 36:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                }\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_1, iszero(iszero(expr_1)))\n                                return(_1, 32)\n                            }\n                            case 0x06fdde03 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr := mload(_2)\n                                let ret := _4\n                                let slotValue := sload(_4)\n                                let length := extract_byte_array_length(slotValue)\n                                mstore(memPtr, length)\n                                let _6 := 0x20\n                                let _7 := 1\n                                switch and(slotValue, _7)\n                                case 0 {\n                                    mstore(add(memPtr, _6), and(slotValue, not(255)))\n                                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _6)\n                                }\n                                case 1 {\n                                    mstore(_4, _4)\n                                    let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _6) }\n                                    {\n                                        mstore(add(add(memPtr, i), _6), sload(dataPos))\n                                        dataPos := add(dataPos, _7)\n                                    }\n                                    ret := add(add(memPtr, i), _6)\n                                }\n                                finalize_allocation(memPtr, sub(ret, memPtr))\n                                let memPos := mload(_2)\n                                mstore(memPos, _6)\n                                return(memPos, sub(abi_encode_string(memPtr, add(memPos, _6)), memPos))\n                            }\n                            case 0x081812fc {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value_1 := calldataload(_3)\n                                /// @src 29:3583:3605  \"_requireOwned(tokenId)\"\n                                pop(fun_requireOwned(value_1))\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_4, value_1)\n                                mstore(32, _3)\n                                let cleaned := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, cleaned)\n                                return(memPos_1, 32)\n                            }\n                            case 0x095ea7b3 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0 := abi_decode_address()\n                                let value_2 := calldataload(36)\n                                /// @src 29:14943:14965  \"_requireOwned(tokenId)\"\n                                let expr_2 := fun_requireOwned(value_2)\n                                /// @src 29:15093:15128  \"auth != address(0) && owner != auth\"\n                                let expr_3 := /** @src 29:15093:15111  \"auth != address(0)\" */ iszero(iszero(/** @src 34:735:745  \"msg.sender\" */ caller()))\n                                /// @src 29:15093:15128  \"auth != address(0) && owner != auth\"\n                                if expr_3\n                                {\n                                    expr_3 := /** @src 29:15115:15128  \"owner != auth\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:15115:15128  \"owner != auth\" */ expr_2, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1)), /** @src 34:735:745  \"msg.sender\" */ caller()))\n                                }\n                                /// @src 29:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                let expr_4 := expr_3\n                                if expr_3\n                                {\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(_4, and(expr_2, sub(shl(160, 1), 1)))\n                                    mstore(0x20, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let _8 := keccak256(_4, _2)\n                                    mstore(_4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(0x20, _8)\n                                    /// @src 29:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                    expr_4 := /** @src 29:15132:15162  \"!isApprovedForAll(owner, auth)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(_4, _2)), 0xff))\n                                }\n                                /// @src 29:15089:15231  \"if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {...\"\n                                if expr_4\n                                {\n                                    /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    mstore(_9, shl(224, 0xa9fbf51f))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:15189:15216  \"ERC721InvalidApprover(auth)\" */ add(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                let _10 := sub(shl(160, 1), 1)\n                                let _11 := and(/** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ value0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _10)\n                                /// @src 29:15283:15311  \"Approval(owner, to, tokenId)\"\n                                log4(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, _4, /** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ expr_2, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _10), _11, /** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ value_2)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_4, value_2)\n                                mstore(0x20, _3)\n                                let _12 := keccak256(_4, _2)\n                                sstore(_12, or(and(sload(_12), shl(160, 0xffffffffffffffffffffffff)), _11))\n                                return(_4, _4)\n                            }\n                            case 0x23b872dd {\n                                if callvalue() { revert(_4, _4) }\n                                let param, param_1, param_2 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                fun_transferFrom(param, param_1, param_2)\n                                return(_4, _4)\n                            }\n                            case 0x42842e0e {\n                                if callvalue() { revert(_4, _4) }\n                                let param_3, param_4, param_5 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                let memPtr_1 := mload(_2)\n                                finalize_allocation_14953(memPtr_1)\n                                mstore(memPtr_1, _4)\n                                /// @src 29:5121:5128  \"tokenId\"\n                                fun_transferFrom(param_3, param_4, param_5)\n                                /// @src 29:5181:5185  \"data\"\n                                fun_checkOnERC721Received(param_3, param_4, param_5, memPtr_1)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                return(_4, _4)\n                            }\n                            case 0x6352211e {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                /// @src 29:2267:2296  \"return _requireOwned(tokenId)\"\n                                let var := /** @src 29:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ calldataload(_3))\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, and(var, sub(shl(160, 1), 1)))\n                                return(memPos_2, 32)\n                            }\n                            case 0x6e02007d {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _13 := sload(/** @src 43:908:922  \"s_tokenCounter\" */ 0x07)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let memPos_3 := mload(_2)\n                                mstore(memPos_3, _13)\n                                return(memPos_3, 32)\n                            }\n                            case 0x70a08231 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let _14 := and(abi_decode_address(), sub(shl(160, 1), 1))\n                                /// @src 29:2002:2089  \"if (owner == address(0)) {...\"\n                                if /** @src 29:2006:2025  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _14)\n                                /// @src 29:2002:2089  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    let _15 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    mstore(_15, shl(226, 0x22718ad9))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\" */ add(_15, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                    /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    revert(_15, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                mstore(_4, _14)\n                                mstore(32, /** @src 29:2105:2114  \"_balances\" */ 0x03)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _16 := sload(keccak256(_4, _2))\n                                let memPos_4 := mload(_2)\n                                mstore(memPos_4, _16)\n                                return(memPos_4, 32)\n                            }\n                            case 0x95d89b41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr_2 := mload(_2)\n                                let ret_1 := _4\n                                /// @src 29:2597:2604  \"_symbol\"\n                                let _17 := 0x01\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let slotValue_1 := sload(/** @src 29:2597:2604  \"_symbol\" */ _17)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let length_1 := extract_byte_array_length(slotValue_1)\n                                mstore(memPtr_2, length_1)\n                                let _18 := 0x20\n                                switch and(slotValue_1, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                case /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0 {\n                                    mstore(add(memPtr_2, _18), and(slotValue_1, not(255)))\n                                    ret_1 := add(add(memPtr_2, shl(5, iszero(iszero(length_1)))), _18)\n                                }\n                                case 1 {\n                                    mstore(_4, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let dataPos_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                                    let i_1 := _4\n                                    for { } lt(i_1, length_1) { i_1 := add(i_1, _18) }\n                                    {\n                                        mstore(add(add(memPtr_2, i_1), _18), sload(dataPos_1))\n                                        dataPos_1 := add(dataPos_1, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                    }\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    ret_1 := add(add(memPtr_2, i_1), _18)\n                                }\n                                finalize_allocation(memPtr_2, sub(ret_1, memPtr_2))\n                                let memPos_5 := mload(_2)\n                                mstore(memPos_5, _18)\n                                return(memPos_5, sub(abi_encode_string(memPtr_2, add(memPos_5, _18)), memPos_5))\n                            }\n                            case 0xa22cb465 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_1 := abi_decode_address()\n                                let value_3 := calldataload(36)\n                                let _19 := iszero(iszero(value_3))\n                                if iszero(eq(value_3, _19)) { revert(_4, _4) }\n                                let _20 := and(/** @src 29:15698:15720  \"operator == address(0)\" */ value0_1, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 29:15694:15785  \"if (operator == address(0)) {...\"\n                                if /** @src 29:15698:15720  \"operator == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _20)\n                                /// @src 29:15694:15785  \"if (operator == address(0)) {...\"\n                                {\n                                    /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    let _21 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    mstore(_21, shl(227, 0x0b611743))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:15743:15774  \"ERC721InvalidOperator(operator)\" */ add(_21, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _20)\n                                    /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    revert(_21, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                mstore(_4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(32, /** @src 29:15794:15812  \"_operatorApprovals\" */ 0x05)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _22 := keccak256(_4, _2)\n                                mstore(_4, _20)\n                                mstore(32, _22)\n                                let dataSlot := keccak256(_4, _2)\n                                let value_4 := and(sload(dataSlot), not(255))\n                                sstore(dataSlot, or(value_4, and(_19, 255)))\n                                /// @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                let _23 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                mstore(_23, _19)\n                                /// @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                log3(_23, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 32, /** @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, /** @src 34:735:745  \"msg.sender\" */ caller(), /** @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ _20)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                return(_4, _4)\n                            }\n                            case 0xb88d4fde {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                                let value0_2 := abi_decode_address()\n                                let value1 := abi_decode_address_7869()\n                                let value_5 := calldataload(68)\n                                let offset := calldataload(100)\n                                if gt(offset, 0xffffffffffffffff) { revert(_4, _4) }\n                                if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                                let array := abi_decode_available_length_bytes(add(offset, 36), calldataload(add(_3, offset)), calldatasize())\n                                /// @src 29:5121:5128  \"tokenId\"\n                                fun_transferFrom(value0_2, value1, value_5)\n                                /// @src 29:5181:5185  \"data\"\n                                fun_checkOnERC721Received(value0_2, value1, value_5, array)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                return(_4, _4)\n                            }\n                            case 0xc87b56dd {\n                                if callvalue() { revert(_4, _4) }\n                                let _24 := 32\n                                if slt(add(calldatasize(), not(3)), _24) { revert(_4, _4) }\n                                let value_6 := calldataload(_3)\n                                /// @src 43:686:782  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                if /** @src 43:690:720  \"ownerOf(tokenId) == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 43:690:706  \"ownerOf(tokenId)\" */ value_6), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1)))\n                                /// @src 43:686:782  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                {\n                                    /// @src 43:743:771  \"BasicNft__TokenUriNotFound()\"\n                                    let _25 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 43:743:771  \"BasicNft__TokenUriNotFound()\"\n                                    mstore(_25, shl(224, 0x7598996f))\n                                    revert(_25, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3)\n                                }\n                                mstore(_4, value_6)\n                                mstore(_24, /** @src 43:798:812  \"s_tokenIdToUri\" */ 0x06)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dataSlot_1 := keccak256(_4, _2)\n                                let memPtr_3 := mload(_2)\n                                let ret_2 := _4\n                                let slotValue_2 := sload(dataSlot_1)\n                                let length_2 := extract_byte_array_length(slotValue_2)\n                                mstore(memPtr_3, length_2)\n                                let _26 := 1\n                                switch and(slotValue_2, _26)\n                                case 0 {\n                                    mstore(add(memPtr_3, _24), and(slotValue_2, not(255)))\n                                    ret_2 := add(add(memPtr_3, shl(5, iszero(iszero(length_2)))), _24)\n                                }\n                                case 1 {\n                                    mstore(_4, dataSlot_1)\n                                    let dataPos_2 := keccak256(_4, _24)\n                                    let i_2 := _4\n                                    for { } lt(i_2, length_2) { i_2 := add(i_2, _24) }\n                                    {\n                                        mstore(add(add(memPtr_3, i_2), _24), sload(dataPos_2))\n                                        dataPos_2 := add(dataPos_2, _26)\n                                    }\n                                    ret_2 := add(add(memPtr_3, i_2), _24)\n                                }\n                                finalize_allocation(memPtr_3, sub(ret_2, memPtr_3))\n                                let memPos_6 := mload(_2)\n                                mstore(memPos_6, _24)\n                                return(memPos_6, sub(abi_encode_string(memPtr_3, add(memPos_6, _24)), memPos_6))\n                            }\n                            case 0xda86f4a9 {\n                                if callvalue() { revert(_4, _4) }\n                                let _27 := 32\n                                if slt(add(calldatasize(), not(3)), _27) { revert(_4, _4) }\n                                let offset_1 := calldataload(_3)\n                                let _28 := 0xffffffffffffffff\n                                if gt(offset_1, _28) { revert(_4, _4) }\n                                if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_4, _4) }\n                                let _29 := 36\n                                let array_1 := abi_decode_available_length_bytes(add(offset_1, _29), calldataload(add(_3, offset_1)), calldatasize())\n                                mstore(_4, sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07))\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_27, /** @src 43:450:464  \"s_tokenIdToUri\" */ 0x06)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dataSlot_2 := keccak256(_4, _2)\n                                let newLen := mload(array_1)\n                                if gt(newLen, _28)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, _29)\n                                }\n                                let _30 := extract_byte_array_length(sload(dataSlot_2))\n                                if gt(_30, 0x1f)\n                                {\n                                    mstore(_4, dataSlot_2)\n                                    let data := keccak256(_4, _27)\n                                    let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                                    if lt(newLen, _27) { deleteStart := data }\n                                    let _31 := add(data, shr(5, add(_30, 0x1f)))\n                                    let start := deleteStart\n                                    for { } lt(start, _31) { start := add(start, 1) }\n                                    { sstore(start, _4) }\n                                }\n                                let srcOffset := _4\n                                srcOffset := _27\n                                switch gt(newLen, 0x1f)\n                                case 1 {\n                                    let loopEnd := and(newLen, not(31))\n                                    mstore(_4, dataSlot_2)\n                                    let dstPtr := keccak256(_4, _27)\n                                    let i_3 := _4\n                                    for { } lt(i_3, loopEnd) { i_3 := add(i_3, _27) }\n                                    {\n                                        sstore(dstPtr, mload(add(array_1, srcOffset)))\n                                        dstPtr := add(dstPtr, 1)\n                                        srcOffset := add(srcOffset, _27)\n                                    }\n                                    if lt(loopEnd, newLen)\n                                    {\n                                        let lastValue := mload(add(array_1, srcOffset))\n                                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                    }\n                                    sstore(dataSlot_2, add(shl(1, newLen), 1))\n                                }\n                                default {\n                                    let value_7 := _4\n                                    if newLen\n                                    {\n                                        value_7 := mload(add(array_1, srcOffset))\n                                    }\n                                    sstore(dataSlot_2, or(and(value_7, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                                }\n                                let _32 := sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let memPtr_4 := mload(_2)\n                                finalize_allocation_14953(memPtr_4)\n                                mstore(memPtr_4, _4)\n                                /// @src 29:10018:10105  \"if (to == address(0)) {...\"\n                                if /** @src 29:10022:10038  \"to == address(0)\" */ iszero(/** @src 43:511:521  \"msg.sender\" */ caller())\n                                /// @src 29:10018:10105  \"if (to == address(0)) {...\"\n                                {\n                                    /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    let _33 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    mstore(_33, shl(225, 0x32505749))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ add(_33, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                    /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    revert(_33, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                }\n                                mstore(_4, _32)\n                                mstore(_27, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let cleaned_1 := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                /// @src 29:9161:9179  \"from != address(0)\"\n                                let _34 := iszero(iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned_1))\n                                /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                if /** @src 29:9161:9179  \"from != address(0)\" */ _34\n                                /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                {\n                                    /// @src 29:9319:9324  \"false\"\n                                    fun_approve(_32)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(_4, cleaned_1)\n                                    mstore(_27, /** @src 29:9368:9377  \"_balances\" */ 0x03)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let dataSlot_3 := keccak256(_4, _2)\n                                    sstore(dataSlot_3, add(sload(/** @src 29:9368:9388  \"_balances[from] -= 1\" */ dataSlot_3), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ not(0)))\n                                }\n                                mstore(_4, /** @src 43:511:521  \"msg.sender\" */ caller())\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_27, /** @src 29:9487:9496  \"_balances\" */ 0x03)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dataSlot_4 := keccak256(_4, _2)\n                                sstore(dataSlot_4, add(sload(/** @src 29:9487:9505  \"_balances[to] += 1\" */ dataSlot_4), /** @src 29:9427:9443  \"to != address(0)\" */ 1))\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_4, _32)\n                                mstore(_27, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _35 := keccak256(_4, _2)\n                                sstore(_35, or(and(sload(_35), shl(160, 0xffffffffffffffffffffffff)), /** @src 43:511:521  \"msg.sender\" */ caller()))\n                                /// @src 29:9577:9604  \"Transfer(from, to, tokenId)\"\n                                log4(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, _4, /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned_1, /** @src 43:511:521  \"msg.sender\" */ caller(), /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ _32)\n                                /// @src 29:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                if /** @src 29:10184:10211  \"previousOwner != address(0)\" */ _34\n                                /// @src 29:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                {\n                                    /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    let _36 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    mstore(_36, shl(225, 0x39e35637))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:10234:10265  \"ERC721InvalidSender(address(0))\" */ add(_36, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                    /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    revert(_36, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                }\n                                /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                if /** @src 29:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 29:17034:17048  \"to.code.length\" */ extcodesize(/** @src 43:511:521  \"msg.sender\" */ caller())))\n                                /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                {\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let _37 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    let _38 := shl(225, 0x0a85bd01)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    mstore(_37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _38)\n                                    mstore(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29), _4)\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), _32)\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100), 128)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let trySuccessCondition := call(gas(), /** @src 43:511:521  \"msg.sender\" */ caller(), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, sub(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ abi_encode_string(memPtr_4, add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 132)), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37), _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let expr_5 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    if trySuccessCondition\n                                    {\n                                        let _39 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27\n                                        /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        if gt(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ returndatasize()) { _39 := returndatasize() }\n                                        finalize_allocation(_37, _39)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        if slt(sub(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_37, _39), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _37), _27) { revert(_4, _4) }\n                                        let value_8 := mload(_37)\n                                        if iszero(eq(value_8, and(value_8, shl(224, 0xffffffff)))) { revert(_4, _4) }\n                                        /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        expr_5 := value_8\n                                    }\n                                    /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    switch iszero(trySuccessCondition)\n                                    case 0 {\n                                        /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        if /** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr_5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0xffffffff)), _38))\n                                        /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        {\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            let _40 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_40, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_40, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            revert(_40, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                        }\n                                    }\n                                    default /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    {\n                                        /// @src 29:17331:17684  \"catch (bytes memory reason) {...\"\n                                        let data_1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4\n                                        switch returndatasize()\n                                        case 0 { data_1 := 96 }\n                                        default {\n                                            let _41 := returndatasize()\n                                            let _42 := array_allocation_size_bytes(_41)\n                                            let memPtr_5 := mload(_2)\n                                            finalize_allocation(memPtr_5, _42)\n                                            mstore(memPtr_5, _41)\n                                            data_1 := memPtr_5\n                                            returndatacopy(add(memPtr_5, _27), _4, returndatasize())\n                                        }\n                                        let _43 := mload(/** @src 29:17381:17394  \"reason.length\" */ data_1)\n                                        /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                        switch /** @src 29:17381:17399  \"reason.length == 0\" */ iszero(_43)\n                                        case /** @src 29:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                            /// @src 29:17557:17652  \"assembly {...\"\n                                            revert(add(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27, /** @src 29:17557:17652  \"assembly {...\" */ data_1), _43)\n                                        }\n                                        default /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                        {\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            let _44 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_44, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_44, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            revert(_44, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                        }\n                                    }\n                                }\n                                let _45 := sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let sum := add(_45, /** @src 29:9427:9443  \"to != address(0)\" */ 1)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                if gt(_45, sum)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x11)\n                                    revert(_4, _29)\n                                }\n                                sstore(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sum)\n                                return(_4, _4)\n                            }\n                            case 0xe985e9c5 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_3 := abi_decode_address()\n                                let value1_1 := abi_decode_address_7869()\n                                let _46 := sub(shl(160, 1), 1)\n                                mstore(_4, and(value0_3, _46))\n                                mstore(32, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _47 := keccak256(_4, _2)\n                                mstore(_4, and(value1_1, _46))\n                                mstore(32, _47)\n                                let value_9 := and(sload(keccak256(_4, _2)), 0xff)\n                                let memPos_7 := mload(_2)\n                                mstore(memPos_7, iszero(iszero(value_9)))\n                                return(memPos_7, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function abi_encode_string(value, pos) -> end\n                    {\n                        let length := mload(value)\n                        mstore(pos, length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 0x20) }\n                        {\n                            let _1 := 0x20\n                            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                        }\n                        mstore(add(add(pos, length), 0x20), 0)\n                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                    }\n                    function abi_decode_address() -> value\n                    {\n                        value := calldataload(4)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_address_7869() -> value\n                    {\n                        value := calldataload(36)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_addresst_addresst_uint256(dataEnd) -> value0, value1, value2\n                    {\n                        if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                        let value := calldataload(4)\n                        let _1 := sub(shl(160, 1), 1)\n                        if iszero(eq(value, and(value, _1)))\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        value0 := value\n                        let value_1 := calldataload(36)\n                        if iszero(eq(value_1, and(value_1, _1)))\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        value1 := value_1\n                        value2 := calldataload(68)\n                    }\n                    function finalize_allocation_14953(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 0x20)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size := add(and(add(length, 31), not(31)), 0x20)\n                    }\n                    function abi_decode_available_length_bytes(src, length, end) -> array\n                    {\n                        let _1 := array_allocation_size_bytes(length)\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, _1)\n                        array := memPtr\n                        mstore(memPtr, length)\n                        if gt(add(src, length), end)\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        calldatacopy(add(memPtr, 0x20), src, length)\n                        mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                    }\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    function extract_byte_array_length(data) -> length\n                    {\n                        length := shr(1, data)\n                        let outOfPlaceEncoding := and(data, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                    }\n                    /// @ast-id 47997 @src 29:4143:4721  \"function transferFrom(address from, address to, uint256 tokenId) public virtual {...\"\n                    function fun_transferFrom(var_from, var_to, var_tokenId)\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _1 := sub(shl(160, 1), 1)\n                        let _2 := and(/** @src 29:4237:4253  \"to == address(0)\" */ var_to, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                        /// @src 29:4233:4320  \"if (to == address(0)) {...\"\n                        if /** @src 29:4237:4253  \"to == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                        /// @src 29:4233:4320  \"if (to == address(0)) {...\"\n                        {\n                            /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            let _3 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                            /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            mstore(_3, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\" */ add(_3, 4), /** @src 29:4251:4252  \"0\" */ 0x00)\n                            /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            revert(_3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                        }\n                        /// @src -1:-1:-1\n                        let _4 := 0\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                        let _5 := 0x20\n                        mstore(_5, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _6 := 0x40\n                        let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), _1)\n                        /// @src 29:9035:9053  \"auth != address(0)\"\n                        let _7 := iszero(iszero(/** @src 34:735:745  \"msg.sender\" */ caller()))\n                        /// @src 29:9031:9117  \"if (auth != address(0)) {...\"\n                        if /** @src 29:9035:9053  \"auth != address(0)\" */ _7\n                        /// @src 29:9031:9117  \"if (auth != address(0)) {...\"\n                        {\n                            /// @src 29:6514:6641  \"spender != address(0) &&...\"\n                            let expr := _7\n                            if _7\n                            {\n                                /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                let expr_1 := /** @src 29:6552:6568  \"owner == spender\" */ eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                if iszero(expr_1)\n                                {\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                    mstore(_5, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let _8 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(_5, _8)\n                                    /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                    expr_1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), 0xff)\n                                }\n                                /// @src 29:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                let expr_2 := expr_1\n                                if iszero(expr_1)\n                                {\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                    mstore(_5, /** @src 29:6034:6049  \"_tokenApprovals\" */ 0x04)\n                                    /// @src 29:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                    expr_2 := /** @src 29:6608:6640  \"_getApproved(tokenId) == spender\" */ eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), _1), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                }\n                                /// @src 29:6514:6641  \"spender != address(0) &&...\"\n                                expr := expr_2\n                            }\n                            /// @src 29:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                            if /** @src 29:7193:7232  \"!_isAuthorized(owner, spender, tokenId)\" */ iszero(/** @src 29:7194:7232  \"_isAuthorized(owner, spender, tokenId)\" */ expr)\n                            /// @src 29:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                            {\n                                /// @src 29:7248:7434  \"if (owner == address(0)) {...\"\n                                switch /** @src 29:7252:7271  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                case /** @src 29:7248:7434  \"if (owner == address(0)) {...\" */ 0 {\n                                    /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                                    /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    mstore(_9, shl(224, 0x177e802f))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ add(_9, 4), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(add(/** @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ _9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), var_tokenId)\n                                    /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68)\n                                }\n                                default /// @src 29:7248:7434  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    let _10 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                                    /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    mstore(_10, shl(224, 0x7e273289))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ add(_10, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                    /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    revert(_10, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                            }\n                        }\n                        /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                        if /** @src 29:9161:9179  \"from != address(0)\" */ iszero(iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned))\n                        /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                        {\n                            /// @src 29:9319:9324  \"false\"\n                            fun_approve(var_tokenId)\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                            mstore(_5, /** @src 29:9368:9377  \"_balances\" */ 0x03)\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let dataSlot := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                            sstore(dataSlot, add(sload(/** @src 29:9368:9388  \"_balances[from] -= 1\" */ dataSlot), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ not(0)))\n                        }\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                        mstore(_5, /** @src 29:9487:9496  \"_balances\" */ 0x03)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                        sstore(dataSlot_1, add(sload(/** @src 29:9487:9505  \"_balances[to] += 1\" */ dataSlot_1), /** @src 29:9427:9443  \"to != address(0)\" */ 1))\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                        mstore(_5, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _11 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                        sstore(_11, or(and(sload(_11), shl(160, 0xffffffffffffffffffffffff)), _2))\n                        /// @src 29:9577:9604  \"Transfer(from, to, tokenId)\"\n                        log4(/** @src -1:-1:-1 */ _4, _4, /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned, _2, var_tokenId)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _12 := and(/** @src 29:4610:4631  \"previousOwner != from\" */ var_from, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                        /// @src 29:4606:4715  \"if (previousOwner != from) {...\"\n                        if /** @src 29:4610:4631  \"previousOwner != from\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned, _12))\n                        /// @src 29:4606:4715  \"if (previousOwner != from) {...\"\n                        {\n                            /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            let _13 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                            /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            mstore(_13, shl(224, 0x64283d7b))\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ add(_13, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _12)\n                            mstore(add(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), var_tokenId)\n                            mstore(add(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), cleaned)\n                            /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            revert(_13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100)\n                        }\n                    }\n                    /// @ast-id 48558 @src 29:14720:15382  \"function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {...\"\n                    function fun_approve(var_tokenId)\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(0, var_tokenId)\n                        mstore(0x20, /** @src 29:15346:15361  \"_tokenApprovals\" */ 0x04)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _1 := keccak256(0, 0x40)\n                        sstore(_1, and(sload(_1), shl(160, 0xffffffffffffffffffffffff)))\n                    }\n                    /// @ast-id 48624 @src 29:16138:16379  \"function _requireOwned(uint256 tokenId) internal view returns (address) {...\"\n                    function fun_requireOwned(var_tokenId) -> var\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                        mstore(0x20, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x40)), sub(shl(160, 1), 1))\n                        /// @src 29:16263:16351  \"if (owner == address(0)) {...\"\n                        if /** @src 29:16267:16286  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                        /// @src 29:16263:16351  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            let _1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(0x40)\n                            /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            mstore(_1, /** @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ shl(224, 0x7e273289))\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\" */ add(_1, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                            /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            revert(_1, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                        }\n                        /// @src 29:16360:16372  \"return owner\"\n                        var := cleaned\n                    }\n                    /// @ast-id 48688 @src 29:16918:17700  \"function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {...\"\n                    function fun_checkOnERC721Received(var_from, var_to, var_tokenId, var_data_mpos)\n                    {\n                        /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                        if /** @src 29:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 29:17034:17048  \"to.code.length\" */ extcodesize(var_to)))\n                        /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                        {\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let _1 := sub(shl(160, 1), 1)\n                            let _2 := and(/** @src 29:17072:17091  \"IERC721Receiver(to)\" */ var_to, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let _3 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                            let _4 := shl(225, 0x0a85bd01)\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            mstore(_3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                            mstore(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, 4), /** @src 34:735:745  \"msg.sender\" */ caller())\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), and(var_from, _1))\n                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), var_tokenId)\n                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100), 128)\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let _5 := 32\n                            let _6 := sub(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ abi_encode_string(var_data_mpos, add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 132)), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3)\n                            /// @src 29:17051:17052  \"0\"\n                            let _7 := 0x00\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let trySuccessCondition := call(gas(), _2, /** @src 29:17051:17052  \"0\" */ _7, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, _6, _3, _5)\n                            let expr := /** @src 29:17051:17052  \"0\" */ _7\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            if trySuccessCondition\n                            {\n                                let _8 := _5\n                                if gt(_5, returndatasize()) { _8 := returndatasize() }\n                                finalize_allocation(_3, _8)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                if slt(sub(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, _8), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                {\n                                    revert(/** @src 29:17051:17052  \"0\" */ _7, _7)\n                                }\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let value := mload(_3)\n                                if iszero(eq(value, and(value, shl(224, 0xffffffff))))\n                                {\n                                    revert(/** @src 29:17051:17052  \"0\" */ _7, _7)\n                                }\n                                /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                expr := value\n                            }\n                            /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                            switch iszero(trySuccessCondition)\n                            case 0 {\n                                /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                if /** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0xffffffff)), _4))\n                                /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                {\n                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    mstore(_9, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_9, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                            }\n                            default /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                            {\n                                /// @src 29:17331:17684  \"catch (bytes memory reason) {...\"\n                                let data := /** @src 29:17051:17052  \"0\" */ _7\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                switch returndatasize()\n                                case 0 { data := 96 }\n                                default {\n                                    let _10 := returndatasize()\n                                    let _11 := array_allocation_size_bytes(_10)\n                                    let memPtr := mload(64)\n                                    finalize_allocation(memPtr, _11)\n                                    mstore(memPtr, _10)\n                                    data := memPtr\n                                    returndatacopy(add(memPtr, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5), /** @src 29:17051:17052  \"0\" */ _7, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ returndatasize())\n                                }\n                                let _12 := mload(/** @src 29:17381:17394  \"reason.length\" */ data)\n                                /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                switch /** @src 29:17381:17399  \"reason.length == 0\" */ iszero(_12)\n                                case /** @src 29:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                    /// @src 29:17557:17652  \"assembly {...\"\n                                    revert(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5, /** @src 29:17557:17652  \"assembly {...\" */ data), _12)\n                                }\n                                default /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                {\n                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    let _13 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    mstore(_13, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_13, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    revert(_13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                            }\n                        }\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000814000a\"\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000814000a\"\n    }\n}\n","hash":"0100006bff5413d8b428de93e30da9357ea26082606e96551b69c7d2c06f72cc","factoryDependencies":{"0100024102d875090b6b9cc1edad56782a1343cbeb68eb20263d9d2f402f09ca":"src/BasicNft.sol:BasicNft"},"id":40}