{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"BasicNftTest.t.sol:BasicNftTest\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_24\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_201\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r5\n\tjump.le\t@.BB0_26\n\tsub.s!\t@CPI0_3[0], r2, r1\n\tjump.gt\t@.BB0_47\n\tsub.s!\t@CPI0_11[0], r2, r1\n\tjump.gt\t@.BB0_64\n\tsub.s!\t@CPI0_15[0], r2, r1\n\tjump.eq\t@.BB0_103\n\tsub.s!\t@CPI0_16[0], r2, r1\n\tjump.eq\t@.BB0_119\n\tsub.s!\t@CPI0_17[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t26, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_40[0], r5, r2\n\tjump.gt\t@.BB0_192\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_41[0], r2, r2\n\tsub.s!\t@CPI0_42[0], r2, r3\n\tjump.gt\t@.BB0_192\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_161\n\tadd\t128, r0, r6\n\tadd\t@CPI0_49[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_13:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_343\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_19\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[13]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr6, r0, stack-[12]\n\tadd\tr7, r0, stack-[14]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[12], r0, r6\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_20\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_18:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_18\n\tjump\t@.BB0_21\n.BB0_19:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_21\n.BB0_20:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n.BB0_21:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r3\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tadd\t32, r6, r6\n\tst.1\t64, r1\n\tst.1\tr6, r9\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_13\n\tjump\t@.BB0_160\n.BB0_24:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t30, r0, r1\n\tsload\tr1, r2\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t324, r0, r1\n\tadd\t31, r0, r2\n\tsstore\tr2, r1\n\tadd\t300, r0, r1\n\tadd\t32, r0, r2\n\tsstore\tr2, r1\n\tadd\t260, r0, r1\n\tadd\t33, r0, r3\n\tsstore\tr3, r1\n\tst.2\t256, r2\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_26:\n\tsub.s!\t@CPI0_18[0], r2, r4\n\tjump.le\t@.BB0_53\n\tsub.s!\t@CPI0_19[0], r2, r1\n\tjump.gt\t@.BB0_83\n\tsub.s!\t@CPI0_23[0], r2, r1\n\tjump.eq\t@.BB0_121\n\tsub.s!\t@CPI0_24[0], r2, r1\n\tjump.eq\t@.BB0_124\n\tsub.s!\t@CPI0_25[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t@CPI0_50[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_37[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_176\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_201\n\tld.1\t64, r4\n\tadd\t@CPI0_52[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\t4, r4, r1\n\tadd\t1, r0, r2\n\tadd\tr2, r0, stack-[12]\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_53[0], r1, r1\n\tadd\t@CPI0_37[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_236\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_40[0], r1, r1\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[14], r0, r2\n\tst.1\t64, r2\n\tadd\t34, r0, r1\n\tadd\tr1, r0, stack-[10]\n\tsload\tr1, r1\n\tand\t@CPI0_33[0], r1, stack-[11]\n\tsub.s!\t@CPI0_42[0], r2, r1\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[14], r0, r3\n\tadd\t128, r3, r1\n\tst.1\t64, r1\n\tadd\t96, r3, r1\n\tadd\t@CPI0_54[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r3, r1\n\tadd\t@CPI0_55[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t87, r0, r1\n\tst.1\tr3, r1\n\tadd\t@CPI0_56[0], r0, r1\n\tadd\tstack-[13], r0, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_50[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[11], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_176\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_201\n\tld.1\t64, r3\n\tadd\t@CPI0_57[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r2\n\tadd\t32, r0, r1\n\tadd\tr2, r0, stack-[8]\n\tst.1\tr2, r1\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tadd\t36, r3, r2\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[9]\n\tadd\t68, r3, r2\n\tsub!\tr1, r0, r3\n\tadd\tstack-[13], r0, r6\n\tjump.eq\t@.BB0_42\n\tadd\tr0, r0, r3\n.BB0_41:\n\tadd\tr3, r2, r4\n\tadd\tr3, r6, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_41\n.BB0_42:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr2\n\tadd\tstack-[11], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_44\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[9], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t68, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[11], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_398\n.BB0_44:\n\tadd\tstack-[9], r0, r1\n\tsub.s!\t@CPI0_40[0], r1, r1\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[9], r0, r3\n\tst.1\t64, r3\n\tadd\tstack-[10], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_62[0], r0, r1\n\tst.1\tr3, r1\n\tadd\tstack-[12], r0, r1\n\tadd\tstack-[8], r0, r3\n\tst.1\tr3, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_33[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_408\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_414\n.BB0_47:\n\tsub.s!\t@CPI0_4[0], r2, r1\n\tjump.gt\t@.BB0_78\n\tsub.s!\t@CPI0_8[0], r2, r1\n\tjump.eq\t@.BB0_127\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.eq\t@.BB0_129\n\tsub.s!\t@CPI0_10[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tnear_call\tr0, @fun_isOnZkSyncPrecompiles, @DEFAULT_UNWIND\n\tjump\t@.BB0_175\n.BB0_53:\n\tsub.s!\t@CPI0_26[0], r2, r4\n\tjump.le\t@.BB0_92\n\tsub.s!\t@CPI0_27[0], r2, r4\n\tjump.eq\t@.BB0_131\n\tsub.s!\t@CPI0_28[0], r2, r4\n\tjump.eq\t@.BB0_134\n\tsub.s!\t@CPI0_29[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t29, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[1]\n\tsub.s!\t@CPI0_40[0], r2, r2\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[1], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_41[0], r2, r2\n\tsub.s!\t@CPI0_42[0], r2, r3\n\tjump.gt\t@.BB0_192\n\tadd\t128, r2, r3\n\tst.1\t64, r3\n\tadd\tstack-[1], r0, r4\n\tst.1\t128, r4\n\tst.1\t0, r1\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_241\n.BB0_61:\n\tadd\t32, r0, r1\n\tst.1.inc\tr3, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[14]\n\tadd\t64, r3, r2\n\tshl.s\t5, r1, r3\n\tadd\tr3, r2, r6\n\tadd\tr1, r0, stack-[13]\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_357\n\tadd\tr6, r0, r11\n.BB0_63:\n\tadd\tstack-[14], r0, r4\n\tsub\tr11, r4, r1\n\tjump\t@.BB0_199\n.BB0_64:\n\tsub.s!\t@CPI0_12[0], r2, r1\n\tjump.eq\t@.BB0_137\n\tsub.s!\t@CPI0_13[0], r2, r1\n\tjump.eq\t@.BB0_143\n\tsub.s!\t@CPI0_14[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t8, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tjump.ne\t@.BB0_77\n\tadd\t@CPI0_36[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_37[0], r0, r1\n\tst.1\t132, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_39[0], r1, r1\n\tadd\t@CPI0_37[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_72\n\tadd\tr0, r0, r7\n.BB0_71:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_71\n.BB0_72:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_74\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_74:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_202\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r4\n\tst.1\t64, r4\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_201\n\tld.1\t128, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n.BB0_77:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\tr4, r1\n\tshl.s\t64, r4, r1\n\tor\t@CPI0_35[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_78:\n\tsub.s!\t@CPI0_5[0], r2, r1\n\tjump.eq\t@.BB0_162\n\tsub.s!\t@CPI0_6[0], r2, r1\n\tjump.eq\t@.BB0_165\n\tsub.s!\t@CPI0_7[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t30, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_83:\n\tsub.s!\t@CPI0_20[0], r2, r1\n\tjump.eq\t@.BB0_168\n\tsub.s!\t@CPI0_21[0], r2, r1\n\tjump.eq\t@.BB0_170\n\tsub.s!\t@CPI0_22[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t27, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[5]\n\tsub.s!\t@CPI0_40[0], r2, r2\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[5], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_41[0], r2, r2\n\tsub.s!\t@CPI0_42[0], r2, r3\n\tjump.gt\t@.BB0_192\n\tadd\t128, r2, r15\n\tst.1\t64, r15\n\tadd\tstack-[5], r0, r3\n\tst.1\t128, r3\n\tst.1\t0, r1\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_262\n.BB0_90:\n\tadd\t32, r0, r1\n\tst.1.inc\tr15, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\t64, r15, r3\n\tshl.s\t5, r1, r2\n\tadd\tr2, r3, r2\n\tsub!\tr1, r0, r4\n\tjump.ne\t@.BB0_349\n.BB0_91:\n\tsub\tr2, r15, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r15, r3\n\tadd.ge\tr2, r0, r15\n\tshl.s\t64, r15, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_92:\n\tsub.s!\t@CPI0_30[0], r2, r1\n\tjump.eq\t@.BB0_173\n\tsub.s!\t@CPI0_31[0], r2, r1\n\tjump.ne\t@.BB0_201\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_74[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_75[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_176\n\tld\tr1, r1\n\tsub.s!\tstack-[14], r1, r2\n\tjump.eq\t@.BB0_99\n\tadd\t32, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tjump.eq\t@.BB0_99\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB0_365\n.BB0_99:\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_77[0], r1, r2\n\tjump.gt\t@.BB0_192\n\tadd\t36, r1, r2\n\tadd\t@CPI0_81[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tadd\t96, r0, r4\n\tst.1\tr2, r4\n\tadd\t@CPI0_79[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_80[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_335\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_374\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_336\n.BB0_103:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t@CPI0_50[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_37[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_176\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_201\n\tld.1\t64, r4\n\tadd\t@CPI0_52[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\t4, r4, r1\n\tadd\t1, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_53[0], r1, r1\n\tadd\t@CPI0_37[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_300\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_40[0], r1, r1\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[14], r0, r2\n\tst.1\t64, r2\n\tadd\t34, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tsload\tr1, r1\n\tand\t@CPI0_33[0], r1, stack-[12]\n\tsub.s!\t@CPI0_42[0], r2, r1\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[14], r0, r3\n\tadd\t128, r3, r1\n\tst.1\t64, r1\n\tadd\t96, r3, r1\n\tadd\t@CPI0_54[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r3, r1\n\tadd\t@CPI0_55[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t87, r0, r1\n\tadd\tr1, r0, stack-[10]\n\tst.1\tr3, r1\n\tadd\t@CPI0_56[0], r0, r1\n\tadd\tstack-[13], r0, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_50[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[12], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_51[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_176\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_201\n\tld.1\t64, r3\n\tadd\t@CPI0_57[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r2\n\tadd\t32, r0, r1\n\tadd\tr2, r0, stack-[9]\n\tst.1\tr2, r1\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tadd\t36, r3, r2\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[14]\n\tadd\t68, r3, r2\n\tsub!\tr1, r0, r3\n\tadd\tstack-[13], r0, r6\n\tjump.eq\t@.BB0_114\n\tadd\tr0, r0, r3\n.BB0_113:\n\tadd\tr3, r2, r4\n\tadd\tr3, r6, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_113\n.BB0_114:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr2\n\tadd\tstack-[12], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_116\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t68, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[12], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_403\n.BB0_116:\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_40[0], r1, r1\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[14], r0, r3\n\tst.1\t64, r3\n\tadd\tstack-[11], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_58[0], r0, r1\n\tst.1\tr3, r1\n\tadd\tstack-[9], r0, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tand\t@CPI0_33[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_418\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_419\n.BB0_119:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_121:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t24, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_177\n\tjump\t@.BB0_133\n.BB0_124:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t23, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_180\n\tjump\t@.BB0_133\n.BB0_127:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t34, r0, r1\n\tjump\t@.BB0_167\n.BB0_129:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t35, r0, r1\n\tjump\t@.BB0_167\n.BB0_131:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t22, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_133\n\tadd\t160, r0, r4\n\tadd\t@CPI0_73[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_184:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_33[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_184\n\tjump\t@.BB0_196\n.BB0_134:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_201\n\tadd\t34, r0, r2\n\tsload\tr2, r4\n\tadd\t@CPI0_67[0], r0, r2\n\tst.1\t128, r2\n\tcontext.gas_left\tr5\n\tand\t@CPI0_33[0], r4, r2\n\tsub.s!\t4, r2, r4\n\tadd\tr2, r0, stack-[14]\n\tjump.ne\t@.BB0_185\n\tptr.add\tr1, r3, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_186\n.BB0_137:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t28, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[6]\n\tsub.s!\t@CPI0_40[0], r2, r2\n\tjump.gt\t@.BB0_192\n\tadd\tstack-[6], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_41[0], r2, r2\n\tsub.s!\t@CPI0_42[0], r2, r3\n\tjump.gt\t@.BB0_192\n\tadd\t128, r2, r11\n\tst.1\t64, r11\n\tadd\tstack-[6], r0, r3\n\tst.1\t128, r3\n\tst.1\t0, r1\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_307\n.BB0_141:\n\tadd\t32, r0, r1\n\tst.1.inc\tr11, r1, r1\n\tld.1\t128, r2\n\tst.1\tr1, r2\n\tadd\t64, r11, r3\n\tshl.s\t5, r2, r1\n\tadd\tr1, r3, r1\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_344\n.BB0_142:\n\tsub\tr1, r11, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r11, r3\n\tadd.ge\tr2, r0, r11\n\tshl.s\t64, r11, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_143:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t25, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_40[0], r5, r2\n\tjump.gt\t@.BB0_192\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_41[0], r2, r2\n\tsub.s!\t@CPI0_42[0], r2, r3\n\tjump.gt\t@.BB0_192\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_161\n\tadd\t128, r0, r6\n\tadd\t@CPI0_43[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_148:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_343\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_154\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[13]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr6, r0, stack-[12]\n\tadd\tr7, r0, stack-[14]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[12], r0, r6\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_155\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_153:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_153\n\tjump\t@.BB0_156\n.BB0_154:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_156\n.BB0_155:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n.BB0_156:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r3\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tadd\t32, r6, r6\n\tst.1\t64, r1\n\tst.1\tr6, r9\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_148\n.BB0_160:\n\tld.1\t64, r1\n.BB0_161:\n\tadd\tr1, r0, stack-[14]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_array_string_dyn, @DEFAULT_UNWIND\n\tjump\t@.BB0_172\n.BB0_162:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t21, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_193\n.BB0_133:\n\tadd\t32, r0, r2\n\tjump\t@.BB0_197\n.BB0_165:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tadd\t36, r0, r1\n.BB0_167:\n\tsload\tr1, r1\n\tand\t@CPI0_33[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_168:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tnear_call\tr0, @fun_isOnZkSyncChainId, @DEFAULT_UNWIND\n\tjump\t@.BB0_175\n.BB0_170:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tnear_call\tr0, @copy_literal_to_memory_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8, @DEFAULT_UNWIND\n\tadd\t32, r0, r2\n\tld.1\t64, r3\n\tadd\tr3, r0, stack-[14]\n\tst.1.inc\tr3, r2, r2\n\tnear_call\tr0, @abi_encode_string_to_string, @DEFAULT_UNWIND\n.BB0_172:\n\tadd\tstack-[14], r0, r4\n\tjump\t@.BB0_198\n.BB0_173:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_201\n\tnear_call\tr0, @fun_isZkSyncChain, @DEFAULT_UNWIND\n.BB0_175:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_35[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_176:\n\trevert\n.BB0_177:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_64[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_178:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_33[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_178\n\tjump\t@.BB0_196\n.BB0_180:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_63[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_181:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_33[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_181\n\tjump\t@.BB0_196\n.BB0_185:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.ge\tr1, r0, r5\n\tshl.s\t192, r5, r1\n\tor\t@CPI0_68[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_207\n.BB0_186:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_189\n\tadd\tr0, r0, r5\n.BB0_188:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_188\n.BB0_189:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_191\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_191:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, stack-[13]\n\tand\tstack-[13], r1, r2\n\tsub.s!\t@CPI0_42[0], r2, r1\n\tjump.le\t@.BB0_200\n.BB0_192:\n\tadd\t@CPI0_66[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_53[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_193:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_34[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_194:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_33[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_194\n.BB0_196:\n\tsub.s\t96, r5, r2\n.BB0_197:\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[14]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @abi_encode_array_address_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n.BB0_198:\n\tsub\tr1, r4, r1\n.BB0_199:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_200:\n\tadd\t128, r2, r1\n\tadd\t@CPI0_59[0], r0, r4\n\tsub.s!\t32, r3, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI0_59[0], r3, r6\n\tsub!\tr6, r0, r7\n\tadd.le\tr0, r0, r4\n\tsub.s!\t@CPI0_59[0], r6, r6\n\tadd.ne\tr5, r0, r4\n\tst.1\t64, r1\n\tsub!\tr4, r0, r4\n\tjump.eq\t@.BB0_212\n.BB0_201:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_202:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_205\n\tadd\tr0, r0, r6\n.BB0_204:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_204\n.BB0_205:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.BB0_207:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_210\n\tadd\tr0, r0, r6\n.BB0_209:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_209\n.BB0_210:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.BB0_212:\n\tld.1\t128, r4\n\tsub.s!\t@CPI0_40[0], r4, r5\n\tjump.gt\t@.BB0_201\n\tadd\t128, r3, r5\n\tadd\t159, r4, r3\n\tadd\t@CPI0_59[0], r0, r6\n\tsub!\tr3, r5, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI0_59[0], r5, r8\n\tand\t@CPI0_59[0], r3, r3\n\tsub!\tr3, r8, r9\n\tadd.ge\tr0, r0, r6\n\txor\tr3, r8, r3\n\tsub.s!\t@CPI0_59[0], r3, r3\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r3\n\tjump.ne\t@.BB0_201\n\tadd\t128, r4, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_40[0], r3, r6\n\tjump.gt\t@.BB0_192\n\tadd\t31, r3, r6\n\tand\tstack-[13], r6, r6\n\tadd\t63, r6, r6\n\tand\tstack-[13], r6, r6\n\tadd\tr6, r1, r6\n\tsub.s!\t@CPI0_40[0], r6, r7\n\tjump.gt\t@.BB0_192\n\tst.1\t64, r6\n\tst.1\tr1, r3\n\tadd\t160, r4, r6\n\tadd\tr3, r6, r4\n\tsub!\tr4, r5, r4\n\tjump.gt\t@.BB0_201\n\tadd\t160, r2, r4\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB0_220\n\tadd\tr0, r0, r2\n.BB0_219:\n\tadd\tr2, r4, r5\n\tadd\tr2, r6, r7\n\tld.1\tr7, r7\n\tst.1\tr5, r7\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB0_219\n.BB0_220:\n\tadd\tr3, r4, r2\n\tst.1\tr2, r0\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_223\n\tadd\tr0, r0, r5\n.BB0_222:\n\tadd\tr5, r3, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_222\n.BB0_223:\n\tadd\tr1, r3, r1\n\tst.1\tr1, r0\n\tsub\tr1, r2, r1\n\tsub.s\t32, r1, r4\n\tst.1\tr2, r4\n\tadd\t31, r1, r1\n\tand\tstack-[13], r1, r4\n\tadd\tr4, r2, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_40[0], r1, r5\n\tjump.gt\t@.BB0_192\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_48[0], r1, r2\n\tjump.gt\t@.BB0_192\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\t32, r1, r3\n\tadd\t@CPI0_69[0], r0, r2\n\tst.1\tr3, r2\n\tadd!\t5, r0, r4\n\tst.1\tr1, r4\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tjump.eq\t@.BB0_230\n\tadd\tr0, r0, r5\n.BB0_229:\n\tadd\tr5, r2, r6\n\tadd\tr5, r3, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_229\n.BB0_230:\n\tadd\tr4, r2, r3\n\tst.1\tr3, r0\n\tsub\tr3, r1, r3\n\tsub.s\t32, r3, r4\n\tst.1\tr1, r4\n\tadd\t31, r3, r3\n\tand\tstack-[13], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_40[0], r3, r5\n\tjump.gt\t@.BB0_192\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tld\tr1, r1\n\tsub!\tstack-[12], r1, r1\n\tjump.ne\t@.BB0_450\n\tld.1\t64, r2\n\tadd\t@CPI0_70[0], r0, r1\n\tadd\tr2, r0, stack-[12]\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_463\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_464\n.BB0_236:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_239\n\tadd\tr0, r0, r6\n.BB0_238:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_238\n.BB0_239:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.BB0_241:\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_45[0], r2, r1\n\tjump.gt\t@.BB0_192\n\tadd\t@CPI0_65[0], r0, stack-[5]\n\tadd\t160, r0, stack-[4]\n\tadd\tr0, r0, stack-[3]\n.BB0_243:\n\tadd\tstack-[14], r0, r2\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[5], r0, r3\n\tsload\tr3, r1\n\tand\t@CPI0_33[0], r1, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t1, r3, r1\n\tsload\tr1, r5\n\tsub.s!\t@CPI0_40[0], r5, r2\n\tjump.gt\t@.BB0_192\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_41[0], r2, r2\n\tld.1\t64, r3\n\tadd\tr3, r2, r2\n\tadd\tr3, r0, stack-[6]\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI0_40[0], r2, r4\n\tjump.gt\t@.BB0_192\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r2\n\tadd\tr5, r0, stack-[7]\n\tadd\tstack-[6], r0, r2\n\tst.1\tr2, r5\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_260\n\tld\tr1, r6\n\tadd\tr0, r0, r7\n\tadd\tstack-[6], r0, r8\n.BB0_249:\n\tsload\tr6, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_343\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_255\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr9, r0, stack-[10]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr7, r0, stack-[12]\n\tadd\tr6, r0, stack-[13]\n\tst.1\t0, r6\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tadd\tstack-[9], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[12], r0, r7\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_256\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n\tadd\tstack-[8], r0, r11\n.BB0_254:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_254\n\tjump\t@.BB0_257\n.BB0_255:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_257\n.BB0_256:\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n.BB0_257:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r3\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tadd\t32, r8, r8\n\tst.1\t64, r1\n\tst.1\tr8, r9\n\tadd\t1, r6, r6\n\tadd\t1, r7, r7\n\tsub!\tr7, r5, r1\n\tjump.lt\t@.BB0_249\n.BB0_260:\n\tadd\tstack-[2], r0, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[4], r0, r2\n\tst.1.inc\tr2, r1, r2\n\tadd\tr2, r0, stack-[4]\n\tld.1\t64, r3\n\tadd\tstack-[3], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[3]\n\tsub.s!\tstack-[1], r2, r1\n\tjump.ge\t@.BB0_452\n\tadd\tstack-[5], r0, r1\n\tadd\t2, r1, stack-[5]\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_48[0], r3, r1\n\tjump.le\t@.BB0_243\n\tjump\t@.BB0_192\n.BB0_262:\n\tsub.s!\t@CPI0_45[0], r2, r1\n\tjump.gt\t@.BB0_192\n\tadd\t@CPI0_61[0], r0, r5\n\tadd\t160, r0, stack-[12]\n\tadd\tr0, r0, stack-[11]\n.BB0_264:\n\tadd\t64, r15, r6\n\tst.1\t64, r6\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_343\n\tst.1\tr6, r4\n\tadd\t96, r15, r3\n\tsub!\tr2, r0, r2\n\tadd\tr15, r0, stack-[14]\n\tadd\tr5, r0, stack-[13]\n\tjump.eq\t@.BB0_270\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr6, r0, stack-[10]\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tadd\tstack-[9], r0, r7\n\tsub!\tr7, r0, r2\n\tjump.eq\t@.BB0_271\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[10], r0, r6\n\tadd\tstack-[8], r0, r8\n.BB0_269:\n\tadd\tr1, r8, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r7, r3\n\tjump.lt\t@.BB0_269\n\tjump\t@.BB0_272\n.BB0_270:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_272\n.BB0_271:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[10], r0, r6\n.BB0_272:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, stack-[10]\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r3\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r1\n\tst.1.inc\tr15, r6, r1\n\tadd\tr1, r0, stack-[6]\n\tadd\t1, r5, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tld\tr1, r2\n\tadd\tstack-[7], r0, r8\n\tsub.s!\t8, r8, r1\n\tjump.lt\t@.BB0_293\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[8], r0, r7\n.BB0_277:\n\tadd\t224, r7, r3\n\tsload\tr2, r4\n\tand\t@CPI0_47[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t192, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t160, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t128, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t96, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t64, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t32, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr7, r3\n\tadd\t1, r2, r2\n\tadd\t256, r7, r7\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r8, r3\n\tjump.lt\t@.BB0_277\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_280\n.BB0_279:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr7, r3, r7\n\tor\t1, r1, r1\n.BB0_280:\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[9], r0, r4\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_282\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_295\n.BB0_283:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_284\n.BB0_296:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_297\n.BB0_285:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_286\n.BB0_298:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_299\n.BB0_287:\n\tsub!\tr1, r8, r1\n\tjump.ge\t@.BB0_289\n.BB0_288:\n\tand\t@CPI0_47[0], r2, r1\n\tst.1.inc\tr7, r1, r7\n.BB0_289:\n\tsub\tr7, r4, r1\n\tadd\t31, r1, r1\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r3\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\tr1, r4\n\tadd\tstack-[12], r0, r1\n\tst.1.inc\tr1, r6, r1\n\tadd\tr1, r0, stack-[12]\n\tld.1\t64, r15\n\tadd\tstack-[11], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[11]\n\tsub.s!\tstack-[5], r2, r1\n\tjump.ge\t@.BB0_392\n\tadd\t2, r5, r5\n\tsub.s!\t@CPI0_48[0], r15, r1\n\tjump.le\t@.BB0_264\n\tjump\t@.BB0_192\n.BB0_282:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_283\n.BB0_295:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_296\n.BB0_284:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_285\n.BB0_297:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_298\n.BB0_286:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_287\n.BB0_299:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r1\n\tjump.lt\t@.BB0_288\n\tjump\t@.BB0_289\n.BB0_293:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[8], r0, r7\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_279\n\tjump\t@.BB0_280\n.BB0_300:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_303\n\tadd\tr0, r0, r6\n.BB0_302:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_302\n.BB0_303:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n.BB0_305:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_306:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_307:\n\tsub.s!\t@CPI0_45[0], r2, r1\n\tjump.gt\t@.BB0_192\n\tadd\t@CPI0_46[0], r0, r3\n\tadd\t160, r0, r4\n\tadd\t32784, r0, stack-[5]\n\tadd\tr0, r0, r5\n.BB0_309:\n\tadd\tr5, r0, stack-[11]\n\tadd\tr4, r0, stack-[12]\n\tadd\t64, r11, r1\n\tst.1\t64, r1\n\tsload\tr3, r1\n\tand\t@CPI0_33[0], r1, r1\n\tadd\tr11, r0, stack-[14]\n\tst.1.inc\tr11, r1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tr3, r0, stack-[13]\n\tadd\t1, r3, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tld\tr1, r2\n\tadd\tstack-[8], r0, r9\n\tsub.s!\t8, r9, r1\n\tjump.lt\t@.BB0_328\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n.BB0_312:\n\tadd\t224, r8, r3\n\tsload\tr2, r4\n\tand\t@CPI0_47[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t192, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t160, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t128, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t96, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t64, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_47[0], r3, r3\n\tadd\t32, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr8, r3\n\tadd\t1, r2, r2\n\tadd\t256, r8, r8\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r9, r3\n\tjump.lt\t@.BB0_312\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_315\n.BB0_314:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr8, r3, r8\n\tor\t1, r1, r1\n.BB0_315:\n\tadd\tstack-[12], r0, r4\n\tadd\tstack-[11], r0, r5\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_317\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_330\n.BB0_318:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_319\n.BB0_331:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_332\n.BB0_320:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_321\n.BB0_333:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_334\n.BB0_322:\n\tsub!\tr1, r9, r1\n\tjump.ge\t@.BB0_324\n.BB0_323:\n\tand\t@CPI0_47[0], r2, r1\n\tst.1.inc\tr8, r1, r8\n.BB0_324:\n\tsub\tr8, r7, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r7, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r3\n\tadd\tstack-[13], r0, r3\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\tr1, r7\n\tst.1.inc\tr4, r6, r4\n\tld.1\t64, r11\n\tadd\t1, r5, r5\n\tsub.s!\tstack-[6], r5, r1\n\tjump.ge\t@.BB0_387\n\tadd\t2, r3, r3\n\tsub.s!\t@CPI0_48[0], r11, r1\n\tjump.le\t@.BB0_309\n\tjump\t@.BB0_192\n.BB0_317:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_318\n.BB0_330:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_331\n.BB0_319:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_320\n.BB0_332:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_333\n.BB0_321:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_322\n.BB0_334:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_47[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r1\n\tjump.lt\t@.BB0_323\n\tjump\t@.BB0_324\n.BB0_328:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_314\n\tjump\t@.BB0_315\n.BB0_335:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_336:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_339\n\tadd\tr0, r0, r6\n.BB0_338:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_338\n.BB0_339:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_342\n.BB0_341:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_342:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_343:\n\tadd\t@CPI0_66[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_53[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_344:\n\tadd\t128, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_346\n.BB0_345:\n\tadd\t1, r6, r6\n\tsub!\tr6, r2, r7\n\tjump.ge\t@.BB0_142\n.BB0_346:\n\tsub\tr1, r11, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tadd\t32, r4, r4\n\tld.1\tr4, r7\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_33[0], r7, r7\n\tst.1.inc\tr1, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r5\n\tadd\t64, r1, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r1, r1\n\tsub!\tr8, r0, r9\n\tjump.eq\t@.BB0_345\n\tadd\tr0, r0, r9\n.BB0_348:\n\tadd\t32, r7, r7\n\tld.1\tr7, r10\n\tand\t@CPI0_47[0], r10, r10\n\tst.1.inc\tr1, r10, r1\n\tadd\t1, r9, r9\n\tsub!\tr9, r8, r10\n\tjump.lt\t@.BB0_348\n\tjump\t@.BB0_345\n.BB0_349:\n\tadd\t128, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_351\n.BB0_350:\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.ge\t@.BB0_91\n.BB0_351:\n\tsub\tr2, r15, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tadd\t32, r4, r4\n\tld.1\tr4, r7\n\tld.1.inc\tr7, r9, r8\n\tst.1.inc\tr2, r5, r7\n\tadd\t64, r2, r12\n\tld.1.inc\tr9, r10, r11\n\tst.1\tr12, r10\n\tadd\t96, r2, r9\n\tsub!\tr10, r0, r12\n\tjump.eq\t@.BB0_354\n\tadd\tr0, r0, r12\n.BB0_353:\n\tadd\tr12, r9, r13\n\tadd\tr11, r12, r14\n\tld.1\tr14, r14\n\tst.1\tr13, r14\n\tadd\t32, r12, r12\n\tsub!\tr12, r10, r13\n\tjump.lt\t@.BB0_353\n.BB0_354:\n\tadd\tr10, r9, r11\n\tst.1\tr11, r0\n\tadd\t31, r10, r10\n\tsub.s\t32, r0, r11\n\tand\tr10, r11, r10\n\tadd\tr10, r9, r9\n\tld.1\tr8, r8\n\tsub\tr9, r2, r2\n\tst.1\tr7, r2\n\tld.1\tr8, r7\n\tst.1.inc\tr9, r7, r2\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_350\n\tadd\tr0, r0, r9\n.BB0_356:\n\tadd\t32, r8, r8\n\tld.1\tr8, r10\n\tand\t@CPI0_47[0], r10, r10\n\tst.1.inc\tr2, r10, r2\n\tadd\t1, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_356\n\tjump\t@.BB0_350\n.BB0_357:\n\tadd\t128, r0, r3\n\tadd\t64, r0, r4\n\tadd\tr0, r0, r5\n\tjump\t@.BB0_359\n.BB0_358:\n\tadd\t1, r5, r5\n\tsub.s!\tstack-[13], r5, r1\n\tadd\tr11, r0, r6\n\tjump.ge\t@.BB0_63\n.BB0_359:\n\tsub.s\tstack-[14], r6, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr2, r7, r2\n\tadd\t32, r3, r3\n\tld.1\tr3, r7\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_33[0], r7, r7\n\tst.1.inc\tr6, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r4\n\tadd\t64, r6, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r6, r9\n\tshl.s\t5, r8, r10\n\tadd\tr10, r9, r11\n\tsub!\tr8, r0, r10\n\tjump.eq\t@.BB0_358\n\tadd\tr0, r0, r10\n\tjump\t@.BB0_362\n.BB0_361:\n\tadd\t31, r12, r1\n\tsub.s\t32, r0, r13\n\tand\tr1, r13, r1\n\tadd\tr12, r11, r12\n\tst.1\tr12, r0\n\tadd\tr1, r11, r11\n\tadd\t1, r10, r10\n\tsub!\tr10, r8, r1\n\tjump.ge\t@.BB0_358\n.BB0_362:\n\tsub\tr11, r6, r12\n\tsub.s\t96, r12, r12\n\tst.1.inc\tr9, r12, r9\n\tadd\t32, r7, r7\n\tld.1\tr7, r12\n\tld.1.inc\tr12, r12, r13\n\tst.1.inc\tr11, r12, r11\n\tsub!\tr12, r0, r14\n\tjump.eq\t@.BB0_361\n\tadd\tr0, r0, r14\n.BB0_364:\n\tadd\tr14, r11, r15\n\tadd\tr13, r14, r1\n\tld.1\tr1, r1\n\tst.1\tr15, r1\n\tadd\t32, r14, r14\n\tsub!\tr14, r12, r1\n\tjump.lt\t@.BB0_364\n\tjump\t@.BB0_361\n.BB0_365:\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[14]\n\tsub.s!\t@CPI0_76[0], r1, r1\n\tjump.ge\t@.BB0_192\n\tadd\tstack-[14], r0, r3\n\tadd\t128, r3, r1\n\tst.1\t64, r1\n\tadd\t96, r3, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r3, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r3, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr3, r1\n\tadd\t32777, r0, stack-[12]\n\tadd\t1, r0, stack-[11]\n\tadd\tr0, r0, r3\n\tjump\t@.BB0_368\n.BB0_367:\n\tsub.s!\t3, r3, r1\n\tadd\t1, r3, r3\n\tjump.ge\t@.BB0_99\n.BB0_368:\n\tshl.s\t5, r3, r1\n\tadd\tstack-[14], r1, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI0_33[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB0_367\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\tstack-[12], r0, r2\n\tadd\tr3, r0, stack-[13]\n\tadd\tstack-[11], r0, r3\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tadd\tstack-[13], r0, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_367\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_77[0], r1, r2\n\tjump.gt\t@.BB0_192\n\tadd\t36, r1, r2\n\tadd\t@CPI0_78[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tadd\t96, r0, r4\n\tst.1\tr2, r4\n\tadd\t@CPI0_79[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_80[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_393\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_451\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_394\n.BB0_374:\n\tand\t@CPI0_33[0], r1, r2\n\tadd\t35, r0, r1\n\tsload\tr1, r3\n\tand\t@CPI0_82[0], r3, r3\n\tor\tr3, r2, r3\n\tsstore\tr1, r3\n\tadd\t@CPI0_83[0], r0, r1\n\tld.1\t64, r10\n\tst.1\tr10, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_376\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_382\n.BB0_376:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_71[0], r1, r1\n\tadd\tr10, r0, stack-[14]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_379\n\tadd\tr0, r0, r7\n.BB0_378:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_378\n.BB0_379:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_381\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_381:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_388\n.BB0_382:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr10, r0, r5\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r4\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_201\n\tld.1\tr5, r1\n\tsub.s!\t@CPI0_33[0], r1, r2\n\tjump.gt\t@.BB0_201\n.BB0_386:\n\tadd\t34, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_82[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_387:\n\tjump\t@.BB0_141\n.BB0_388:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_391\n\tadd\tr0, r0, r6\n.BB0_390:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_390\n.BB0_391:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_305\n\tjump\t@.BB0_306\n.BB0_392:\n\tjump\t@.BB0_90\n.BB0_393:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_394:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_397\n\tadd\tr0, r0, r6\n.BB0_396:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_396\n.BB0_397:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_341\n\tjump\t@.BB0_342\n.BB0_398:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_401\n\tadd\tr0, r0, r6\n.BB0_400:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_400\n.BB0_401:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.BB0_403:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_406\n\tadd\tr0, r0, r6\n.BB0_405:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_405\n.BB0_406:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.BB0_408:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[9], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_53[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[9], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_411\n\tadd\tr0, r0, r7\n.BB0_410:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_410\n.BB0_411:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_413\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[9], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_413:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_453\n.BB0_414:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[9], r1, r1\n\tsub.s!\t@CPI0_40[0], r1, r2\n\tjump.gt\t@.BB0_192\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_201\n\tadd\tstack-[9], r0, r1\n\tld.1\tr1, r1\n\tsub.s!\t1, r1, r1\n\tjump.ne\t@.BB0_450\n.BB0_417:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_418:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_53[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_458\n.BB0_419:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[14], r0, r8\n\tjump.eq\t@.BB0_422\n\tadd\tr0, r0, r5\n.BB0_421:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_421\n.BB0_422:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_424\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[14], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_424:\n\tadd\t31, r3, r1\n\tsub.s\t32, r0, stack-[13]\n\tand\tstack-[13], r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r4\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tadd\t@CPI0_59[0], r0, r2\n\tsub.s!\t32, r3, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr2, r0, r4\n\tand\t@CPI0_59[0], r3, r5\n\tsub!\tr5, r0, r6\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_59[0], r5, r5\n\tadd.ne\tr4, r0, r2\n\tst.1\t64, r1\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_201\n\tadd\tstack-[14], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_40[0], r2, r4\n\tjump.gt\t@.BB0_201\n\tadd\tstack-[14], r3, r5\n\tadd\tstack-[14], r2, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_59[0], r0, r4\n\tsub!\tr3, r5, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_59[0], r3, r3\n\tand\t@CPI0_59[0], r5, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\tr0, r0, r4\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_59[0], r3, r3\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.ne\t@.BB0_201\n\tld.1.inc\tr2, r3, r4\n\tsub.s!\t@CPI0_40[0], r3, r2\n\tjump.gt\t@.BB0_192\n\tadd\t31, r3, r2\n\tand\tstack-[13], r2, r2\n\tadd\t63, r2, r2\n\tand\tstack-[13], r2, r2\n\tadd\tr2, r1, r2\n\tsub.s!\t@CPI0_40[0], r2, r6\n\tjump.gt\t@.BB0_192\n\tst.1\t64, r2\n\tst.1.inc\tr1, r3, r2\n\tadd\tr3, r4, r6\n\tsub!\tr6, r5, r5\n\tjump.gt\t@.BB0_201\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_435\n\tadd\tr0, r0, r5\n.BB0_434:\n\tadd\tr5, r2, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_434\n.BB0_435:\n\tadd\tr3, r2, r3\n\tst.1\tr3, r0\n\tld.1\t64, r3\n\tadd\t32, r3, r4\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_438\n\tadd\tr0, r0, r5\n.BB0_437:\n\tadd\tr5, r4, r6\n\tadd\tr5, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_437\n.BB0_438:\n\tadd\tr1, r4, r1\n\tst.1\tr1, r0\n\tsub\tr1, r3, r1\n\tsub.s\t32, r1, r2\n\tst.1\tr3, r2\n\tadd\t31, r1, r1\n\tand\tstack-[13], r1, r2\n\tadd\tr2, r3, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r5\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r2\n\tadd.ge\tr1, r0, r4\n\tshl.s\t64, r4, r2\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t96, r3, r3\n\tor\tr3, r2, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_42[0], r1, r2\n\tjump.gt\t@.BB0_192\n\tadd\t128, r1, r2\n\tst.1\t64, r2\n\tadd\t96, r1, r2\n\tadd\t@CPI0_54[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI0_55[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r3\n\tadd\t@CPI0_56[0], r0, r2\n\tst.1\tr3, r2\n\tadd\tstack-[10], r0, r7\n\tst.1\tr1, r7\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tsub!\tr7, r0, r4\n\tjump.eq\t@.BB0_445\n\tadd\tr0, r0, r4\n.BB0_444:\n\tadd\tr4, r2, r5\n\tadd\tr4, r3, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r7, r5\n\tjump.lt\t@.BB0_444\n.BB0_445:\n\tadd\tr7, r2, r3\n\tst.1\tr3, r0\n\tsub\tr3, r1, r3\n\tsub.s\t32, r3, r4\n\tst.1\tr1, r4\n\tadd\t31, r3, r3\n\tand\tstack-[13], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_40[0], r3, r5\n\tjump.gt\t@.BB0_192\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n.BB0_448:\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tld\tr1, r1\n\tsub!\tstack-[14], r1, r1\n\tjump.eq\t@.BB0_417\n.BB0_450:\n\tadd\t@CPI0_66[0], r0, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_53[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_451:\n\tand\t@CPI0_33[0], r1, r1\n\tjump\t@.BB0_386\n.BB0_452:\n\tjump\t@.BB0_61\n.BB0_453:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_456\n\tadd\tr0, r0, r6\n.BB0_455:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_455\n.BB0_456:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.BB0_458:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_461\n\tadd\tr0, r0, r6\n.BB0_460:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_460\n.BB0_461:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.BB0_463:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[12], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_71[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_493\n.BB0_464:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[12], r0, r8\n\tjump.eq\t@.BB0_467\n\tadd\tr0, r0, r5\n.BB0_466:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_466\n.BB0_467:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_469\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[12], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_469:\n\tadd\t31, r3, r1\n\tand\tstack-[13], r1, r2\n\tadd\tstack-[12], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r4\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tadd\t@CPI0_59[0], r0, r2\n\tsub.s!\t32, r3, r4\n\tadd\tr0, r0, r4\n\tadd.lt\tr2, r0, r4\n\tand\t@CPI0_59[0], r3, r5\n\tsub!\tr5, r0, r6\n\tadd.le\tr0, r0, r2\n\tsub.s!\t@CPI0_59[0], r5, r5\n\tadd.ne\tr4, r0, r2\n\tst.1\t64, r1\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_201\n\tadd\tstack-[12], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_40[0], r2, r4\n\tjump.gt\t@.BB0_201\n\tadd\tstack-[12], r3, r5\n\tadd\tstack-[12], r2, r2\n\tadd\t31, r2, r3\n\tadd\t@CPI0_59[0], r0, r4\n\tsub!\tr3, r5, r6\n\tadd\tr0, r0, r6\n\tadd.ge\tr4, r0, r6\n\tand\t@CPI0_59[0], r3, r3\n\tand\t@CPI0_59[0], r5, r7\n\tsub!\tr3, r7, r8\n\tadd.ge\tr0, r0, r4\n\txor\tr3, r7, r3\n\tsub.s!\t@CPI0_59[0], r3, r3\n\tadd.ne\tr6, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.ne\t@.BB0_201\n\tld.1.inc\tr2, r3, r4\n\tsub.s!\t@CPI0_40[0], r3, r2\n\tjump.gt\t@.BB0_192\n\tadd\t31, r3, r2\n\tand\tstack-[13], r2, r2\n\tadd\t63, r2, r2\n\tand\tstack-[13], r2, r2\n\tadd\tr2, r1, r2\n\tsub.s!\t@CPI0_40[0], r2, r6\n\tjump.gt\t@.BB0_192\n\tst.1\t64, r2\n\tst.1.inc\tr1, r3, r2\n\tadd\tr3, r4, r6\n\tsub!\tr6, r5, r5\n\tjump.gt\t@.BB0_201\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_480\n\tadd\tr0, r0, r5\n.BB0_479:\n\tadd\tr5, r2, r6\n\tadd\tr5, r4, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_479\n.BB0_480:\n\tadd\tr3, r2, r3\n\tst.1\tr3, r0\n\tld.1\t64, r3\n\tadd\t32, r3, r4\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r5\n\tjump.eq\t@.BB0_483\n\tadd\tr0, r0, r5\n.BB0_482:\n\tadd\tr5, r4, r6\n\tadd\tr5, r2, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r6\n\tjump.lt\t@.BB0_482\n.BB0_483:\n\tadd\tr1, r4, r1\n\tst.1\tr1, r0\n\tsub\tr1, r3, r1\n\tsub.s\t32, r1, r2\n\tst.1\tr3, r2\n\tadd\t31, r1, r1\n\tand\tstack-[13], r1, r2\n\tadd\tr2, r3, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_40[0], r1, r5\n\tjump.gt\t@.BB0_192\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r2\n\tadd.ge\tr1, r0, r4\n\tshl.s\t64, r4, r2\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t96, r3, r3\n\tor\tr3, r2, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_60[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_201\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_48[0], r2, r3\n\tjump.gt\t@.BB0_192\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\t32, r2, r3\n\tadd\t@CPI0_72[0], r0, r1\n\tst.1\tr3, r1\n\tadd!\t3, r0, r4\n\tst.1\tr2, r4\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tjump.eq\t@.BB0_490\n\tadd\tr0, r0, r5\n.BB0_489:\n\tadd\tr5, r2, r6\n\tadd\tr5, r3, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_489\n.BB0_490:\n\tadd\tr4, r2, r3\n\tst.1\tr3, r0\n\tsub\tr3, r1, r3\n\tsub.s\t32, r3, r4\n\tst.1\tr1, r4\n\tadd\t31, r3, r3\n\tand\tstack-[13], r3, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_40[0], r3, r5\n\tjump.gt\t@.BB0_192\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_192\n\tst.1\t64, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tjump\t@.BB0_448\n.BB0_493:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_496\n\tadd\tr0, r0, r6\n.BB0_495:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_495\n.BB0_496:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_306\n\tjump\t@.BB0_305\n.func_end0:\n\nabi_encode_array_address_dyn:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\t32, r2, r2\n\tld.1\tr2, r5\n\tand\t@CPI1_0[0], r5, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tret\n.func_end1:\n\nabi_encode_string_to_string:\n.func_begin2:\n\tld.1.inc\tr1, r3, r4\n\tst.1.inc\tr2, r3, r1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB2_3\n\tadd\tr0, r0, r2\n.BB2_2:\n\tadd\tr2, r1, r5\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r5\n\tjump.lt\t@.BB2_2\n.BB2_3:\n\tadd\tr3, r1, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end2:\n\nfinalize_allocation:\n.func_begin3:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI3_0[0], r1, r3\n\tjump.gt\t@.BB3_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB3_2\n\tst.1\t64, r1\n\tret\n.BB3_2:\n\tadd\t@CPI3_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\ncopy_literal_to_memory_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8:\n.func_begin4:\n\tld.1\t64, r1\n\tsub.s!\t@CPI4_0[0], r1, r2\n\tjump.ge\t@.BB4_1\n\tadd\t128, r1, r2\n\tst.1\t64, r2\n\tadd\t96, r1, r2\n\tadd\t@CPI4_1[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tadd\t@CPI4_2[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t32, r1, r2\n\tadd\t@CPI4_3[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t87, r0, r2\n\tst.1\tr1, r2\n\tret\n.BB4_1:\n\tadd\t@CPI4_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nabi_encode_array_string_dyn:\n.func_begin5:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tld.1\tr2, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r5\n\tshl.s\t5, r4, r3\n\tadd\tr5, r3, r3\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB5_6\n\tadd\tr0, r0, r6\n\tjump\t@.BB5_2\n.BB5_5:\n\tadd\t31, r7, r8\n\tsub.s\t32, r0, r9\n\tand\tr8, r9, r8\n\tadd\tr7, r3, r7\n\tst.1\tr7, r0\n\tadd\tr8, r3, r3\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.ge\t@.BB5_6\n.BB5_2:\n\tsub\tr3, r1, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr5, r7, r5\n\tadd\t32, r2, r2\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r7, r8\n\tst.1.inc\tr3, r7, r3\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB5_5\n\tadd\tr0, r0, r9\n.BB5_4:\n\tadd\tr9, r3, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB5_4\n\tjump\t@.BB5_5\n.BB5_6:\n\tadd\tr3, r0, r1\n\tret\n.func_end5:\n\nfun_isOnZkSyncChainId:\n.func_begin6:\n\tnop\tstack+=[1]\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI6_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_1\n\tadd\t1, r0, r2\n\tld\tr1, r1\n\tsub.s!\tstack-[1], r1, r3\n\tjump.eq\t@.BB6_5\n\tadd\t32, r0, r3\n\tsload\tr3, r3\n\tsub!\tr1, r3, r3\n\tjump.eq\t@.BB6_5\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tadd\t0, r0, r2\n\tadd.eq\t1, r0, r2\n.BB6_5:\n\tand\t1, r2, r1\n\tret\n.BB6_1:\n\trevert\n.func_end6:\n\nfun_isOnZkSyncPrecompiles:\n.func_begin7:\n\tnop\tstack+=[4]\n\tld.1\t64, r5\n\tsub.s!\t@CPI7_0[0], r5, r1\n\tjump.ge\t@.BB7_1\n\tadd\t128, r5, r1\n\tst.1\t64, r1\n\tadd\t96, r5, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r5, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r5, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr5, r1\n\tadd\t32777, r0, stack-[1]\n\tadd\t1, r0, r3\n\tadd\tr0, r0, r6\n\tadd\tr5, r0, stack-[3]\n\tadd\tr3, r0, stack-[2]\n\tjump\t@.BB7_3\n.BB7_6:\n\tsub.s!\t3, r6, r1\n\tadd\t1, r6, r6\n\tjump.ge\t@.BB7_7\n.BB7_3:\n\tshl.s\t5, r6, r1\n\tadd\tr1, r5, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI7_1[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB7_6\n\tsub.s!\t@CPI7_2[0], r1, r2\n\tadd.ge\t@CPI7_2[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI7_3[0], r1, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tr0, r0, r5\n\tadd\tr6, r0, stack-[4]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[2], r0, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI7_2[0], r4, stack[@returndatasize]\n\tadd\tstack-[3], r0, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB7_6\n\tadd\tr3, r0, r1\n\tret\n.BB7_7:\n\tadd\tr0, r0, r3\n\tadd\tr3, r0, r1\n\tret\n.BB7_1:\n\tadd\t@CPI7_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\nfun_isZkSyncChain:\n.func_begin8:\n\tnop\tstack+=[4]\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tadd\t@CPI8_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI8_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI8_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI8_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB8_1\n\tld\tr1, r1\n\tsub.s!\tstack-[4], r1, r2\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB8_5\n\tadd\t32, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB8_5\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tadd\tr0, r0, r3\n\tjump.ne\t@.BB8_6\n.BB8_5:\n\tadd\tr3, r0, r1\n\tret\n.BB8_6:\n\tld.1\t64, r5\n\tsub.s!\t@CPI8_3[0], r5, r1\n\tjump.ge\t@.BB8_7\n\tadd\t128, r5, r1\n\tst.1\t64, r1\n\tadd\t96, r5, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r5, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r5, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr5, r1\n\tadd\t32777, r0, stack-[1]\n\tadd\t1, r0, r3\n\tadd\tr0, r0, r6\n\tadd\tr5, r0, stack-[3]\n\tadd\tr3, r0, stack-[2]\n\tjump\t@.BB8_9\n.BB8_12:\n\tsub.s!\t3, r6, r1\n\tadd\t1, r6, r6\n\tjump.ge\t@.BB8_13\n.BB8_9:\n\tshl.s\t5, r6, r1\n\tadd\tr1, r5, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI8_4[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB8_12\n\tsub.s!\t@CPI8_1[0], r1, r2\n\tadd.ge\t@CPI8_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI8_5[0], r1, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tr0, r0, r5\n\tadd\tr6, r0, stack-[4]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[2], r0, r3\n\tadd\tr1, r0, r4\n\tshr.s\t96, r4, r4\n\tand\t@CPI8_1[0], r4, stack[@returndatasize]\n\tadd\tstack-[3], r0, r5\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB8_12\n\tadd\tr3, r0, r1\n\tret\n.BB8_13:\n\tadd\tr0, r0, r3\n\tadd\tr3, r0, r1\n\tret\n.BB8_1:\n\trevert\n.BB8_7:\n\tadd\t@CPI8_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI8_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end8:\n\n__cxa_throw:\n.func_begin9:\n\trevert\n.func_end9:\n\n__farcall:\n.func_begin10:\n.tmp0:\n\tfar_call\tr1, r2, @.BB10_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB10_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end10:\n\n__staticcall:\n.func_begin11:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB11_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB11_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end11:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI6_1:\nCPI7_2:\nCPI8_1:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1768108182\nCPI0_3:\n\t.cell 3279595123\nCPI0_4:\n\t.cell 3792478064\nCPI0_5:\n\t.cell 3792478065\nCPI0_6:\n\t.cell 4024363343\nCPI0_7:\n\t.cell 4202047188\nCPI0_8:\n\t.cell 3279595124\nCPI0_9:\n\t.cell 3589510280\nCPI0_10:\n\t.cell 3651357473\nCPI0_11:\n\t.cell 2439649221\nCPI0_12:\n\t.cell 2439649222\nCPI0_13:\n\t.cell 3041954473\nCPI0_14:\n\t.cell 3124842406\nCPI0_15:\n\t.cell 1768108183\nCPI0_16:\n\t.cell 2179033039\nCPI0_17:\n\t.cell 2233625729\nCPI0_18:\n\t.cell 1046363170\nCPI0_19:\n\t.cell 1169906349\nCPI0_20:\n\t.cell 1169906350\nCPI0_21:\n\t.cell 1206798323\nCPI0_22:\n\t.cell 1725540768\nCPI0_23:\n\t.cell 1046363171\nCPI0_24:\n\t.cell 1064470260\nCPI0_25:\n\t.cell 1159672390\nCPI0_26:\n\t.cell 517440283\nCPI0_27:\n\t.cell 517440284\nCPI0_28:\n\t.cell 598886478\nCPI0_29:\n\t.cell 719206528\nCPI0_30:\n\t.cell 139621531\nCPI0_31:\n\t.cell 177362148\nCPI0_32:\n\t.cell 2535301202817642044428229017600\nCPI0_33:\nCPI1_0:\nCPI7_1:\nCPI8_4:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_34:\n\t.cell 38878206584692966203415385907871375197469080758325516314230789535345649042549\nCPI0_35:\n\t.cell 2535301200456458802993406410752\nCPI0_36:\n\t.cell 46361386726410499263322427381369506175992020241588171917386103515624534704128\nCPI0_37:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_38:\n\t.cell 46308022326495007027972728677917914892729792999299745830475596687180801507328\nCPI0_39:\n\t.cell 5387515053331158197795811229696\nCPI0_40:\nCPI3_0:\n\t.cell 18446744073709551615\nCPI0_41:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_42:\n\t.cell 18446744073709551487\nCPI0_43:\n\t.cell -48719757687822547800745197551118351534541568878739321821808546113428889233771\nCPI0_44:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_45:\n\t.cell 18446744073709551423\nCPI0_46:\n\t.cell 6454973039698199198119942482240540643982028891330163610098731264865829167633\nCPI0_47:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_48:\n\t.cell 18446744073709551551\nCPI0_49:\n\t.cell 2481041784956016742021570618494952475758789857281704946240779902470294861374\nCPI0_50:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_51:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_52:\n\t.cell -24243573542908756656742960469620706294859471809197549687606805108482832859136\nCPI0_53:\nCPI3_2:\nCPI4_5:\nCPI7_5:\nCPI8_7:\n\t.cell 2852213850513516153367582212096\nCPI0_54:\nCPI4_1:\n\t.cell 46680425542785075605404130249817247248721647812283121574459012680921609404416\nCPI0_55:\nCPI4_2:\n\t.cell 52663329889430940280567909783420082833879043916296709834172319972441641281637\nCPI0_56:\nCPI4_3:\n\t.cell 47691443057146912922899400265547492270956789769805184449624573419178687423077\nCPI0_57:\n\t.cell -16949442157144215611999896842971614940320898591358071300542480932780654985216\nCPI0_58:\n\t.cell -25111597823361139047590293367644610809928738957112648217072126637990893060096\nCPI0_59:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_60:\nCPI7_3:\nCPI8_5:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_61:\n\t.cell 26616959624788145501257665028759500958019551560565664426117466910078421933505\nCPI0_62:\n\t.cell 50942633119752846454219349998365661925608737367104304655302372697894809501696\nCPI0_63:\n\t.cell -26169279673760072341673943167871893214131042372482409454972450661548556448747\nCPI0_64:\n\t.cell -35624623585156310935986566609950774337791491079595188565361216048441042957010\nCPI0_65:\n\t.cell 49422300655976383518971161772042036479724517635858811238160587340303074464591\nCPI0_66:\nCPI3_1:\nCPI4_4:\nCPI7_4:\nCPI8_6:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_67:\n\t.cell 3162421667457357072237249128631551985524704858613737409516517017801010970624\nCPI0_68:\n\t.cell 316912652418240591808998408192\nCPI0_69:\n\t.cell 30954107449157176007381348991895308945515227249696671079363171533004942082048\nCPI0_70:\n\t.cell -48014764309337086638577053839674919990906578673186746930859508663338879942656\nCPI0_71:\n\t.cell 316912650057057350374175801344\nCPI0_72:\n\t.cell 30897344645770228901452031263157637755082334933400972818117944181223931772928\nCPI0_73:\n\t.cell -18002263324862296164297574372220909754226456243825434961346737007256845270391\nCPI0_74:\nCPI6_0:\nCPI8_0:\n\t.cell -45892047197499416867505091379861151366373029554911521591129889233172042914037\nCPI0_75:\nCPI6_2:\nCPI8_2:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_76:\nCPI4_0:\nCPI7_0:\nCPI8_3:\n\t.cell 18446744073709551488\nCPI0_77:\n\t.cell 18446744073709551483\nCPI0_78:\n\t.cell 452328404772163232250065532150499922456623732705478093056391488735351343562\nCPI0_79:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_80:\n\t.cell 904625697166532776746648320380374280103671765658434358441154937409622769664\nCPI0_81:\n\t.cell 452315760186781636771927561497396815711770308555736648055475677641428660940\nCPI0_82:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_83:\n\t.cell -28834266701563273431823934408703353723064231390119340642120452995784432943104\n","methodIdentifiers":{"IS_TEST()":"fa7626d4","PUG_URI()":"47ee47f3","USER()":"81e167cf","basicNft()":"c37aa674","deployer()":"d5f39488","deployerAddress()":"efdee94f","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSenders()":"1ed7831c","failed()":"ba414fa6","isOnZkSyncChainId()":"45bb5aae","isOnZkSyncPrecompiles()":"d9a34b21","isZkSyncChain()":"0852749b","setUp()":"0a9254e4","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23","testCanMintAndHaveABalance()":"451f3246","testInitializedCorrectly()":"23b2484e","testTokenURIIsCorrect()":"69633097"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUG_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicNft\",\"outputs\":[{\"internalType\":\"contract BasicNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"contract DeployBasicNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnZkSyncChainId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnZkSyncPrecompiles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isZkSync\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isZkSyncChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isZkSync\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testCanMintAndHaveABalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testInitializedCorrectly\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testTokenURIIsCorrect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/BasicNftTest.t.sol\":\"BasicNftTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x2ba8ee7e4a68efd4cd75331b229874f4d4dc0a1010599afad88fc2cae5cb5d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77ce1968d402b0414fec0a344b59c275d0706d4df5ac6293d605dd2202016345\",\"dweb:/ipfs/QmSVy4N4F15NzEuSpmvwRj1nTfAwaJpng7CywUBWLnWC4w\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x53c7ffb58010e54ed351157897f56eef1b57923a943ca9473a160a459e9ebf94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dd236f0db2d4c1592635ef4de1f08c964181a32d1e722eaea2de911b1944f4\",\"dweb:/ipfs/QmcYjas4pbHrvtBoaUyWVUNv4tJvDu6nDwirxGXbRpUYGD\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xf92ea94fe38f8370a8dc5f591ebfb4958869e18d877469ce422162cc88c8b063\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://620b5d4b2ff24d66120ce9dbb72fbde7276f2e8b3bb93f626874183aee01e307\",\"dweb:/ipfs/Qmcyc8co7vCiJ7gUd3jj5Hc1rRPihjt3WSKs5ut6eiU1Ze\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x3293dcbb7acd28df553c954e4e39e288bf10aab7ecda8d50ef21b4f4a91a28d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eb374daf6df34f4392f8926f1fddbce9f22c423066aeaefdfbe77395f77967b\",\"dweb:/ipfs/QmWR81zBJRX2uyRjveGzikYPj6ZwKppWsU49YEQXTLWUsN\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/foundry-devops/src/DevOpsTools.sol\":{\"keccak256\":\"0x6e310a8b06b2cb689b5e3c0deec45ef1ffc35d8accf79e4da2656cc5a3d10a36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c6337496be59bbd75e9fed8afc3822dda05162b6bb019820190956317860583\",\"dweb:/ipfs/Qmdr8twbe1Wr7DWGkZkrpKNVmSkwh9L5PSf7HKq7utYDWh\"]},\"lib/foundry-devops/src/StringUtils.sol\":{\"keccak256\":\"0xc21a2278d2872b8867aa123ee6c236f51a38a789e8aa80659655d7ccedef9341\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c88541569ee44ee344e1adf17ec2d2dfd528dfc6495cd6767fcc536bca8b0d0e\",\"dweb:/ipfs/QmaRZNzPB62ruBepsG6zbUabyKRM1pdkGAGG5iL7mTEjri\"]},\"lib/foundry-devops/src/ZkSyncChainChecker.sol\":{\"keccak256\":\"0xbcf7e7847171a8e028ccecbe9cd3a75f9d3b102c12806d86d13a57a66d204a6a\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5c075822f6919ac2eaa770d7db6497447cacc0aa9c386bfd6f52ab71fd7d0081\",\"dweb:/ipfs/QmSryCcJrLfifu3SCiAQganu4YxTXJXs2JqpsfNymPp2qL\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed37f0f86e7fe31659e48c3a2a5920a92dd7f13c85cf8991fb79fe5f01e08efd\",\"dweb:/ipfs/QmUtm9bQGvjr9hHGwkPWrbgFmVqzaJcxjkaYDex2oGsonS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7\",\"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22\",\"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"lib/openzeppelin-contracts/contracts/utils/Base64.sol\":{\"keccak256\":\"0x09000342b85b1a06fa1f5b71bdeef7c449cd25799aac14fa9053d8abd18219aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a7cdab282a9165b685fa86da3bd331c8e319e5a5c64e16599134e738934a77d4\",\"dweb:/ipfs/QmSLcE5FmDqVQbFDB6MzUzuFi4UhJVUQ1A2rT4aJGhpERT\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"script/DeployBasicNft.s.sol\":{\"keccak256\":\"0x9a1d4c8baf4d7b4e3599f88e638a277e8411b7d64b07251bf638bce63bf04072\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f7d6871e79d09f256c7a938e7eb4a30bfbe492f7d49f083c3d2950debc4d915\",\"dweb:/ipfs/QmdGq7CTJN6Rt8mJzm7zGTk95BhZ1viaciMZtYB21SWPGY\"]},\"script/Interactions.s.sol\":{\"keccak256\":\"0x70870705e1607eb16db9e4a4b50d8086ffd7a32822b91bd8848d4b675be15f0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5d3ffcb06657d93da345a27302eb4b93f26f539767834a28ce6b21680f03fed\",\"dweb:/ipfs/QmSuL8gvC892SNTq6Vg6bB8peehABijVcfoye3tYXnza7c\"]},\"src/BasicNft.sol\":{\"keccak256\":\"0x010af816b5710b5227ae3f72ec01b000f5342ba0cd1265391dbb625c7595f421\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec20a20536d82b335cc6cf23c2e72f9c9d001eccf9555143eaeae11a441c48a5\",\"dweb:/ipfs/QmdZtaAaxJDWnm9sQQgBgHjeAd8TnFh4RX4j7rvfmpoqrs\"]},\"src/MoodNft.sol\":{\"keccak256\":\"0x1b82a0f981056d0cb971f5c005e133122aac1288feee317c7f31254bdd3cbdeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7580bab4d5ad0cc78113cb4e60539431e5e88beaba9d13ab5d36a4e631aeca37\",\"dweb:/ipfs/QmXkyDKjTBviugucV5Piz1Ja4qXMvUsG9ppq6y5zYhPerF\"]},\"test/BasicNftTest.t.sol\":{\"keccak256\":\"0x10279f4ba61f376cae4103298cfd08e4b899ca4b357b959f10e0cbb7ba740e37\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7db1e486058db2581dbe6e9e109004f092f232c5ce9f56b03a3fdec6fcba54bf\",\"dweb:/ipfs/QmQzEuzqqX6ffxeQTjK1wC1v9xzL9fsEty1oS6PXnDR6N1\"]}},\"version\":1}","solc_version":"0.8.20","solc_zkvm_edition":null,"zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 0:\"lib/forge-std/src/Base.sol\", 2:\"lib/forge-std/src/StdAssertions.sol\", 3:\"lib/forge-std/src/StdChains.sol\", 4:\"lib/forge-std/src/StdCheats.sol\", 6:\"lib/forge-std/src/StdInvariant.sol\", 12:\"lib/forge-std/src/StdUtils.sol\", 13:\"lib/forge-std/src/Test.sol\", 26:\"lib/foundry-devops/src/ZkSyncChainChecker.sol\", 47:\"test/BasicNftTest.t.sol\"\nobject \"BasicNftTest_51688\" {\n    code {\n        {\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := not(255)\n            sstore(/** @src 3:3166:3170  \"true\" */ 0x0c, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ or(and(sload(/** @src 3:3166:3170  \"true\" */ 0x0c), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2), /** @src 3:3166:3170  \"true\" */ 0x01))\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            sstore(/** @src 13:1038:1042  \"true\" */ 0x1e, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ or(and(sload(/** @src 13:1038:1042  \"true\" */ 0x1e), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2), /** @src 3:3166:3170  \"true\" */ 0x01))\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            sstore(/** @src 26:196:199  \"324\" */ 0x1f, 0x0144)\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            sstore(/** @src 26:236:239  \"300\" */ 0x20, 0x012c)\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            sstore(/** @src 26:281:284  \"260\" */ 0x21, 0x0104)\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            let _3 := datasize(\"BasicNftTest_51688_deployed\")\n            codecopy(_1, dataoffset(\"BasicNftTest_51688_deployed\"), _3)\n            return(_1, _3)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/src/Base.sol\", 2:\"lib/forge-std/src/StdAssertions.sol\", 6:\"lib/forge-std/src/StdInvariant.sol\", 13:\"lib/forge-std/src/Test.sol\", 26:\"lib/foundry-devops/src/ZkSyncChainChecker.sol\", 47:\"test/BasicNftTest.t.sol\"\n    object \"BasicNftTest_51688_deployed\" {\n        code {\n            {\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0852749b { external_fun_isZkSyncChain() }\n                    case 0x0a9254e4 { external_fun_setUp() }\n                    case 0x1ed7831c { external_fun_excludeSenders() }\n                    case 0x23b2484e {\n                        external_fun_testInitializedCorrectly()\n                    }\n                    case 0x2ade3880 {\n                        external_fun_targetInterfaces()\n                    }\n                    case 0x3e5e3c23 { external_fun_targetSenders() }\n                    case 0x3f7286f4 {\n                        external_fun_targetContracts()\n                    }\n                    case 0x451f3246 {\n                        external_fun_testCanMintAndHaveABalance()\n                    }\n                    case 0x45bb5aae {\n                        external_fun_isOnZkSyncChainId()\n                    }\n                    case 0x47ee47f3 { external_fun_PUG_URI() }\n                    case 0x66d9a9a0 {\n                        external_fun_targetArtifactSelectors()\n                    }\n                    case 0x69633097 {\n                        external_fun_testTokenURIIsCorrect()\n                    }\n                    case 0x81e167cf { external_fun_USER() }\n                    case 0x85226c81 {\n                        external_fun_targetArtifacts()\n                    }\n                    case 0x916a17c6 {\n                        external_fun_targetSelectors()\n                    }\n                    case 0xb5508aa9 {\n                        external_fun_excludeArtifacts()\n                    }\n                    case 0xba414fa6 { external_fun_failed() }\n                    case 0xc37aa674 { external_fun_basicNft() }\n                    case 0xd5f39488 { external_fun_deployer() }\n                    case 0xd9a34b21 {\n                        external_fun_isOnZkSyncPrecompiles()\n                    }\n                    case 0xe20c9f71 {\n                        external_fun_excludeContracts()\n                    }\n                    case 0xefdee94f {\n                        external_fun_deployerAddress()\n                    }\n                    case 0xfa7626d4 { external_fun_IS_TEST() }\n                }\n                revert(0, 0)\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0) { revert(0, 0) }\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function external_fun_isZkSyncChain()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isZkSyncChain()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function external_fun_setUp()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                /// @src 47:818:991  \"if (!isZkSyncChain()) {...\"\n                switch /** @src 47:822:838  \"!isZkSyncChain()\" */ cleanup_bool(iszero(/** @src 47:823:838  \"isZkSyncChain()\" */ fun_isZkSyncChain()))\n                case /** @src 47:818:991  \"if (!isZkSyncChain()) {...\" */ 0 {\n                    /// @src 47:966:980  \"new BasicNft()\"\n                    let _2 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                    /// @src 47:966:980  \"new BasicNft()\"\n                    let _3 := datasize(\"BasicNft_50752\")\n                    let _4 := add(_2, _3)\n                    if or(gt(_4, 0xffffffffffffffff), lt(_4, _2)) { panic_error_0x41() }\n                    datacopy(_2, dataoffset(\"BasicNft_50752\"), _3)\n                    let expr_address := create(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:966:980  \"new BasicNft()\" */ _2, sub(_4, _2))\n                    if iszero(expr_address) { revert_forward() }\n                    /// @src 47:955:980  \"basicNft = new BasicNft()\"\n                    update_storage_value_offsett_contract_BasicNft_to_contract_BasicNft(expr_address)\n                }\n                default /// @src 47:818:991  \"if (!isZkSyncChain()) {...\"\n                {\n                    /// @src 47:865:885  \"new DeployBasicNft()\"\n                    let _5 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                    /// @src 47:865:885  \"new DeployBasicNft()\"\n                    let _6 := datasize(\"DeployBasicNft_50422\")\n                    let _7 := add(_5, _6)\n                    if or(gt(_7, 0xffffffffffffffff), lt(_7, _5)) { panic_error_0x41() }\n                    datacopy(_5, dataoffset(\"DeployBasicNft_50422\"), _6)\n                    let expr_address_1 := create(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:865:885  \"new DeployBasicNft()\" */ _5, sub(_7, _5))\n                    if iszero(expr_address_1) { revert_forward() }\n                    /// @src 47:854:885  \"deployer = new DeployBasicNft()\"\n                    update_storage_value_offsett_contract_BasicNft_to_contract_BasicNft_8189(expr_address_1)\n                    /// @src 47:910:922  \"deployer.run\"\n                    let expr_address_2 := cleanup_address(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ cleanup_address(sload(/** @src 47:854:885  \"deployer = new DeployBasicNft()\" */ 0x23)))\n                    /// @src 47:910:924  \"deployer.run()\"\n                    let _8 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                    /// @src 47:910:924  \"deployer.run()\"\n                    mstore(_8, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x60203113))\n                    /// @src 47:910:924  \"deployer.run()\"\n                    let _9 := call(gas(), expr_address_2, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:910:924  \"deployer.run()\" */ _8, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4, /** @src 47:910:924  \"deployer.run()\" */ _8, 32)\n                    if iszero(_9) { revert_forward() }\n                    let expr_address_3 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1\n                    /// @src 47:910:924  \"deployer.run()\"\n                    if _9\n                    {\n                        let _10 := 32\n                        if gt(_10, returndatasize()) { _10 := returndatasize() }\n                        finalize_allocation(_8, _10)\n                        expr_address_3 := abi_decode_contract_BasicNft_fromMemory(_8, add(_8, _10))\n                    }\n                    /// @src 47:899:924  \"basicNft = deployer.run()\"\n                    update_storage_value_offsett_contract_BasicNft_to_contract_BasicNft(expr_address_3)\n                }\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                return(_1, _1)\n            }\n            function array_storeLengthForEncoding_array_address_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))\n            }\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            function abi_encode_array_address_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n            }\n            function external_fun_excludeSenders()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:2674:2690  \"_excludedSenders\" */ 0x16)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:2674:2690  \"_excludedSenders\" */ 0x16)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let srcPtr := 97789825912453899259273410636466998099043528421815129078110847000656284369545\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_testInitializedCorrectly()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                /// @src 47:1095:1108  \"basicNft.name\"\n                let expr_address := cleanup_address(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ cleanup_address(sload(/** @src 47:1095:1103  \"basicNft\" */ 0x22)))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _2 := 64\n                /// @src 47:1095:1110  \"basicNft.name()\"\n                let _3 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(_2)\n                /// @src 47:1095:1110  \"basicNft.name()\"\n                mstore(_3, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x06fdde03))\n                /// @src 47:1095:1110  \"basicNft.name()\"\n                let _4 := staticcall(gas(), expr_address, _3, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4, /** @src 47:1095:1110  \"basicNft.name()\" */ _3, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 47:1095:1110  \"basicNft.name()\"\n                if iszero(_4) { revert_forward() }\n                let expr_mpos := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1\n                /// @src 47:1095:1110  \"basicNft.name()\"\n                if _4\n                {\n                    let _5 := returndatasize()\n                    returndatacopy(_3, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:1095:1110  \"basicNft.name()\" */ _5)\n                    finalize_allocation(_3, _5)\n                    expr_mpos := abi_decode_string_fromMemory(_3, add(_3, _5))\n                }\n                /// @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\"\n                let expr_mpos_1 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(_2)\n                /// @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\"\n                let _6 := add(expr_mpos_1, 0x20)\n                let _7 := sub(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ abi_encode_string_memory_ptr(/** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ expr_mpos, _6), expr_mpos_1)\n                let _8 := not(31)\n                mstore(expr_mpos_1, add(_7, _8))\n                finalize_allocation(expr_mpos_1, _7)\n                /// @src 47:1068:1112  \"keccak256(abi.encodePacked(basicNft.name()))\"\n                let expr := keccak256(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _6, mload(/** @src 47:1068:1112  \"keccak256(abi.encodePacked(basicNft.name()))\" */ expr_mpos_1))\n                /// @src 47:1144:1152  \"NFT_NAME\"\n                let expr_mpos_2 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ copy_literal_to_memory_e5d21699003d762b953d66adecbe4f97c4791cae2f281f96a4beb7efcb7bbcf6()\n                /// @src 47:1126:1154  \"abi.encodePacked((NFT_NAME))\"\n                let expr_mpos_3 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(_2)\n                /// @src 47:1126:1154  \"abi.encodePacked((NFT_NAME))\"\n                let _9 := add(expr_mpos_3, /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ 0x20)\n                /// @src 47:1126:1154  \"abi.encodePacked((NFT_NAME))\"\n                let _10 := sub(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ abi_encode_string_memory_ptr(/** @src 47:1126:1154  \"abi.encodePacked((NFT_NAME))\" */ expr_mpos_2, _9), expr_mpos_3)\n                mstore(expr_mpos_3, add(_10, /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ _8))\n                /// @src 47:1126:1154  \"abi.encodePacked((NFT_NAME))\"\n                finalize_allocation(expr_mpos_3, _10)\n                /// @src 47:1061:1156  \"assert(keccak256(abi.encodePacked(basicNft.name())) == keccak256(abi.encodePacked((NFT_NAME))))\"\n                assert_helper(/** @src 47:1068:1155  \"keccak256(abi.encodePacked(basicNft.name())) == keccak256(abi.encodePacked((NFT_NAME)))\" */ eq(expr, /** @src 47:1116:1155  \"keccak256(abi.encodePacked((NFT_NAME)))\" */ keccak256(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _9, mload(/** @src 47:1116:1155  \"keccak256(abi.encodePacked((NFT_NAME)))\" */ expr_mpos_3))))\n                /// @src 47:1200:1217  \"basicNft.symbol()\"\n                let _11 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(_2)\n                /// @src 47:1200:1217  \"basicNft.symbol()\"\n                mstore(_11, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x95d89b41))\n                /// @src 47:1200:1217  \"basicNft.symbol()\"\n                let _12 := staticcall(gas(), expr_address, _11, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4, /** @src 47:1200:1217  \"basicNft.symbol()\" */ _11, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 47:1200:1217  \"basicNft.symbol()\"\n                if iszero(_12) { revert_forward() }\n                let expr_mpos_4 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1\n                /// @src 47:1200:1217  \"basicNft.symbol()\"\n                if _12\n                {\n                    let _13 := returndatasize()\n                    returndatacopy(_11, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:1200:1217  \"basicNft.symbol()\" */ _13)\n                    finalize_allocation(_11, _13)\n                    expr_mpos_4 := abi_decode_string_fromMemory(_11, add(_11, _13))\n                }\n                /// @src 47:1183:1218  \"abi.encodePacked(basicNft.symbol())\"\n                let expr_mpos_5 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(_2)\n                /// @src 47:1183:1218  \"abi.encodePacked(basicNft.symbol())\"\n                let _14 := add(expr_mpos_5, /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ 0x20)\n                /// @src 47:1183:1218  \"abi.encodePacked(basicNft.symbol())\"\n                let _15 := sub(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ abi_encode_string_memory_ptr(/** @src 47:1183:1218  \"abi.encodePacked(basicNft.symbol())\" */ expr_mpos_4, _14), expr_mpos_5)\n                mstore(expr_mpos_5, add(_15, /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ _8))\n                /// @src 47:1183:1218  \"abi.encodePacked(basicNft.symbol())\"\n                finalize_allocation(expr_mpos_5, _15)\n                /// @src 47:1173:1219  \"keccak256(abi.encodePacked(basicNft.symbol()))\"\n                let expr_1 := keccak256(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _14, mload(/** @src 47:1173:1219  \"keccak256(abi.encodePacked(basicNft.symbol()))\" */ expr_mpos_5))\n                /// @src 47:1251:1261  \"NFT_SYMBOL\"\n                let expr_mpos_6 := /** @src 47:444:451  \"\\\"Dogie\\\"\" */ copy_literal_to_memory_b5b35d1f7dc7cf1448a70456de4980702e1fdae4e057d31003c0e1e4b3c4bde2()\n                /// @src 47:1233:1263  \"abi.encodePacked((NFT_SYMBOL))\"\n                let expr_mpos_7 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(_2)\n                /// @src 47:1233:1263  \"abi.encodePacked((NFT_SYMBOL))\"\n                let _16 := add(expr_mpos_7, /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ 0x20)\n                /// @src 47:1233:1263  \"abi.encodePacked((NFT_SYMBOL))\"\n                let _17 := sub(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ abi_encode_string_memory_ptr(/** @src 47:1233:1263  \"abi.encodePacked((NFT_SYMBOL))\" */ expr_mpos_6, _16), expr_mpos_7)\n                mstore(expr_mpos_7, add(_17, /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ _8))\n                /// @src 47:1233:1263  \"abi.encodePacked((NFT_SYMBOL))\"\n                finalize_allocation(expr_mpos_7, _17)\n                /// @src 47:1166:1265  \"assert(keccak256(abi.encodePacked(basicNft.symbol())) == keccak256(abi.encodePacked((NFT_SYMBOL))))\"\n                assert_helper(/** @src 47:1173:1264  \"keccak256(abi.encodePacked(basicNft.symbol())) == keccak256(abi.encodePacked((NFT_SYMBOL)))\" */ eq(expr_1, /** @src 47:1223:1264  \"keccak256(abi.encodePacked((NFT_SYMBOL)))\" */ keccak256(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _16, mload(/** @src 47:1223:1264  \"keccak256(abi.encodePacked((NFT_SYMBOL)))\" */ expr_mpos_7))))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                return(_1, _1)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string_to_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                end := add(add(pos, and(add(length, 31), /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ not(31))), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0x20)\n            }\n            function abi_encode_array_struct_FuzzInterface_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let _3 := 5\n                let tail_2 := add(add(headStart, shl(_3, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                let i_1 := i\n                for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _4 := mload(srcPtr)\n                    let tail_3 := add(tail_2, _2)\n                    mstore(tail_2, and(mload(_4), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    let memberValue0 := mload(add(_4, _1))\n                    mstore(add(tail_2, _1), _2)\n                    let pos_1 := tail_3\n                    let length_1 := mload(memberValue0)\n                    mstore(tail_3, length_1)\n                    let _5 := 96\n                    pos_1 := add(tail_2, _5)\n                    let tail_4 := add(add(tail_2, shl(_3, length_1)), _5)\n                    let srcPtr_1 := add(memberValue0, _1)\n                    let i_2 := i\n                    for { } lt(i_2, length_1) { i_2 := add(i_2, 1) }\n                    {\n                        mstore(pos_1, add(sub(tail_4, tail_2), not(95)))\n                        tail_4 := abi_encode_string_to_string(mload(srcPtr_1), tail_4)\n                        srcPtr_1 := add(srcPtr_1, _1)\n                        pos_1 := add(pos_1, _1)\n                    }\n                    tail_2 := tail_4\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetInterfaces()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:3604:3623  \"_targetedInterfaces\" */ 0x1d)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 6:3604:3623  \"_targetedInterfaces\" */ 0x1d)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let spos := 49422300655976383518971161772042036479724517635858811238160587340303074464591\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_8191(memPtr_1)\n                    mstore(memPtr_1, and(sload(spos), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_string__dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzInterface_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_targetSenders()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:3450:3466  \"_targetedSenders\" */ 0x18)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:3450:3466  \"_targetedSenders\" */ 0x18)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let srcPtr := 80167465652159884487584418398737133515478493586045375474096367959472086682926\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_targetContracts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:3157:3175  \"_targetedContracts\" */ 0x17)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:3157:3175  \"_targetedContracts\" */ 0x17)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let srcPtr := 89622809563556123081897041840816014639138942293158154584485133346364573191189\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_testCanMintAndHaveABalance()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 47:1333:1347  \"vm.prank(USER)\"\n                if iszero(extcodesize(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2))\n                /// @src 47:1333:1347  \"vm.prank(USER)\"\n                {\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 47:1333:1347  \"vm.prank(USER)\"\n                let _3 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1333:1347  \"vm.prank(USER)\"\n                mstore(_3, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xca669fa7))\n                /// @src 47:1333:1347  \"vm.prank(USER)\"\n                let _4 := call(gas(), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2, _1, /** @src 47:1333:1347  \"vm.prank(USER)\" */ _3, sub(abi_encode_address(add(_3, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4)), /** @src 47:1333:1347  \"vm.prank(USER)\" */ _3), _3, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 47:1333:1347  \"vm.prank(USER)\"\n                if iszero(_4) { revert_forward() }\n                if _4\n                {\n                    finalize_allocation_8193(_3)\n                    abi_decode(_3, _3)\n                }\n                /// @src 47:1357:1373  \"basicNft.mintNft\"\n                let expr_address := cleanup_address(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ cleanup_address(sload(/** @src 47:1357:1365  \"basicNft\" */ 0x22)))\n                /// @src 47:1374:1381  \"PUG_URI\"\n                let expr_mpos := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ copy_literal_to_memory_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8()\n                /// @src 47:1357:1382  \"basicNft.mintNft(PUG_URI)\"\n                if iszero(extcodesize(expr_address))\n                {\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 47:1357:1382  \"basicNft.mintNft(PUG_URI)\"\n                let _5 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1357:1382  \"basicNft.mintNft(PUG_URI)\"\n                mstore(_5, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xda86f4a9))\n                /// @src 47:1357:1382  \"basicNft.mintNft(PUG_URI)\"\n                let _6 := call(gas(), expr_address, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:1357:1382  \"basicNft.mintNft(PUG_URI)\" */ _5, sub(abi_encode_string(add(_5, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4), /** @src 47:1357:1382  \"basicNft.mintNft(PUG_URI)\" */ expr_mpos), _5), _5, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 47:1357:1382  \"basicNft.mintNft(PUG_URI)\"\n                if iszero(_6) { revert_forward() }\n                if _6\n                {\n                    finalize_allocation_8193(_5)\n                    abi_decode(_5, _5)\n                }\n                /// @src 47:1400:1418  \"basicNft.balanceOf\"\n                let expr_address_1 := cleanup_address(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ cleanup_address(sload(/** @src 47:1357:1365  \"basicNft\" */ 0x22)))\n                /// @src 47:1400:1424  \"basicNft.balanceOf(USER)\"\n                let _7 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1400:1424  \"basicNft.balanceOf(USER)\"\n                mstore(_7, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x70a08231))\n                /// @src 47:1400:1424  \"basicNft.balanceOf(USER)\"\n                let _8 := staticcall(gas(), expr_address_1, _7, sub(abi_encode_address(add(_7, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4)), /** @src 47:1400:1424  \"basicNft.balanceOf(USER)\" */ _7), _7, 32)\n                if iszero(_8) { revert_forward() }\n                let expr := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1\n                /// @src 47:1400:1424  \"basicNft.balanceOf(USER)\"\n                if _8\n                {\n                    let _9 := 32\n                    if gt(_9, returndatasize()) { _9 := returndatasize() }\n                    finalize_allocation(_7, _9)\n                    expr := abi_decode_bytes32_fromMemory(_7, add(_7, _9))\n                }\n                /// @src 47:1393:1430  \"assert(basicNft.balanceOf(USER) == 1)\"\n                assert_helper(/** @src 47:1400:1429  \"basicNft.balanceOf(USER) == 1\" */ eq(expr, /** @src 47:775:776  \"1\" */ 0x01))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                return(_1, _1)\n            }\n            function external_fun_isOnZkSyncChainId()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isOnZkSyncChainId()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation_8191(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_8193(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff) { panic_error_0x41() }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation_13093(memPtr)\n            {\n                let newFreePtr := add(memPtr, 128)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ not(31)))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_literal_to_memory_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_13093(memPtr_1)\n                mstore(memPtr_1, 87)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"ipfs://bafybeig37ioir76s7mg5oobe\")\n                mstore(add(memPtr_1, 64), \"tncojcm3c3hxasyd4rvid4jqhy4gkahe\")\n                mstore(add(memPtr_1, 96), \"g4/?filename=0-PUG.json\")\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                tail := abi_encode_string_to_string(value0, add(headStart, 32))\n            }\n            function external_fun_PUG_URI()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := copy_literal_to_memory_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8()\n                let memPos := mload(64)\n                mstore(memPos, 32)\n                return(memPos, sub(abi_encode_string_to_string(ret, add(memPos, 32)), memPos))\n            }\n            function abi_encode_bytes4(value, pos)\n            {\n                mstore(pos, and(value, shl(224, 0xffffffff)))\n            }\n            function abi_encode_array_bytes4_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                let srcPtr := add(value, _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), shl(224, 0xffffffff)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_FuzzArtifactSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let tail_2 := add(add(headStart, shl(5, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    let memberValue0 := mload(_3)\n                    mstore(tail_2, _2)\n                    let tail_3 := abi_encode_string_to_string(memberValue0, add(tail_2, _2))\n                    let memberValue0_1 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), sub(tail_3, tail_2))\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0_1, tail_3)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetArtifactSelectors()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:3002:3028  \"_targetedArtifactSelectors\" */ 0x1b)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 6:3002:3028  \"_targetedArtifactSelectors\" */ 0x1b)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let spos := 26616959624788145501257665028759500958019551560565664426117466910078421933505\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_8191(memPtr_1)\n                    mstore(memPtr_1, copy_array_from_storage_to_memory_string(spos))\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzArtifactSelector_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_testTokenURIIsCorrect()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 47:1493:1507  \"vm.prank(USER)\"\n                if iszero(extcodesize(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2))\n                /// @src 47:1493:1507  \"vm.prank(USER)\"\n                {\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 47:1493:1507  \"vm.prank(USER)\"\n                let _3 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1493:1507  \"vm.prank(USER)\"\n                mstore(_3, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xca669fa7))\n                /// @src 47:1493:1507  \"vm.prank(USER)\"\n                let _4 := call(gas(), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2, _1, /** @src 47:1493:1507  \"vm.prank(USER)\" */ _3, sub(abi_encode_address(add(_3, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4)), /** @src 47:1493:1507  \"vm.prank(USER)\" */ _3), _3, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 47:1493:1507  \"vm.prank(USER)\"\n                if iszero(_4) { revert_forward() }\n                if _4\n                {\n                    finalize_allocation_8193(_3)\n                    abi_decode(_3, _3)\n                }\n                /// @src 47:1517:1533  \"basicNft.mintNft\"\n                let expr_address := cleanup_address(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ cleanup_address(sload(/** @src 47:1517:1525  \"basicNft\" */ 0x22)))\n                /// @src 47:1534:1541  \"PUG_URI\"\n                let expr_mpos := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ copy_literal_to_memory_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8()\n                /// @src 47:1517:1542  \"basicNft.mintNft(PUG_URI)\"\n                if iszero(extcodesize(expr_address))\n                {\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    revert(_1, _1)\n                }\n                /// @src 47:1517:1542  \"basicNft.mintNft(PUG_URI)\"\n                let _5 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1517:1542  \"basicNft.mintNft(PUG_URI)\"\n                mstore(_5, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xda86f4a9))\n                /// @src 47:1517:1542  \"basicNft.mintNft(PUG_URI)\"\n                let _6 := call(gas(), expr_address, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:1517:1542  \"basicNft.mintNft(PUG_URI)\" */ _5, sub(abi_encode_string(add(_5, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4), /** @src 47:1517:1542  \"basicNft.mintNft(PUG_URI)\" */ expr_mpos), _5), _5, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 47:1517:1542  \"basicNft.mintNft(PUG_URI)\"\n                if iszero(_6) { revert_forward() }\n                if _6\n                {\n                    finalize_allocation_8193(_5)\n                    abi_decode(_5, _5)\n                }\n                /// @src 47:1587:1604  \"basicNft.tokenURI\"\n                let expr_address_1 := cleanup_address(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ cleanup_address(sload(/** @src 47:1517:1525  \"basicNft\" */ 0x22)))\n                /// @src 47:1587:1607  \"basicNft.tokenURI(0)\"\n                let _7 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1587:1607  \"basicNft.tokenURI(0)\"\n                mstore(_7, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xc87b56dd))\n                /// @src 47:1587:1607  \"basicNft.tokenURI(0)\"\n                let _8 := staticcall(gas(), expr_address_1, _7, sub(abi_encode_rational_by(add(_7, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 4)), /** @src 47:1587:1607  \"basicNft.tokenURI(0)\" */ _7), _7, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 47:1587:1607  \"basicNft.tokenURI(0)\"\n                if iszero(_8) { revert_forward() }\n                let expr_mpos_1 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1\n                /// @src 47:1587:1607  \"basicNft.tokenURI(0)\"\n                if _8\n                {\n                    let _9 := returndatasize()\n                    returndatacopy(_7, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, /** @src 47:1587:1607  \"basicNft.tokenURI(0)\" */ _9)\n                    finalize_allocation(_7, _9)\n                    expr_mpos_1 := abi_decode_string_fromMemory(_7, add(_7, _9))\n                }\n                /// @src 47:1570:1608  \"abi.encodePacked(basicNft.tokenURI(0))\"\n                let expr_mpos_2 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1570:1608  \"abi.encodePacked(basicNft.tokenURI(0))\"\n                let _10 := add(expr_mpos_2, 0x20)\n                let _11 := sub(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ abi_encode_string_memory_ptr(/** @src 47:1570:1608  \"abi.encodePacked(basicNft.tokenURI(0))\" */ expr_mpos_1, _10), expr_mpos_2)\n                let _12 := /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ not(31)\n                /// @src 47:1570:1608  \"abi.encodePacked(basicNft.tokenURI(0))\"\n                mstore(expr_mpos_2, add(_11, _12))\n                finalize_allocation(expr_mpos_2, _11)\n                /// @src 47:1560:1609  \"keccak256(abi.encodePacked(basicNft.tokenURI(0)))\"\n                let expr := keccak256(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _10, mload(/** @src 47:1560:1609  \"keccak256(abi.encodePacked(basicNft.tokenURI(0)))\" */ expr_mpos_2))\n                /// @src 47:1640:1647  \"PUG_URI\"\n                let expr_mpos_3 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ copy_literal_to_memory_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8()\n                /// @src 47:1623:1648  \"abi.encodePacked(PUG_URI)\"\n                let expr_mpos_4 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 47:1623:1648  \"abi.encodePacked(PUG_URI)\"\n                let _13 := add(expr_mpos_4, /** @src 47:1570:1608  \"abi.encodePacked(basicNft.tokenURI(0))\" */ 0x20)\n                /// @src 47:1623:1648  \"abi.encodePacked(PUG_URI)\"\n                let _14 := sub(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ abi_encode_string_memory_ptr(/** @src 47:1623:1648  \"abi.encodePacked(PUG_URI)\" */ expr_mpos_3, _13), expr_mpos_4)\n                mstore(expr_mpos_4, add(_14, /** @src 47:1570:1608  \"abi.encodePacked(basicNft.tokenURI(0))\" */ _12))\n                /// @src 47:1623:1648  \"abi.encodePacked(PUG_URI)\"\n                finalize_allocation(expr_mpos_4, _14)\n                /// @src 47:1553:1650  \"assert(keccak256(abi.encodePacked(basicNft.tokenURI(0))) == keccak256(abi.encodePacked(PUG_URI)))\"\n                assert_helper(/** @src 47:1560:1649  \"keccak256(abi.encodePacked(basicNft.tokenURI(0))) == keccak256(abi.encodePacked(PUG_URI))\" */ eq(expr, /** @src 47:1613:1649  \"keccak256(abi.encodePacked(PUG_URI))\" */ keccak256(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _13, mload(/** @src 47:1613:1649  \"keccak256(abi.encodePacked(PUG_URI))\" */ expr_mpos_4))))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                return(_1, _1)\n            }\n            function abi_encode_address(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(headStart, 1)\n            }\n            function external_fun_USER()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let memPos := mload(64)\n                mstore(memPos, /** @src 47:775:776  \"1\" */ 0x01)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                return(memPos, 32)\n            }\n            function abi_encode_array_string_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let tail_2 := add(add(headStart, shl(5, length)), 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    tail_2 := abi_encode_string_to_string(mload(srcPtr), tail_2)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetArtifacts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:2818:2836  \"_targetedArtifacts\" */ 0x1a)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _2 := 0x20\n                mpos := add(memPtr, _2)\n                mstore(0, /** @src 6:2818:2836  \"_targetedArtifacts\" */ 0x1a)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let spos := 2481041784956016742021570618494952475758789857281704946240779902470294861374\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_string_dyn(memPos, memPtr), memPos))\n            }\n            function abi_encode_array_struct_FuzzSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let tail_2 := add(add(headStart, shl(5, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    mstore(tail_2, and(mload(_3), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    let memberValue0 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), _2)\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0, add(tail_2, _2))\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetSelectors()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:3309:3327  \"_targetedSelectors\" */ 0x1c)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 6:3309:3327  \"_targetedSelectors\" */ 0x1c)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let spos := 6454973039698199198119942482240540643982028891330163610098731264865829167633\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_8191(memPtr_1)\n                    mstore(memPtr_1, and(sload(spos), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzSelector_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_excludeArtifacts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 6:2384:2402  \"_excludedArtifacts\" */ 0x19)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _2 := 0x20\n                mpos := add(memPtr, _2)\n                mstore(0, /** @src 6:2384:2402  \"_excludedArtifacts\" */ 0x19)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let spos := 67072331549493647622825787457569556318728415786901242217649037894484240406165\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_string_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_failed()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_failed()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function external_fun_basicNft()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 47:497:521  \"BasicNft public basicNft\" */ 34), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_deployer()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 47:527:557  \"DeployBasicNft public deployer\" */ 35), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_isOnZkSyncPrecompiles()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isOnZkSyncPrecompiles()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function external_fun_excludeContracts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 6:2532:2550  \"_excludedContracts\" */ 0x15)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 6:2532:2550  \"_excludedContracts\" */ 0x15)\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let srcPtr := 38878206584692966203415385907871375197469080758325516314230789535345649042549\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1)))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_deployerAddress()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 47:563:593  \"address public deployerAddress\" */ 36), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let memPos := mload(64)\n                mstore(memPos, value)\n                return(memPos, 32)\n            }\n            function external_fun_IS_TEST()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 13:1016:1042  \"bool public IS_TEST = true\" */ 30), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0xff)\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(value)))\n                return(memPos, 32)\n            }\n            /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            function abi_decode_bytes32_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                value0 := mload(headStart)\n            }\n            function revert_forward()\n            {\n                let pos := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 286 @src 2:1243:1447  \"function failed() public view returns (bool) {...\"\n            function fun_failed() -> var_\n            {\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let value := and(sload(/** @src 2:1302:1309  \"_failed\" */ 0x08), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0xff)\n                /// @src 2:1298:1441  \"if (_failed) {...\"\n                switch /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ value\n                case /** @src 2:1298:1441  \"if (_failed) {...\" */ 0 {\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _1 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ mload(64)\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    mstore(_1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(228, 0x0667f9d7))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                    mstore(/** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, 4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    mstore(add(/** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36), shl(210, 0x19985a5b1959))\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _3 := staticcall(gas(), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2, /** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 68, /** @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, 32)\n                    if iszero(_3) { revert_forward() }\n                    let expr := /** @src -1:-1:-1 */ 0\n                    /// @src 2:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    if _3\n                    {\n                        let _4 := 32\n                        if gt(_4, returndatasize()) { _4 := returndatasize() }\n                        finalize_allocation(_1, _4)\n                        expr := abi_decode_bytes32_fromMemory(_1, add(_1, _4))\n                    }\n                    /// @src 2:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    var_ := /** @src 2:1377:1430  \"vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\" */ iszero(iszero(expr))\n                    /// @src 2:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    leave\n                }\n                default /// @src 2:1298:1441  \"if (_failed) {...\"\n                {\n                    /// @src 2:1325:1339  \"return _failed\"\n                    var_ := value\n                    leave\n                }\n            }\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            function array_allocation_size_array_string_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := add(shl(5, length), 0x20)\n            }\n            function array_dataslot_array_string_storage_dyn(ptr) -> data\n            {\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let slotValue := sload(slot)\n                let length := /** @src -1:-1:-1 */ ret\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _1 := 1\n                length := shr(_1, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _2 := 32\n                if eq(outOfPlaceEncoding, lt(length, _2))\n                {\n                    mstore(/** @src -1:-1:-1 */ ret, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(/** @src -1:-1:-1 */ ret, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0x24)\n                }\n                let pos := array_storeLengthForEncoding_array_address_dyn(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(pos, and(slotValue, not(255)))\n                    ret := add(pos, shl(5, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_array_string_storage_dyn(slot)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    for { } lt(i, length) { i := add(i, _2) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, _1)\n                    }\n                    ret := add(pos, i)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function copy_array_from_storage_to_memory_array_string__dyn(slot) -> memPtr\n            {\n                let length := sload(slot)\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr_1 := mload(64)\n                finalize_allocation(memPtr_1, _1)\n                mstore(memPtr_1, length)\n                memPtr := memPtr_1\n                let mpos := memPtr_1\n                let _2 := 0x20\n                mpos := add(memPtr_1, _2)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ slot)\n                let spos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n            }\n            function copy_array_from_storage_to_memory_array_bytes4_dyn(slot) -> memPtr\n            {\n                let _1 := 64\n                memPtr := mload(_1)\n                let pos := memPtr\n                let length := sload(slot)\n                pos := array_storeLengthForEncoding_array_address_dyn(memPtr, length)\n                let srcPtr := array_dataslot_array_string_storage_dyn(slot)\n                let itemCounter := /** @src -1:-1:-1 */ 0\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                for { }\n                lt(add(itemCounter, 7), length)\n                {\n                    itemCounter := add(itemCounter, 8)\n                }\n                {\n                    let data := sload(srcPtr)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _2 := 224\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(_2, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data), pos)\n                    let _3 := 0x20\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _4 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ shl(224, 0xffffffff)\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _5 := 192\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_5, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(pos, _3))\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _6 := 160\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_6, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(pos, _1))\n                    let _7 := 96\n                    /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _8 := 128\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_8, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(pos, _7))\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _7, data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _8))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _6))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _3, data), /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _5))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(pos, /** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _2))\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    pos := add(pos, 256)\n                    srcPtr := add(srcPtr, 1)\n                }\n                let data_1 := sload(srcPtr)\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data_1), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(192, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(160, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(128, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 96, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0x20, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(/** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ data_1, shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                }\n                finalize_allocation(memPtr, sub(pos, memPtr))\n            }\n            /// @ast-id 47249 @src 26:291:623  \"function isOnZkSyncChainId() public view returns (bool) {...\"\n            function fun_isOnZkSyncChainId() -> var\n            {\n                /// @src 26:480:558  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId\"\n                let expr := /** @src 26:480:517  \"block.chainid == zkSyncMainnetChainId\" */ eq(/** @src 26:480:493  \"block.chainid\" */ chainid(), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ sload(/** @src 26:497:517  \"zkSyncMainnetChainId\" */ 0x1f))\n                /// @src 26:480:558  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId\"\n                if iszero(expr)\n                {\n                    expr := /** @src 26:521:558  \"block.chainid == zkSyncSepoliaChainId\" */ eq(/** @src 26:480:493  \"block.chainid\" */ chainid(), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ sload(/** @src 26:538:558  \"zkSyncSepoliaChainId\" */ 0x20))\n                }\n                /// @src 26:480:616  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId...\"\n                let expr_1 := expr\n                if iszero(expr)\n                {\n                    expr_1 := /** @src 26:574:616  \"block.chainid == zkSyncInMemoryNodeChainId\" */ eq(/** @src 26:480:493  \"block.chainid\" */ chainid(), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ sload(/** @src 26:591:616  \"zkSyncInMemoryNodeChainId\" */ 0x21))\n                }\n                /// @src 26:473:616  \"return block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId...\"\n                var := expr_1\n            }\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            function memory_array_index_access_address(baseRef, index) -> addr\n            {\n                if iszero(lt(index, 0x04))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(0x04, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(baseRef, shl(5, index))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                returnValue := and(mload(ptr), sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))\n            }\n            /// @ast-id 47346 @src 26:629:1726  \"function isOnZkSyncPrecompiles() public returns (bool isZkSync) {...\"\n            function fun_isOnZkSyncPrecompiles() -> var_isZkSync\n            {\n                /// @src 26:678:691  \"bool isZkSync\"\n                var_isZkSync := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0\n                /// @src 26:678:691  \"bool isZkSync\"\n                let var_isZkSync_1 := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0\n                let memPtr := mload(64)\n                finalize_allocation_13093(memPtr)\n                mstore(memPtr, 3)\n                let _1 := 4\n                mstore(/** @src 26:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, 32), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                mstore(/** @src 26:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 64), 5)\n                mstore(/** @src 26:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, 96), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 8)\n                /// @src 26:1366:1379  \"uint256 i = 0\"\n                let var_i := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ var_isZkSync_1\n                /// @src 26:1361:1695  \"for (uint256 i = 0; i < targets.length; i++) {...\"\n                for { }\n                /** @src 26:1381:1399  \"i < targets.length\" */ lt(var_i, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _1)\n                /// @src 26:1366:1379  \"uint256 i = 0\"\n                {\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    if eq(var_i, not(0))\n                    {\n                        mstore(var_isZkSync_1, shl(224, 0x4e487b71))\n                        mstore(_1, 0x11)\n                        revert(var_isZkSync_1, 0x24)\n                    }\n                    /// @src 26:1401:1404  \"i++\"\n                    var_i := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ add(var_i, 1)\n                }\n                /// @src 26:1401:1404  \"i++\"\n                {\n                    /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                    let _2 := 1\n                    /// @src 26:1590:1685  \"if (!success) {...\"\n                    if /** @src 26:1594:1602  \"!success\" */ cleanup_bool(iszero(/** @src 26:1487:1577  \"assembly {...\" */ call(gas(), /** @src 26:1463:1473  \"targets[i]\" */ read_from_memoryt_address(memory_array_index_access_address(memPtr, var_i)), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2, var_isZkSync_1, var_isZkSync_1, var_isZkSync_1, var_isZkSync_1)))\n                    /// @src 26:1590:1685  \"if (!success) {...\"\n                    {\n                        /// @src 26:1655:1670  \"return isZkSync\"\n                        var_isZkSync := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ _2\n                        /// @src 26:1655:1670  \"return isZkSync\"\n                        leave\n                    }\n                }\n                /// @src 26:1704:1719  \"return isZkSync\"\n                var_isZkSync := var_isZkSync\n            }\n            /// @ast-id 47361 @src 26:1732:1909  \"function isZkSyncChain() public returns (bool isZkSync) {...\"\n            function fun_isZkSyncChain() -> var_isZkSync\n            {\n                /// @src 26:1798:1863  \"if (isOnZkSyncChainId()) {...\"\n                if /** @src 26:1802:1821  \"isOnZkSyncChainId()\" */ fun_isOnZkSyncChainId()\n                /// @src 26:1798:1863  \"if (isOnZkSyncChainId()) {...\"\n                {\n                    /// @src 26:1837:1852  \"return isZkSync\"\n                    var_isZkSync := /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0\n                    /// @src 26:1837:1852  \"return isZkSync\"\n                    leave\n                }\n                /// @src 26:1872:1902  \"return isOnZkSyncPrecompiles()\"\n                var_isZkSync := /** @src 26:1879:1902  \"isOnZkSyncPrecompiles()\" */ fun_isOnZkSyncPrecompiles()\n            }\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            function update_storage_value_offsett_contract_BasicNft_to_contract_BasicNft(value)\n            {\n                sstore(/** @src 47:955:980  \"basicNft = new BasicNft()\" */ 0x22, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ or(and(sload(/** @src 47:955:980  \"basicNft = new BasicNft()\" */ 0x22), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(value, sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))))\n            }\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            function update_storage_value_offsett_contract_BasicNft_to_contract_BasicNft_8189(value)\n            {\n                sstore(/** @src 47:854:885  \"deployer = new DeployBasicNft()\" */ 0x23, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ or(and(sload(/** @src 47:854:885  \"deployer = new DeployBasicNft()\" */ 0x23), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(value, sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))))\n            }\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            function abi_decode_contract_BasicNft_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                if iszero(eq(value, and(value, sub(shl(160, /** @src 47:966:980  \"new BasicNft()\" */ 1), 1))))\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                value0 := value\n            }\n            function abi_decode_string_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let offset := mload(headStart)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1) { revert(0, 0) }\n                let _2 := add(headStart, offset)\n                if iszero(slt(add(_2, 0x1f), dataEnd))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let _3 := mload(_2)\n                if gt(_3, _1) { panic_error_0x41() }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_3, 0x1f), /** @src 47:1078:1111  \"abi.encodePacked(basicNft.name())\" */ not(31)), /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 32))\n                mstore(memPtr, _3)\n                if gt(add(add(_2, _3), 32), dataEnd)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n                value0 := memPtr\n            }\n            function abi_encode_string_memory_ptr(value, pos) -> end\n            {\n                let length := mload(value)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, length)\n            }\n            function copy_literal_to_memory_e5d21699003d762b953d66adecbe4f97c4791cae2f281f96a4beb7efcb7bbcf6() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_8191(memPtr_1)\n                mstore(memPtr_1, 5)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"Dogie\")\n            }\n            /// @src 47:444:451  \"\\\"Dogie\\\"\"\n            function assert_helper(condition)\n            {\n                if iszero(condition)\n                {\n                    mstore(0, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ shl(224, 0x4e487b71))\n                    /// @src 47:444:451  \"\\\"Dogie\\\"\"\n                    mstore(4, 0x01)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_literal_to_memory_b5b35d1f7dc7cf1448a70456de4980702e1fdae4e057d31003c0e1e4b3c4bde2() -> memPtr\n            {\n                /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8191(memPtr_1)\n                mstore(memPtr_1, /** @src 47:444:451  \"\\\"Dogie\\\"\" */ 3)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"DOG\")\n            }\n            /// @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\"\n            function abi_encode_rational_by(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                /// @src 2:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                mstore(headStart, /** @src 47:361:2079  \"contract BasicNftTest is Test, ZkSyncChainChecker {...\" */ 0)\n            }\n        }\n        /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 3:\"lib/forge-std/src/StdChains.sol\", 4:\"lib/forge-std/src/StdCheats.sol\", 12:\"lib/forge-std/src/StdUtils.sol\", 40:\"script/DeployBasicNft.s.sol\"\n        object \"DeployBasicNft_50422\" {\n            code {\n                {\n                    /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    sstore(/** @src 3:3166:3170  \"true\" */ 0x0c, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ or(and(sload(/** @src 3:3166:3170  \"true\" */ 0x0c), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ not(16711935)), 65537))\n                    sstore(/** @src 40:279:345  \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 0x0d, 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80)\n                    /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                    let _2 := datasize(\"DeployBasicNft_50422_deployed\")\n                    codecopy(_1, dataoffset(\"DeployBasicNft_50422_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/Script.sol\", 40:\"script/DeployBasicNft.s.sol\"\n            object \"DeployBasicNft_50422_deployed\" {\n                code {\n                    {\n                        /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _3 := 0\n                            switch shr(224, calldataload(_3))\n                            case 0x910dde5e {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                mstore(_1, sload(/** @src 40:236:345  \"uint256 public DEFAULT_ANVIL_PRIVATE_KEY = 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 13))\n                                /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                                return(_1, 32)\n                            }\n                            case 0xc0406226 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let _4 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 40:437:456  \"vm.startBroadcast()\"\n                                if iszero(extcodesize(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4))\n                                /// @src 40:437:456  \"vm.startBroadcast()\"\n                                {\n                                    /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                                    revert(_3, _3)\n                                }\n                                /// @src 40:437:456  \"vm.startBroadcast()\"\n                                let _5 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                                /// @src 40:437:456  \"vm.startBroadcast()\"\n                                mstore(_5, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fb5297f))\n                                /// @src 40:437:456  \"vm.startBroadcast()\"\n                                let _6 := call(gas(), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4, _3, /** @src 40:437:456  \"vm.startBroadcast()\" */ _5, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 4, /** @src 40:437:456  \"vm.startBroadcast()\" */ _5, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3)\n                                /// @src 40:437:456  \"vm.startBroadcast()\"\n                                if iszero(_6)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 40:437:456  \"vm.startBroadcast()\"\n                                if _6\n                                {\n                                    finalize_allocation(_5)\n                                    /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                                    _3 := _3\n                                }\n                                /// @src 40:486:500  \"new BasicNft()\"\n                                let _7 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                                /// @src 40:486:500  \"new BasicNft()\"\n                                let _8 := datasize(\"BasicNft_50752\")\n                                let _9 := add(_7, _8)\n                                if or(gt(_9, 0xffffffffffffffff), lt(_9, _7))\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    mstore(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 4, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x41)\n                                    revert(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x24)\n                                }\n                                /// @src 40:486:500  \"new BasicNft()\"\n                                datacopy(_7, dataoffset(\"BasicNft_50752\"), _8)\n                                let expr_address := create(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 40:486:500  \"new BasicNft()\" */ _7, sub(_9, _7))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_1 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_1, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 40:510:528  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4))\n                                /// @src 40:510:528  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                                    revert(_3, _3)\n                                }\n                                /// @src 40:510:528  \"vm.stopBroadcast()\"\n                                let _10 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                                /// @src 40:510:528  \"vm.stopBroadcast()\"\n                                mstore(_10, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n                                /// @src 40:510:528  \"vm.stopBroadcast()\"\n                                let _11 := call(gas(), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _4, _3, /** @src 40:510:528  \"vm.stopBroadcast()\" */ _10, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 4, /** @src 40:510:528  \"vm.stopBroadcast()\" */ _10, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3)\n                                /// @src 40:510:528  \"vm.stopBroadcast()\"\n                                if iszero(_11)\n                                {\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_2 := /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ mload(_2)\n                                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_2, /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ _3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 40:510:528  \"vm.stopBroadcast()\"\n                                if _11\n                                {\n                                    finalize_allocation(_10)\n                                    /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                                    if _3 { revert(_3, _3) }\n                                }\n                                let memPos := mload(_2)\n                                mstore(memPos, and(expr_address, sub(shl(160, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 1), 1)))\n                                /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                                return(memPos, 32)\n                            }\n                            case 0xe83332fa {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let _12 := sload(/** @src 40:351:377  \"uint256 public deployerKey\" */ 14)\n                                /// @src 40:196:562  \"contract DeployBasicNft is Script {...\"\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, _12)\n                                return(memPos_1, 32)\n                            }\n                            case 0xf8ccbf47 {\n                                if callvalue() { revert(_3, _3) }\n                                if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                let value := and(shr(16, sload(/** @src 1:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 40:196:562  \"contract DeployBasicNft is Script {...\" */ 0xff)\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, iszero(iszero(value)))\n                                return(memPos_2, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                    function finalize_allocation(memPtr)\n                    {\n                        if gt(memPtr, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, memPtr)\n                    }\n                }\n                /// @use-src 28:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 29:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 30:\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\", 32:\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 36:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 37:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\", 43:\"src/BasicNft.sol\"\n                object \"BasicNft_50752\" {\n                    code {\n                        {\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let _1 := memoryguard(0x80)\n                            if callvalue() { revert(0, 0) }\n                            let _2 := 64\n                            let newFreePtr := add(_1, _2)\n                            let _3 := sub(shl(64, 1), 1)\n                            if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                            }\n                            mstore(_2, newFreePtr)\n                            mstore(_1, 5)\n                            let _4 := 32\n                            mstore(add(_1, _4), \"Dogie\")\n                            let memPtr := mload(_2)\n                            let newFreePtr_1 := add(memPtr, _2)\n                            if or(gt(newFreePtr_1, _3), lt(newFreePtr_1, memPtr))\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                            }\n                            mstore(_2, newFreePtr_1)\n                            mstore(memPtr, 3)\n                            mstore(add(memPtr, _4), \"DOG\")\n                            let newLen := mload(_1)\n                            if gt(newLen, _3)\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                            }\n                            /// @src -1:-1:-1\n                            let _5 := 0\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let _6 := sload(/** @src -1:-1:-1 */ _5)\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let length := /** @src -1:-1:-1 */ _5\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let _7 := 1\n                            length := shr(_7, _6)\n                            let outOfPlaceEncoding := and(_6, _7)\n                            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                            if eq(outOfPlaceEncoding, lt(length, _4))\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x22)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                            }\n                            let _8 := 31\n                            if gt(length, _8)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, _5)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let data := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                                let deleteStart := add(data, shr(5, add(newLen, _8)))\n                                if lt(newLen, _4) { deleteStart := data }\n                                let _9 := add(data, shr(5, add(length, _8)))\n                                let start := deleteStart\n                                for { } lt(start, _9) { start := add(start, _7) }\n                                {\n                                    sstore(start, /** @src -1:-1:-1 */ _5)\n                                }\n                            }\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let srcOffset := /** @src -1:-1:-1 */ _5\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            srcOffset := _4\n                            switch gt(newLen, _8)\n                            case 1 {\n                                let loopEnd := and(newLen, not(31))\n                                mstore(/** @src -1:-1:-1 */ _5, _5)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dstPtr := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                                let i := /** @src -1:-1:-1 */ _5\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                for { } lt(i, loopEnd) { i := add(i, _4) }\n                                {\n                                    sstore(dstPtr, mload(add(_1, srcOffset)))\n                                    dstPtr := add(dstPtr, _7)\n                                    srcOffset := add(srcOffset, _4)\n                                }\n                                if lt(loopEnd, newLen)\n                                {\n                                    let lastValue := mload(add(_1, srcOffset))\n                                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                }\n                                sstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ add(shl(_7, newLen), _7))\n                            }\n                            default {\n                                let value := /** @src -1:-1:-1 */ _5\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                if newLen\n                                {\n                                    value := mload(add(_1, srcOffset))\n                                }\n                                sstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_7, newLen)))\n                            }\n                            let newLen_1 := mload(memPtr)\n                            if gt(newLen_1, _3)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                            }\n                            let _10 := sload(_7)\n                            let length_1 := /** @src -1:-1:-1 */ _5\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            length_1 := shr(_7, _10)\n                            let outOfPlaceEncoding_1 := and(_10, _7)\n                            if iszero(outOfPlaceEncoding_1)\n                            {\n                                length_1 := and(length_1, 0x7f)\n                            }\n                            if eq(outOfPlaceEncoding_1, lt(length_1, _4))\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x22)\n                                revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                            }\n                            if gt(length_1, _8)\n                            {\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _7)\n                                let data_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _8)))\n                                if lt(newLen_1, _4) { deleteStart_1 := data_1 }\n                                let _11 := add(data_1, shr(5, add(length_1, _8)))\n                                let start_1 := deleteStart_1\n                                for { } lt(start_1, _11) { start_1 := add(start_1, _7) }\n                                {\n                                    sstore(start_1, /** @src -1:-1:-1 */ _5)\n                                }\n                            }\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let srcOffset_1 := /** @src -1:-1:-1 */ _5\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            srcOffset_1 := _4\n                            switch gt(newLen_1, _8)\n                            case 1 {\n                                let loopEnd_1 := and(newLen_1, not(31))\n                                mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _7)\n                                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                                let i_1 := /** @src -1:-1:-1 */ _5\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _4) }\n                                {\n                                    sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                                    dstPtr_1 := add(dstPtr_1, _7)\n                                    srcOffset_1 := add(srcOffset_1, _4)\n                                }\n                                if lt(loopEnd_1, newLen_1)\n                                {\n                                    let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                                }\n                                sstore(_7, add(shl(_7, newLen_1), _7))\n                            }\n                            default {\n                                let value_1 := /** @src -1:-1:-1 */ _5\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                if newLen_1\n                                {\n                                    value_1 := mload(add(memPtr, srcOffset_1))\n                                }\n                                sstore(_7, or(and(value_1, not(shr(shl(3, newLen_1), not(0)))), shl(_7, newLen_1)))\n                            }\n                            sstore(/** @src 43:361:379  \"s_tokenCounter = 0\" */ 0x07, /** @src -1:-1:-1 */ _5)\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let _12 := mload(_2)\n                            let _13 := datasize(\"BasicNft_50752_deployed\")\n                            codecopy(_12, dataoffset(\"BasicNft_50752_deployed\"), _13)\n                            return(_12, _13)\n                        }\n                    }\n                    /// @use-src 29:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 36:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 43:\"src/BasicNft.sol\"\n                    object \"BasicNft_50752_deployed\" {\n                        code {\n                            {\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _1 := memoryguard(0x80)\n                                let _2 := 64\n                                mstore(_2, _1)\n                                let _3 := 4\n                                if iszero(lt(calldatasize(), _3))\n                                {\n                                    let _4 := 0\n                                    switch shr(224, calldataload(_4))\n                                    case 0x01ffc9a7 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let value := calldataload(_3)\n                                        let _5 := and(value, shl(224, 0xffffffff))\n                                        if iszero(eq(value, _5)) { revert(_4, _4) }\n                                        /// @src 29:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                        let expr := /** @src 29:1698:1738  \"interfaceId == type(IERC721).interfaceId\" */ eq(_5, /** @src 29:1713:1738  \"type(IERC721).interfaceId\" */ shl(224, 0x80ac58cd))\n                                        /// @src 29:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                        if iszero(expr)\n                                        {\n                                            expr := /** @src 29:1754:1802  \"interfaceId == type(IERC721Metadata).interfaceId\" */ eq(_5, /** @src 29:1769:1802  \"type(IERC721Metadata).interfaceId\" */ shl(224, 0x5b5e139f))\n                                        }\n                                        /// @src 29:1698:1854  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                        let expr_1 := expr\n                                        if iszero(expr)\n                                        {\n                                            expr_1 := /** @src 36:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_5, /** @src 36:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                        }\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        mstore(_1, iszero(iszero(expr_1)))\n                                        return(_1, 32)\n                                    }\n                                    case 0x06fdde03 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let memPtr := mload(_2)\n                                        let ret := _4\n                                        let slotValue := sload(_4)\n                                        let length := extract_byte_array_length(slotValue)\n                                        mstore(memPtr, length)\n                                        let _6 := 0x20\n                                        let _7 := 1\n                                        switch and(slotValue, _7)\n                                        case 0 {\n                                            mstore(add(memPtr, _6), and(slotValue, not(255)))\n                                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _6)\n                                        }\n                                        case 1 {\n                                            mstore(_4, _4)\n                                            let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                                            let i := _4\n                                            for { } lt(i, length) { i := add(i, _6) }\n                                            {\n                                                mstore(add(add(memPtr, i), _6), sload(dataPos))\n                                                dataPos := add(dataPos, _7)\n                                            }\n                                            ret := add(add(memPtr, i), _6)\n                                        }\n                                        finalize_allocation(memPtr, sub(ret, memPtr))\n                                        let memPos := mload(_2)\n                                        mstore(memPos, _6)\n                                        return(memPos, sub(abi_encode_string(memPtr, add(memPos, _6)), memPos))\n                                    }\n                                    case 0x081812fc {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let value_1 := calldataload(_3)\n                                        /// @src 29:3583:3605  \"_requireOwned(tokenId)\"\n                                        pop(fun_requireOwned(value_1))\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        mstore(_4, value_1)\n                                        mstore(32, _3)\n                                        let cleaned := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                        let memPos_1 := mload(_2)\n                                        mstore(memPos_1, cleaned)\n                                        return(memPos_1, 32)\n                                    }\n                                    case 0x095ea7b3 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                        let value0 := abi_decode_address()\n                                        let value_2 := calldataload(36)\n                                        /// @src 29:14943:14965  \"_requireOwned(tokenId)\"\n                                        let expr_2 := fun_requireOwned(value_2)\n                                        /// @src 29:15093:15128  \"auth != address(0) && owner != auth\"\n                                        let expr_3 := /** @src 29:15093:15111  \"auth != address(0)\" */ iszero(iszero(/** @src 34:735:745  \"msg.sender\" */ caller()))\n                                        /// @src 29:15093:15128  \"auth != address(0) && owner != auth\"\n                                        if expr_3\n                                        {\n                                            expr_3 := /** @src 29:15115:15128  \"owner != auth\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:15115:15128  \"owner != auth\" */ expr_2, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1)), /** @src 34:735:745  \"msg.sender\" */ caller()))\n                                        }\n                                        /// @src 29:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                        let expr_4 := expr_3\n                                        if expr_3\n                                        {\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(_4, and(expr_2, sub(shl(160, 1), 1)))\n                                            mstore(0x20, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            let _8 := keccak256(_4, _2)\n                                            mstore(_4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(0x20, _8)\n                                            /// @src 29:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                            expr_4 := /** @src 29:15132:15162  \"!isApprovedForAll(owner, auth)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(_4, _2)), 0xff))\n                                        }\n                                        /// @src 29:15089:15231  \"if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {...\"\n                                        if expr_4\n                                        {\n                                            /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                            let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                            mstore(_9, shl(224, 0xa9fbf51f))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:15189:15216  \"ERC721InvalidApprover(auth)\" */ add(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                            /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                            revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                        }\n                                        let _10 := sub(shl(160, 1), 1)\n                                        let _11 := and(/** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ value0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _10)\n                                        /// @src 29:15283:15311  \"Approval(owner, to, tokenId)\"\n                                        log4(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, _4, /** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ expr_2, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _10), _11, /** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ value_2)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        mstore(_4, value_2)\n                                        mstore(0x20, _3)\n                                        let _12 := keccak256(_4, _2)\n                                        sstore(_12, or(and(sload(_12), shl(160, 0xffffffffffffffffffffffff)), _11))\n                                        return(_4, _4)\n                                    }\n                                    case 0x23b872dd {\n                                        if callvalue() { revert(_4, _4) }\n                                        let param, param_1, param_2 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                        fun_transferFrom(param, param_1, param_2)\n                                        return(_4, _4)\n                                    }\n                                    case 0x42842e0e {\n                                        if callvalue() { revert(_4, _4) }\n                                        let param_3, param_4, param_5 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                        let memPtr_1 := mload(_2)\n                                        finalize_allocation_14953(memPtr_1)\n                                        mstore(memPtr_1, _4)\n                                        /// @src 29:5121:5128  \"tokenId\"\n                                        fun_transferFrom(param_3, param_4, param_5)\n                                        /// @src 29:5181:5185  \"data\"\n                                        fun_checkOnERC721Received(param_3, param_4, param_5, memPtr_1)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0x6352211e {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        /// @src 29:2267:2296  \"return _requireOwned(tokenId)\"\n                                        let var := /** @src 29:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ calldataload(_3))\n                                        let memPos_2 := mload(_2)\n                                        mstore(memPos_2, and(var, sub(shl(160, 1), 1)))\n                                        return(memPos_2, 32)\n                                    }\n                                    case 0x6e02007d {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let _13 := sload(/** @src 43:908:922  \"s_tokenCounter\" */ 0x07)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let memPos_3 := mload(_2)\n                                        mstore(memPos_3, _13)\n                                        return(memPos_3, 32)\n                                    }\n                                    case 0x70a08231 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                        let _14 := and(abi_decode_address(), sub(shl(160, 1), 1))\n                                        /// @src 29:2002:2089  \"if (owner == address(0)) {...\"\n                                        if /** @src 29:2006:2025  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _14)\n                                        /// @src 29:2002:2089  \"if (owner == address(0)) {...\"\n                                        {\n                                            /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                            let _15 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                            mstore(_15, shl(226, 0x22718ad9))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\" */ add(_15, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                            /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                            revert(_15, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                        }\n                                        mstore(_4, _14)\n                                        mstore(32, /** @src 29:2105:2114  \"_balances\" */ 0x03)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let _16 := sload(keccak256(_4, _2))\n                                        let memPos_4 := mload(_2)\n                                        mstore(memPos_4, _16)\n                                        return(memPos_4, 32)\n                                    }\n                                    case 0x95d89b41 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                        let memPtr_2 := mload(_2)\n                                        let ret_1 := _4\n                                        /// @src 29:2597:2604  \"_symbol\"\n                                        let _17 := 0x01\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let slotValue_1 := sload(/** @src 29:2597:2604  \"_symbol\" */ _17)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let length_1 := extract_byte_array_length(slotValue_1)\n                                        mstore(memPtr_2, length_1)\n                                        let _18 := 0x20\n                                        switch and(slotValue_1, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                        case /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0 {\n                                            mstore(add(memPtr_2, _18), and(slotValue_1, not(255)))\n                                            ret_1 := add(add(memPtr_2, shl(5, iszero(iszero(length_1)))), _18)\n                                        }\n                                        case 1 {\n                                            mstore(_4, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            let dataPos_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                                            let i_1 := _4\n                                            for { } lt(i_1, length_1) { i_1 := add(i_1, _18) }\n                                            {\n                                                mstore(add(add(memPtr_2, i_1), _18), sload(dataPos_1))\n                                                dataPos_1 := add(dataPos_1, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                            }\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            ret_1 := add(add(memPtr_2, i_1), _18)\n                                        }\n                                        finalize_allocation(memPtr_2, sub(ret_1, memPtr_2))\n                                        let memPos_5 := mload(_2)\n                                        mstore(memPos_5, _18)\n                                        return(memPos_5, sub(abi_encode_string(memPtr_2, add(memPos_5, _18)), memPos_5))\n                                    }\n                                    case 0xa22cb465 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                        let value0_1 := abi_decode_address()\n                                        let value_3 := calldataload(36)\n                                        let _19 := iszero(iszero(value_3))\n                                        if iszero(eq(value_3, _19)) { revert(_4, _4) }\n                                        let _20 := and(/** @src 29:15698:15720  \"operator == address(0)\" */ value0_1, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 29:15694:15785  \"if (operator == address(0)) {...\"\n                                        if /** @src 29:15698:15720  \"operator == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _20)\n                                        /// @src 29:15694:15785  \"if (operator == address(0)) {...\"\n                                        {\n                                            /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                            let _21 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                            mstore(_21, shl(227, 0x0b611743))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:15743:15774  \"ERC721InvalidOperator(operator)\" */ add(_21, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _20)\n                                            /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                            revert(_21, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                        }\n                                        mstore(_4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        mstore(32, /** @src 29:15794:15812  \"_operatorApprovals\" */ 0x05)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let _22 := keccak256(_4, _2)\n                                        mstore(_4, _20)\n                                        mstore(32, _22)\n                                        let dataSlot := keccak256(_4, _2)\n                                        let value_4 := and(sload(dataSlot), not(255))\n                                        sstore(dataSlot, or(value_4, and(_19, 255)))\n                                        /// @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                        let _23 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                        mstore(_23, _19)\n                                        /// @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                        log3(_23, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 32, /** @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, /** @src 34:735:745  \"msg.sender\" */ caller(), /** @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ _20)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0xb88d4fde {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                                        let value0_2 := abi_decode_address()\n                                        let value1 := abi_decode_address_7869()\n                                        let value_5 := calldataload(68)\n                                        let offset := calldataload(100)\n                                        if gt(offset, 0xffffffffffffffff) { revert(_4, _4) }\n                                        if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                                        let array := abi_decode_available_length_bytes(add(offset, 36), calldataload(add(_3, offset)), calldatasize())\n                                        /// @src 29:5121:5128  \"tokenId\"\n                                        fun_transferFrom(value0_2, value1, value_5)\n                                        /// @src 29:5181:5185  \"data\"\n                                        fun_checkOnERC721Received(value0_2, value1, value_5, array)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        return(_4, _4)\n                                    }\n                                    case 0xc87b56dd {\n                                        if callvalue() { revert(_4, _4) }\n                                        let _24 := 32\n                                        if slt(add(calldatasize(), not(3)), _24) { revert(_4, _4) }\n                                        let value_6 := calldataload(_3)\n                                        /// @src 43:686:782  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                        if /** @src 43:690:720  \"ownerOf(tokenId) == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 43:690:706  \"ownerOf(tokenId)\" */ value_6), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1)))\n                                        /// @src 43:686:782  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                        {\n                                            /// @src 43:743:771  \"BasicNft__TokenUriNotFound()\"\n                                            let _25 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 43:743:771  \"BasicNft__TokenUriNotFound()\"\n                                            mstore(_25, shl(224, 0x7598996f))\n                                            revert(_25, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3)\n                                        }\n                                        mstore(_4, value_6)\n                                        mstore(_24, /** @src 43:798:812  \"s_tokenIdToUri\" */ 0x06)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let dataSlot_1 := keccak256(_4, _2)\n                                        let memPtr_3 := mload(_2)\n                                        let ret_2 := _4\n                                        let slotValue_2 := sload(dataSlot_1)\n                                        let length_2 := extract_byte_array_length(slotValue_2)\n                                        mstore(memPtr_3, length_2)\n                                        let _26 := 1\n                                        switch and(slotValue_2, _26)\n                                        case 0 {\n                                            mstore(add(memPtr_3, _24), and(slotValue_2, not(255)))\n                                            ret_2 := add(add(memPtr_3, shl(5, iszero(iszero(length_2)))), _24)\n                                        }\n                                        case 1 {\n                                            mstore(_4, dataSlot_1)\n                                            let dataPos_2 := keccak256(_4, _24)\n                                            let i_2 := _4\n                                            for { } lt(i_2, length_2) { i_2 := add(i_2, _24) }\n                                            {\n                                                mstore(add(add(memPtr_3, i_2), _24), sload(dataPos_2))\n                                                dataPos_2 := add(dataPos_2, _26)\n                                            }\n                                            ret_2 := add(add(memPtr_3, i_2), _24)\n                                        }\n                                        finalize_allocation(memPtr_3, sub(ret_2, memPtr_3))\n                                        let memPos_6 := mload(_2)\n                                        mstore(memPos_6, _24)\n                                        return(memPos_6, sub(abi_encode_string(memPtr_3, add(memPos_6, _24)), memPos_6))\n                                    }\n                                    case 0xda86f4a9 {\n                                        if callvalue() { revert(_4, _4) }\n                                        let _27 := 32\n                                        if slt(add(calldatasize(), not(3)), _27) { revert(_4, _4) }\n                                        let offset_1 := calldataload(_3)\n                                        let _28 := 0xffffffffffffffff\n                                        if gt(offset_1, _28) { revert(_4, _4) }\n                                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_4, _4) }\n                                        let _29 := 36\n                                        let array_1 := abi_decode_available_length_bytes(add(offset_1, _29), calldataload(add(_3, offset_1)), calldatasize())\n                                        mstore(_4, sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07))\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        mstore(_27, /** @src 43:450:464  \"s_tokenIdToUri\" */ 0x06)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let dataSlot_2 := keccak256(_4, _2)\n                                        let newLen := mload(array_1)\n                                        if gt(newLen, _28)\n                                        {\n                                            mstore(_4, shl(224, 0x4e487b71))\n                                            mstore(_3, 0x41)\n                                            revert(_4, _29)\n                                        }\n                                        let _30 := extract_byte_array_length(sload(dataSlot_2))\n                                        if gt(_30, 0x1f)\n                                        {\n                                            mstore(_4, dataSlot_2)\n                                            let data := keccak256(_4, _27)\n                                            let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                                            if lt(newLen, _27) { deleteStart := data }\n                                            let _31 := add(data, shr(5, add(_30, 0x1f)))\n                                            let start := deleteStart\n                                            for { } lt(start, _31) { start := add(start, 1) }\n                                            { sstore(start, _4) }\n                                        }\n                                        let srcOffset := _4\n                                        srcOffset := _27\n                                        switch gt(newLen, 0x1f)\n                                        case 1 {\n                                            let loopEnd := and(newLen, not(31))\n                                            mstore(_4, dataSlot_2)\n                                            let dstPtr := keccak256(_4, _27)\n                                            let i_3 := _4\n                                            for { } lt(i_3, loopEnd) { i_3 := add(i_3, _27) }\n                                            {\n                                                sstore(dstPtr, mload(add(array_1, srcOffset)))\n                                                dstPtr := add(dstPtr, 1)\n                                                srcOffset := add(srcOffset, _27)\n                                            }\n                                            if lt(loopEnd, newLen)\n                                            {\n                                                let lastValue := mload(add(array_1, srcOffset))\n                                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                            }\n                                            sstore(dataSlot_2, add(shl(1, newLen), 1))\n                                        }\n                                        default {\n                                            let value_7 := _4\n                                            if newLen\n                                            {\n                                                value_7 := mload(add(array_1, srcOffset))\n                                            }\n                                            sstore(dataSlot_2, or(and(value_7, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                                        }\n                                        let _32 := sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let memPtr_4 := mload(_2)\n                                        finalize_allocation_14953(memPtr_4)\n                                        mstore(memPtr_4, _4)\n                                        /// @src 29:10018:10105  \"if (to == address(0)) {...\"\n                                        if /** @src 29:10022:10038  \"to == address(0)\" */ iszero(/** @src 43:511:521  \"msg.sender\" */ caller())\n                                        /// @src 29:10018:10105  \"if (to == address(0)) {...\"\n                                        {\n                                            /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                            let _33 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                            mstore(_33, shl(225, 0x32505749))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ add(_33, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                            /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                            revert(_33, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                        }\n                                        mstore(_4, _32)\n                                        mstore(_27, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let cleaned_1 := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                        /// @src 29:9161:9179  \"from != address(0)\"\n                                        let _34 := iszero(iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned_1))\n                                        /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                        if /** @src 29:9161:9179  \"from != address(0)\" */ _34\n                                        /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                        {\n                                            /// @src 29:9319:9324  \"false\"\n                                            fun_approve(_32)\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(_4, cleaned_1)\n                                            mstore(_27, /** @src 29:9368:9377  \"_balances\" */ 0x03)\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            let dataSlot_3 := keccak256(_4, _2)\n                                            sstore(dataSlot_3, add(sload(/** @src 29:9368:9388  \"_balances[from] -= 1\" */ dataSlot_3), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ not(0)))\n                                        }\n                                        mstore(_4, /** @src 43:511:521  \"msg.sender\" */ caller())\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        mstore(_27, /** @src 29:9487:9496  \"_balances\" */ 0x03)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let dataSlot_4 := keccak256(_4, _2)\n                                        sstore(dataSlot_4, add(sload(/** @src 29:9487:9505  \"_balances[to] += 1\" */ dataSlot_4), /** @src 29:9427:9443  \"to != address(0)\" */ 1))\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        mstore(_4, _32)\n                                        mstore(_27, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let _35 := keccak256(_4, _2)\n                                        sstore(_35, or(and(sload(_35), shl(160, 0xffffffffffffffffffffffff)), /** @src 43:511:521  \"msg.sender\" */ caller()))\n                                        /// @src 29:9577:9604  \"Transfer(from, to, tokenId)\"\n                                        log4(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, _4, /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned_1, /** @src 43:511:521  \"msg.sender\" */ caller(), /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ _32)\n                                        /// @src 29:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                        if /** @src 29:10184:10211  \"previousOwner != address(0)\" */ _34\n                                        /// @src 29:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                        {\n                                            /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                            let _36 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                            mstore(_36, shl(225, 0x39e35637))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:10234:10265  \"ERC721InvalidSender(address(0))\" */ add(_36, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                            /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                            revert(_36, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                        }\n                                        /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                        if /** @src 29:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 29:17034:17048  \"to.code.length\" */ extcodesize(/** @src 43:511:521  \"msg.sender\" */ caller())))\n                                        /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                        {\n                                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            let _37 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            let _38 := shl(225, 0x0a85bd01)\n                                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            mstore(_37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _38)\n                                            mstore(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29), _4)\n                                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), _32)\n                                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100), 128)\n                                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            let trySuccessCondition := call(gas(), /** @src 43:511:521  \"msg.sender\" */ caller(), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, sub(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ abi_encode_string(memPtr_4, add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 132)), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37), _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27)\n                                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            let expr_5 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4\n                                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                            if trySuccessCondition\n                                            {\n                                                let _39 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27\n                                                /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                                if gt(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ returndatasize()) { _39 := returndatasize() }\n                                                finalize_allocation(_37, _39)\n                                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                                if slt(sub(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_37, _39), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _37), _27) { revert(_4, _4) }\n                                                let value_8 := mload(_37)\n                                                if iszero(eq(value_8, and(value_8, shl(224, 0xffffffff)))) { revert(_4, _4) }\n                                                /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                                expr_5 := value_8\n                                            }\n                                            /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                            switch iszero(trySuccessCondition)\n                                            case 0 {\n                                                /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                                if /** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr_5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0xffffffff)), _38))\n                                                /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                                {\n                                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                                    let _40 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                                    mstore(_40, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                                    mstore(/** @src 29:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_40, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                                    revert(_40, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                                }\n                                            }\n                                            default /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                            {\n                                                /// @src 29:17331:17684  \"catch (bytes memory reason) {...\"\n                                                let data_1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4\n                                                switch returndatasize()\n                                                case 0 { data_1 := 96 }\n                                                default {\n                                                    let _41 := returndatasize()\n                                                    let _42 := array_allocation_size_bytes(_41)\n                                                    let memPtr_5 := mload(_2)\n                                                    finalize_allocation(memPtr_5, _42)\n                                                    mstore(memPtr_5, _41)\n                                                    data_1 := memPtr_5\n                                                    returndatacopy(add(memPtr_5, _27), _4, returndatasize())\n                                                }\n                                                let _43 := mload(/** @src 29:17381:17394  \"reason.length\" */ data_1)\n                                                /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                                switch /** @src 29:17381:17399  \"reason.length == 0\" */ iszero(_43)\n                                                case /** @src 29:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                                    /// @src 29:17557:17652  \"assembly {...\"\n                                                    revert(add(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27, /** @src 29:17557:17652  \"assembly {...\" */ data_1), _43)\n                                                }\n                                                default /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                                {\n                                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                                    let _44 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                                    mstore(_44, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                                    mstore(/** @src 29:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_44, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                                    revert(_44, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                                }\n                                            }\n                                        }\n                                        let _45 := sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let sum := add(_45, /** @src 29:9427:9443  \"to != address(0)\" */ 1)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        if gt(_45, sum)\n                                        {\n                                            mstore(_4, shl(224, 0x4e487b71))\n                                            mstore(_3, 0x11)\n                                            revert(_4, _29)\n                                        }\n                                        sstore(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sum)\n                                        return(_4, _4)\n                                    }\n                                    case 0xe985e9c5 {\n                                        if callvalue() { revert(_4, _4) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                        let value0_3 := abi_decode_address()\n                                        let value1_1 := abi_decode_address_7869()\n                                        let _46 := sub(shl(160, 1), 1)\n                                        mstore(_4, and(value0_3, _46))\n                                        mstore(32, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let _47 := keccak256(_4, _2)\n                                        mstore(_4, and(value1_1, _46))\n                                        mstore(32, _47)\n                                        let value_9 := and(sload(keccak256(_4, _2)), 0xff)\n                                        let memPos_7 := mload(_2)\n                                        mstore(memPos_7, iszero(iszero(value_9)))\n                                        return(memPos_7, 32)\n                                    }\n                                }\n                                revert(0, 0)\n                            }\n                            function abi_encode_string(value, pos) -> end\n                            {\n                                let length := mload(value)\n                                mstore(pos, length)\n                                let i := 0\n                                for { } lt(i, length) { i := add(i, 0x20) }\n                                {\n                                    let _1 := 0x20\n                                    mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                                }\n                                mstore(add(add(pos, length), 0x20), 0)\n                                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                            }\n                            function abi_decode_address() -> value\n                            {\n                                value := calldataload(4)\n                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            }\n                            function abi_decode_address_7869() -> value\n                            {\n                                value := calldataload(36)\n                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            }\n                            function abi_decode_addresst_addresst_uint256(dataEnd) -> value0, value1, value2\n                            {\n                                if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                                let value := calldataload(4)\n                                let _1 := sub(shl(160, 1), 1)\n                                if iszero(eq(value, and(value, _1)))\n                                {\n                                    revert(/** @src -1:-1:-1 */ 0, 0)\n                                }\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                value0 := value\n                                let value_1 := calldataload(36)\n                                if iszero(eq(value_1, and(value_1, _1)))\n                                {\n                                    revert(/** @src -1:-1:-1 */ 0, 0)\n                                }\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                value1 := value_1\n                                value2 := calldataload(68)\n                            }\n                            function finalize_allocation_14953(memPtr)\n                            {\n                                let newFreePtr := add(memPtr, 0x20)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function finalize_allocation(memPtr, size)\n                            {\n                                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function array_allocation_size_bytes(length) -> size\n                            {\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                size := add(and(add(length, 31), not(31)), 0x20)\n                            }\n                            function abi_decode_available_length_bytes(src, length, end) -> array\n                            {\n                                let _1 := array_allocation_size_bytes(length)\n                                let memPtr := mload(64)\n                                finalize_allocation(memPtr, _1)\n                                array := memPtr\n                                mstore(memPtr, length)\n                                if gt(add(src, length), end)\n                                {\n                                    revert(/** @src -1:-1:-1 */ 0, 0)\n                                }\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                calldatacopy(add(memPtr, 0x20), src, length)\n                                mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                            }\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            function extract_byte_array_length(data) -> length\n                            {\n                                length := shr(1, data)\n                                let outOfPlaceEncoding := and(data, 1)\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                if eq(outOfPlaceEncoding, lt(length, 32))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x22)\n                                    revert(0, 0x24)\n                                }\n                            }\n                            /// @ast-id 47997 @src 29:4143:4721  \"function transferFrom(address from, address to, uint256 tokenId) public virtual {...\"\n                            function fun_transferFrom(var_from, var_to, var_tokenId)\n                            {\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _1 := sub(shl(160, 1), 1)\n                                let _2 := and(/** @src 29:4237:4253  \"to == address(0)\" */ var_to, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                                /// @src 29:4233:4320  \"if (to == address(0)) {...\"\n                                if /** @src 29:4237:4253  \"to == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                /// @src 29:4233:4320  \"if (to == address(0)) {...\"\n                                {\n                                    /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                                    let _3 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                    /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                                    mstore(_3, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\" */ add(_3, 4), /** @src 29:4251:4252  \"0\" */ 0x00)\n                                    /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                                    revert(_3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                /// @src -1:-1:-1\n                                let _4 := 0\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                let _5 := 0x20\n                                mstore(_5, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _6 := 0x40\n                                let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), _1)\n                                /// @src 29:9035:9053  \"auth != address(0)\"\n                                let _7 := iszero(iszero(/** @src 34:735:745  \"msg.sender\" */ caller()))\n                                /// @src 29:9031:9117  \"if (auth != address(0)) {...\"\n                                if /** @src 29:9035:9053  \"auth != address(0)\" */ _7\n                                /// @src 29:9031:9117  \"if (auth != address(0)) {...\"\n                                {\n                                    /// @src 29:6514:6641  \"spender != address(0) &&...\"\n                                    let expr := _7\n                                    if _7\n                                    {\n                                        /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                        let expr_1 := /** @src 29:6552:6568  \"owner == spender\" */ eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                        /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                        if iszero(expr_1)\n                                        {\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                            mstore(_5, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            let _8 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                                            mstore(/** @src -1:-1:-1 */ _4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(_5, _8)\n                                            /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                            expr_1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), 0xff)\n                                        }\n                                        /// @src 29:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                        let expr_2 := expr_1\n                                        if iszero(expr_1)\n                                        {\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                            mstore(_5, /** @src 29:6034:6049  \"_tokenApprovals\" */ 0x04)\n                                            /// @src 29:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                            expr_2 := /** @src 29:6608:6640  \"_getApproved(tokenId) == spender\" */ eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), _1), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                        }\n                                        /// @src 29:6514:6641  \"spender != address(0) &&...\"\n                                        expr := expr_2\n                                    }\n                                    /// @src 29:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                                    if /** @src 29:7193:7232  \"!_isAuthorized(owner, spender, tokenId)\" */ iszero(/** @src 29:7194:7232  \"_isAuthorized(owner, spender, tokenId)\" */ expr)\n                                    /// @src 29:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                                    {\n                                        /// @src 29:7248:7434  \"if (owner == address(0)) {...\"\n                                        switch /** @src 29:7252:7271  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                        case /** @src 29:7248:7434  \"if (owner == address(0)) {...\" */ 0 {\n                                            /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                            let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                                            /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                            mstore(_9, shl(224, 0x177e802f))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ add(_9, 4), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(add(/** @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ _9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), var_tokenId)\n                                            /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                            revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68)\n                                        }\n                                        default /// @src 29:7248:7434  \"if (owner == address(0)) {...\"\n                                        {\n                                            /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                            let _10 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                                            /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                            mstore(_10, shl(224, 0x7e273289))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ add(_10, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                            /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                            revert(_10, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                        }\n                                    }\n                                }\n                                /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                if /** @src 29:9161:9179  \"from != address(0)\" */ iszero(iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned))\n                                /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                {\n                                    /// @src 29:9319:9324  \"false\"\n                                    fun_approve(var_tokenId)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                    mstore(_5, /** @src 29:9368:9377  \"_balances\" */ 0x03)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let dataSlot := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                                    sstore(dataSlot, add(sload(/** @src 29:9368:9388  \"_balances[from] -= 1\" */ dataSlot), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ not(0)))\n                                }\n                                mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                mstore(_5, /** @src 29:9487:9496  \"_balances\" */ 0x03)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                                sstore(dataSlot_1, add(sload(/** @src 29:9487:9505  \"_balances[to] += 1\" */ dataSlot_1), /** @src 29:9427:9443  \"to != address(0)\" */ 1))\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                mstore(_5, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _11 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                                sstore(_11, or(and(sload(_11), shl(160, 0xffffffffffffffffffffffff)), _2))\n                                /// @src 29:9577:9604  \"Transfer(from, to, tokenId)\"\n                                log4(/** @src -1:-1:-1 */ _4, _4, /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned, _2, var_tokenId)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _12 := and(/** @src 29:4610:4631  \"previousOwner != from\" */ var_from, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                                /// @src 29:4606:4715  \"if (previousOwner != from) {...\"\n                                if /** @src 29:4610:4631  \"previousOwner != from\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned, _12))\n                                /// @src 29:4606:4715  \"if (previousOwner != from) {...\"\n                                {\n                                    /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                                    let _13 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                                    /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                                    mstore(_13, shl(224, 0x64283d7b))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ add(_13, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _12)\n                                    mstore(add(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), var_tokenId)\n                                    mstore(add(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), cleaned)\n                                    /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                                    revert(_13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100)\n                                }\n                            }\n                            /// @ast-id 48558 @src 29:14720:15382  \"function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {...\"\n                            function fun_approve(var_tokenId)\n                            {\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(0, var_tokenId)\n                                mstore(0x20, /** @src 29:15346:15361  \"_tokenApprovals\" */ 0x04)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _1 := keccak256(0, 0x40)\n                                sstore(_1, and(sload(_1), shl(160, 0xffffffffffffffffffffffff)))\n                            }\n                            /// @ast-id 48624 @src 29:16138:16379  \"function _requireOwned(uint256 tokenId) internal view returns (address) {...\"\n                            function fun_requireOwned(var_tokenId) -> var\n                            {\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                mstore(0x20, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x40)), sub(shl(160, 1), 1))\n                                /// @src 29:16263:16351  \"if (owner == address(0)) {...\"\n                                if /** @src 29:16267:16286  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                /// @src 29:16263:16351  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                                    let _1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(0x40)\n                                    /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                                    mstore(_1, /** @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ shl(224, 0x7e273289))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\" */ add(_1, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                    /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                                    revert(_1, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                /// @src 29:16360:16372  \"return owner\"\n                                var := cleaned\n                            }\n                            /// @ast-id 48688 @src 29:16918:17700  \"function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {...\"\n                            function fun_checkOnERC721Received(var_from, var_to, var_tokenId, var_data_mpos)\n                            {\n                                /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                if /** @src 29:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 29:17034:17048  \"to.code.length\" */ extcodesize(var_to)))\n                                /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                {\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let _1 := sub(shl(160, 1), 1)\n                                    let _2 := and(/** @src 29:17072:17091  \"IERC721Receiver(to)\" */ var_to, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let _3 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                    let _4 := shl(225, 0x0a85bd01)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    mstore(_3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                                    mstore(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, 4), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), and(var_from, _1))\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), var_tokenId)\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100), 128)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let _5 := 32\n                                    let _6 := sub(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ abi_encode_string(var_data_mpos, add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 132)), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3)\n                                    /// @src 29:17051:17052  \"0\"\n                                    let _7 := 0x00\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let trySuccessCondition := call(gas(), _2, /** @src 29:17051:17052  \"0\" */ _7, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, _6, _3, _5)\n                                    let expr := /** @src 29:17051:17052  \"0\" */ _7\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    if trySuccessCondition\n                                    {\n                                        let _8 := _5\n                                        if gt(_5, returndatasize()) { _8 := returndatasize() }\n                                        finalize_allocation(_3, _8)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        if slt(sub(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, _8), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        {\n                                            revert(/** @src 29:17051:17052  \"0\" */ _7, _7)\n                                        }\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        let value := mload(_3)\n                                        if iszero(eq(value, and(value, shl(224, 0xffffffff))))\n                                        {\n                                            revert(/** @src 29:17051:17052  \"0\" */ _7, _7)\n                                        }\n                                        /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        expr := value\n                                    }\n                                    /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    switch iszero(trySuccessCondition)\n                                    case 0 {\n                                        /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        if /** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0xffffffff)), _4))\n                                        /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        {\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_9, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_9, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                        }\n                                    }\n                                    default /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    {\n                                        /// @src 29:17331:17684  \"catch (bytes memory reason) {...\"\n                                        let data := /** @src 29:17051:17052  \"0\" */ _7\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        switch returndatasize()\n                                        case 0 { data := 96 }\n                                        default {\n                                            let _10 := returndatasize()\n                                            let _11 := array_allocation_size_bytes(_10)\n                                            let memPtr := mload(64)\n                                            finalize_allocation(memPtr, _11)\n                                            mstore(memPtr, _10)\n                                            data := memPtr\n                                            returndatacopy(add(memPtr, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5), /** @src 29:17051:17052  \"0\" */ _7, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ returndatasize())\n                                        }\n                                        let _12 := mload(/** @src 29:17381:17394  \"reason.length\" */ data)\n                                        /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                        switch /** @src 29:17381:17399  \"reason.length == 0\" */ iszero(_12)\n                                        case /** @src 29:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                            /// @src 29:17557:17652  \"assembly {...\"\n                                            revert(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5, /** @src 29:17557:17652  \"assembly {...\" */ data), _12)\n                                        }\n                                        default /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                        {\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            let _13 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_13, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_13, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            revert(_13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000814000a\"\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000814000a\"\n            }\n        }\n        /// @use-src 28:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 29:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 30:\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\", 32:\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 36:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 37:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\", 43:\"src/BasicNft.sol\"\n        object \"BasicNft_50752\" {\n            code {\n                {\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := 64\n                    let newFreePtr := add(_1, _2)\n                    let _3 := sub(shl(64, 1), 1)\n                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                    }\n                    mstore(_2, newFreePtr)\n                    mstore(_1, 5)\n                    let _4 := 32\n                    mstore(add(_1, _4), \"Dogie\")\n                    let memPtr := mload(_2)\n                    let newFreePtr_1 := add(memPtr, _2)\n                    if or(gt(newFreePtr_1, _3), lt(newFreePtr_1, memPtr))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    mstore(_2, newFreePtr_1)\n                    mstore(memPtr, 3)\n                    mstore(add(memPtr, _4), \"DOG\")\n                    let newLen := mload(_1)\n                    if gt(newLen, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    /// @src -1:-1:-1\n                    let _5 := 0\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _6 := sload(/** @src -1:-1:-1 */ _5)\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let length := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _7 := 1\n                    length := shr(_7, _6)\n                    let outOfPlaceEncoding := and(_6, _7)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    let _8 := 31\n                    if gt(length, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, _5)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let data := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let deleteStart := add(data, shr(5, add(newLen, _8)))\n                        if lt(newLen, _4) { deleteStart := data }\n                        let _9 := add(data, shr(5, add(length, _8)))\n                        let start := deleteStart\n                        for { } lt(start, _9) { start := add(start, _7) }\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let srcOffset := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    srcOffset := _4\n                    switch gt(newLen, _8)\n                    case 1 {\n                        let loopEnd := and(newLen, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, _5)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let dstPtr := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let i := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        for { } lt(i, loopEnd) { i := add(i, _4) }\n                        {\n                            sstore(dstPtr, mload(add(_1, srcOffset)))\n                            dstPtr := add(dstPtr, _7)\n                            srcOffset := add(srcOffset, _4)\n                        }\n                        if lt(loopEnd, newLen)\n                        {\n                            let lastValue := mload(add(_1, srcOffset))\n                            sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                        }\n                        sstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ add(shl(_7, newLen), _7))\n                    }\n                    default {\n                        let value := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        if newLen\n                        {\n                            value := mload(add(_1, srcOffset))\n                        }\n                        sstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ or(and(value, not(shr(shl(3, newLen), not(0)))), shl(_7, newLen)))\n                    }\n                    let newLen_1 := mload(memPtr)\n                    if gt(newLen_1, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    let _10 := sload(_7)\n                    let length_1 := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    length_1 := shr(_7, _10)\n                    let outOfPlaceEncoding_1 := and(_10, _7)\n                    if iszero(outOfPlaceEncoding_1)\n                    {\n                        length_1 := and(length_1, 0x7f)\n                    }\n                    if eq(outOfPlaceEncoding_1, lt(length_1, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x24)\n                    }\n                    if gt(length_1, _8)\n                    {\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _7)\n                        let data_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _8)))\n                        if lt(newLen_1, _4) { deleteStart_1 := data_1 }\n                        let _11 := add(data_1, shr(5, add(length_1, _8)))\n                        let start_1 := deleteStart_1\n                        for { } lt(start_1, _11) { start_1 := add(start_1, _7) }\n                        {\n                            sstore(start_1, /** @src -1:-1:-1 */ _5)\n                        }\n                    }\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let srcOffset_1 := /** @src -1:-1:-1 */ _5\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    srcOffset_1 := _4\n                    switch gt(newLen_1, _8)\n                    case 1 {\n                        let loopEnd_1 := and(newLen_1, not(31))\n                        mstore(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _7)\n                        let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ _5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                        let i_1 := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _4) }\n                        {\n                            sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                            dstPtr_1 := add(dstPtr_1, _7)\n                            srcOffset_1 := add(srcOffset_1, _4)\n                        }\n                        if lt(loopEnd_1, newLen_1)\n                        {\n                            let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                            sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                        }\n                        sstore(_7, add(shl(_7, newLen_1), _7))\n                    }\n                    default {\n                        let value_1 := /** @src -1:-1:-1 */ _5\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        if newLen_1\n                        {\n                            value_1 := mload(add(memPtr, srcOffset_1))\n                        }\n                        sstore(_7, or(and(value_1, not(shr(shl(3, newLen_1), not(0)))), shl(_7, newLen_1)))\n                    }\n                    sstore(/** @src 43:361:379  \"s_tokenCounter = 0\" */ 0x07, /** @src -1:-1:-1 */ _5)\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    let _12 := mload(_2)\n                    let _13 := datasize(\"BasicNft_50752_deployed\")\n                    codecopy(_12, dataoffset(\"BasicNft_50752_deployed\"), _13)\n                    return(_12, _13)\n                }\n            }\n            /// @use-src 29:\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\", 34:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 36:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 43:\"src/BasicNft.sol\"\n            object \"BasicNft_50752_deployed\" {\n                code {\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x01ffc9a7 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value := calldataload(_3)\n                                let _5 := and(value, shl(224, 0xffffffff))\n                                if iszero(eq(value, _5)) { revert(_4, _4) }\n                                /// @src 29:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                let expr := /** @src 29:1698:1738  \"interfaceId == type(IERC721).interfaceId\" */ eq(_5, /** @src 29:1713:1738  \"type(IERC721).interfaceId\" */ shl(224, 0x80ac58cd))\n                                /// @src 29:1698:1802  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                if iszero(expr)\n                                {\n                                    expr := /** @src 29:1754:1802  \"interfaceId == type(IERC721Metadata).interfaceId\" */ eq(_5, /** @src 29:1769:1802  \"type(IERC721Metadata).interfaceId\" */ shl(224, 0x5b5e139f))\n                                }\n                                /// @src 29:1698:1854  \"interfaceId == type(IERC721).interfaceId ||...\"\n                                let expr_1 := expr\n                                if iszero(expr)\n                                {\n                                    expr_1 := /** @src 36:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_5, /** @src 36:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                }\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_1, iszero(iszero(expr_1)))\n                                return(_1, 32)\n                            }\n                            case 0x06fdde03 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr := mload(_2)\n                                let ret := _4\n                                let slotValue := sload(_4)\n                                let length := extract_byte_array_length(slotValue)\n                                mstore(memPtr, length)\n                                let _6 := 0x20\n                                let _7 := 1\n                                switch and(slotValue, _7)\n                                case 0 {\n                                    mstore(add(memPtr, _6), and(slotValue, not(255)))\n                                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _6)\n                                }\n                                case 1 {\n                                    mstore(_4, _4)\n                                    let dataPos := 18569430475105882587588266137607568536673111973893317399460219858819262702947\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _6) }\n                                    {\n                                        mstore(add(add(memPtr, i), _6), sload(dataPos))\n                                        dataPos := add(dataPos, _7)\n                                    }\n                                    ret := add(add(memPtr, i), _6)\n                                }\n                                finalize_allocation(memPtr, sub(ret, memPtr))\n                                let memPos := mload(_2)\n                                mstore(memPos, _6)\n                                return(memPos, sub(abi_encode_string(memPtr, add(memPos, _6)), memPos))\n                            }\n                            case 0x081812fc {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value_1 := calldataload(_3)\n                                /// @src 29:3583:3605  \"_requireOwned(tokenId)\"\n                                pop(fun_requireOwned(value_1))\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_4, value_1)\n                                mstore(32, _3)\n                                let cleaned := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, cleaned)\n                                return(memPos_1, 32)\n                            }\n                            case 0x095ea7b3 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0 := abi_decode_address()\n                                let value_2 := calldataload(36)\n                                /// @src 29:14943:14965  \"_requireOwned(tokenId)\"\n                                let expr_2 := fun_requireOwned(value_2)\n                                /// @src 29:15093:15128  \"auth != address(0) && owner != auth\"\n                                let expr_3 := /** @src 29:15093:15111  \"auth != address(0)\" */ iszero(iszero(/** @src 34:735:745  \"msg.sender\" */ caller()))\n                                /// @src 29:15093:15128  \"auth != address(0) && owner != auth\"\n                                if expr_3\n                                {\n                                    expr_3 := /** @src 29:15115:15128  \"owner != auth\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:15115:15128  \"owner != auth\" */ expr_2, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1)), /** @src 34:735:745  \"msg.sender\" */ caller()))\n                                }\n                                /// @src 29:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                let expr_4 := expr_3\n                                if expr_3\n                                {\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(_4, and(expr_2, sub(shl(160, 1), 1)))\n                                    mstore(0x20, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let _8 := keccak256(_4, _2)\n                                    mstore(_4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(0x20, _8)\n                                    /// @src 29:15093:15162  \"auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)\"\n                                    expr_4 := /** @src 29:15132:15162  \"!isApprovedForAll(owner, auth)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(_4, _2)), 0xff))\n                                }\n                                /// @src 29:15089:15231  \"if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {...\"\n                                if expr_4\n                                {\n                                    /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    mstore(_9, shl(224, 0xa9fbf51f))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:15189:15216  \"ERC721InvalidApprover(auth)\" */ add(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 29:15189:15216  \"ERC721InvalidApprover(auth)\"\n                                    revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                let _10 := sub(shl(160, 1), 1)\n                                let _11 := and(/** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ value0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _10)\n                                /// @src 29:15283:15311  \"Approval(owner, to, tokenId)\"\n                                log4(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, _4, /** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ expr_2, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _10), _11, /** @src 29:15283:15311  \"Approval(owner, to, tokenId)\" */ value_2)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_4, value_2)\n                                mstore(0x20, _3)\n                                let _12 := keccak256(_4, _2)\n                                sstore(_12, or(and(sload(_12), shl(160, 0xffffffffffffffffffffffff)), _11))\n                                return(_4, _4)\n                            }\n                            case 0x23b872dd {\n                                if callvalue() { revert(_4, _4) }\n                                let param, param_1, param_2 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                fun_transferFrom(param, param_1, param_2)\n                                return(_4, _4)\n                            }\n                            case 0x42842e0e {\n                                if callvalue() { revert(_4, _4) }\n                                let param_3, param_4, param_5 := abi_decode_addresst_addresst_uint256(calldatasize())\n                                let memPtr_1 := mload(_2)\n                                finalize_allocation_14953(memPtr_1)\n                                mstore(memPtr_1, _4)\n                                /// @src 29:5121:5128  \"tokenId\"\n                                fun_transferFrom(param_3, param_4, param_5)\n                                /// @src 29:5181:5185  \"data\"\n                                fun_checkOnERC721Received(param_3, param_4, param_5, memPtr_1)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                return(_4, _4)\n                            }\n                            case 0x6352211e {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                /// @src 29:2267:2296  \"return _requireOwned(tokenId)\"\n                                let var := /** @src 29:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ calldataload(_3))\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, and(var, sub(shl(160, 1), 1)))\n                                return(memPos_2, 32)\n                            }\n                            case 0x6e02007d {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _13 := sload(/** @src 43:908:922  \"s_tokenCounter\" */ 0x07)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let memPos_3 := mload(_2)\n                                mstore(memPos_3, _13)\n                                return(memPos_3, 32)\n                            }\n                            case 0x70a08231 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let _14 := and(abi_decode_address(), sub(shl(160, 1), 1))\n                                /// @src 29:2002:2089  \"if (owner == address(0)) {...\"\n                                if /** @src 29:2006:2025  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _14)\n                                /// @src 29:2002:2089  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    let _15 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    mstore(_15, shl(226, 0x22718ad9))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\" */ add(_15, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                    /// @src 29:2048:2078  \"ERC721InvalidOwner(address(0))\"\n                                    revert(_15, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                mstore(_4, _14)\n                                mstore(32, /** @src 29:2105:2114  \"_balances\" */ 0x03)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _16 := sload(keccak256(_4, _2))\n                                let memPos_4 := mload(_2)\n                                mstore(memPos_4, _16)\n                                return(memPos_4, 32)\n                            }\n                            case 0x95d89b41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr_2 := mload(_2)\n                                let ret_1 := _4\n                                /// @src 29:2597:2604  \"_symbol\"\n                                let _17 := 0x01\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let slotValue_1 := sload(/** @src 29:2597:2604  \"_symbol\" */ _17)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let length_1 := extract_byte_array_length(slotValue_1)\n                                mstore(memPtr_2, length_1)\n                                let _18 := 0x20\n                                switch and(slotValue_1, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                case /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0 {\n                                    mstore(add(memPtr_2, _18), and(slotValue_1, not(255)))\n                                    ret_1 := add(add(memPtr_2, shl(5, iszero(iszero(length_1)))), _18)\n                                }\n                                case 1 {\n                                    mstore(_4, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let dataPos_1 := 80084422859880547211683076133703299733277748156566366325829078699459944778998\n                                    let i_1 := _4\n                                    for { } lt(i_1, length_1) { i_1 := add(i_1, _18) }\n                                    {\n                                        mstore(add(add(memPtr_2, i_1), _18), sload(dataPos_1))\n                                        dataPos_1 := add(dataPos_1, /** @src 29:2597:2604  \"_symbol\" */ _17)\n                                    }\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    ret_1 := add(add(memPtr_2, i_1), _18)\n                                }\n                                finalize_allocation(memPtr_2, sub(ret_1, memPtr_2))\n                                let memPos_5 := mload(_2)\n                                mstore(memPos_5, _18)\n                                return(memPos_5, sub(abi_encode_string(memPtr_2, add(memPos_5, _18)), memPos_5))\n                            }\n                            case 0xa22cb465 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_1 := abi_decode_address()\n                                let value_3 := calldataload(36)\n                                let _19 := iszero(iszero(value_3))\n                                if iszero(eq(value_3, _19)) { revert(_4, _4) }\n                                let _20 := and(/** @src 29:15698:15720  \"operator == address(0)\" */ value0_1, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 29:15694:15785  \"if (operator == address(0)) {...\"\n                                if /** @src 29:15698:15720  \"operator == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _20)\n                                /// @src 29:15694:15785  \"if (operator == address(0)) {...\"\n                                {\n                                    /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    let _21 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    mstore(_21, shl(227, 0x0b611743))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:15743:15774  \"ERC721InvalidOperator(operator)\" */ add(_21, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _20)\n                                    /// @src 29:15743:15774  \"ERC721InvalidOperator(operator)\"\n                                    revert(_21, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                                mstore(_4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(32, /** @src 29:15794:15812  \"_operatorApprovals\" */ 0x05)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _22 := keccak256(_4, _2)\n                                mstore(_4, _20)\n                                mstore(32, _22)\n                                let dataSlot := keccak256(_4, _2)\n                                let value_4 := and(sload(dataSlot), not(255))\n                                sstore(dataSlot, or(value_4, and(_19, 255)))\n                                /// @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                let _23 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                mstore(_23, _19)\n                                /// @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\"\n                                log3(_23, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 32, /** @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, /** @src 34:735:745  \"msg.sender\" */ caller(), /** @src 29:15855:15896  \"ApprovalForAll(owner, operator, approved)\" */ _20)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                return(_4, _4)\n                            }\n                            case 0xb88d4fde {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                                let value0_2 := abi_decode_address()\n                                let value1 := abi_decode_address_7869()\n                                let value_5 := calldataload(68)\n                                let offset := calldataload(100)\n                                if gt(offset, 0xffffffffffffffff) { revert(_4, _4) }\n                                if iszero(slt(add(offset, 35), calldatasize())) { revert(_4, _4) }\n                                let array := abi_decode_available_length_bytes(add(offset, 36), calldataload(add(_3, offset)), calldatasize())\n                                /// @src 29:5121:5128  \"tokenId\"\n                                fun_transferFrom(value0_2, value1, value_5)\n                                /// @src 29:5181:5185  \"data\"\n                                fun_checkOnERC721Received(value0_2, value1, value_5, array)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                return(_4, _4)\n                            }\n                            case 0xc87b56dd {\n                                if callvalue() { revert(_4, _4) }\n                                let _24 := 32\n                                if slt(add(calldatasize(), not(3)), _24) { revert(_4, _4) }\n                                let value_6 := calldataload(_3)\n                                /// @src 43:686:782  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                if /** @src 43:690:720  \"ownerOf(tokenId) == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:2274:2296  \"_requireOwned(tokenId)\" */ fun_requireOwned(/** @src 43:690:706  \"ownerOf(tokenId)\" */ value_6), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sub(shl(160, 1), 1)))\n                                /// @src 43:686:782  \"if (ownerOf(tokenId) == address(0)) {...\"\n                                {\n                                    /// @src 43:743:771  \"BasicNft__TokenUriNotFound()\"\n                                    let _25 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 43:743:771  \"BasicNft__TokenUriNotFound()\"\n                                    mstore(_25, shl(224, 0x7598996f))\n                                    revert(_25, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3)\n                                }\n                                mstore(_4, value_6)\n                                mstore(_24, /** @src 43:798:812  \"s_tokenIdToUri\" */ 0x06)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dataSlot_1 := keccak256(_4, _2)\n                                let memPtr_3 := mload(_2)\n                                let ret_2 := _4\n                                let slotValue_2 := sload(dataSlot_1)\n                                let length_2 := extract_byte_array_length(slotValue_2)\n                                mstore(memPtr_3, length_2)\n                                let _26 := 1\n                                switch and(slotValue_2, _26)\n                                case 0 {\n                                    mstore(add(memPtr_3, _24), and(slotValue_2, not(255)))\n                                    ret_2 := add(add(memPtr_3, shl(5, iszero(iszero(length_2)))), _24)\n                                }\n                                case 1 {\n                                    mstore(_4, dataSlot_1)\n                                    let dataPos_2 := keccak256(_4, _24)\n                                    let i_2 := _4\n                                    for { } lt(i_2, length_2) { i_2 := add(i_2, _24) }\n                                    {\n                                        mstore(add(add(memPtr_3, i_2), _24), sload(dataPos_2))\n                                        dataPos_2 := add(dataPos_2, _26)\n                                    }\n                                    ret_2 := add(add(memPtr_3, i_2), _24)\n                                }\n                                finalize_allocation(memPtr_3, sub(ret_2, memPtr_3))\n                                let memPos_6 := mload(_2)\n                                mstore(memPos_6, _24)\n                                return(memPos_6, sub(abi_encode_string(memPtr_3, add(memPos_6, _24)), memPos_6))\n                            }\n                            case 0xda86f4a9 {\n                                if callvalue() { revert(_4, _4) }\n                                let _27 := 32\n                                if slt(add(calldatasize(), not(3)), _27) { revert(_4, _4) }\n                                let offset_1 := calldataload(_3)\n                                let _28 := 0xffffffffffffffff\n                                if gt(offset_1, _28) { revert(_4, _4) }\n                                if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_4, _4) }\n                                let _29 := 36\n                                let array_1 := abi_decode_available_length_bytes(add(offset_1, _29), calldataload(add(_3, offset_1)), calldatasize())\n                                mstore(_4, sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07))\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_27, /** @src 43:450:464  \"s_tokenIdToUri\" */ 0x06)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dataSlot_2 := keccak256(_4, _2)\n                                let newLen := mload(array_1)\n                                if gt(newLen, _28)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, _29)\n                                }\n                                let _30 := extract_byte_array_length(sload(dataSlot_2))\n                                if gt(_30, 0x1f)\n                                {\n                                    mstore(_4, dataSlot_2)\n                                    let data := keccak256(_4, _27)\n                                    let deleteStart := add(data, shr(5, add(newLen, 0x1f)))\n                                    if lt(newLen, _27) { deleteStart := data }\n                                    let _31 := add(data, shr(5, add(_30, 0x1f)))\n                                    let start := deleteStart\n                                    for { } lt(start, _31) { start := add(start, 1) }\n                                    { sstore(start, _4) }\n                                }\n                                let srcOffset := _4\n                                srcOffset := _27\n                                switch gt(newLen, 0x1f)\n                                case 1 {\n                                    let loopEnd := and(newLen, not(31))\n                                    mstore(_4, dataSlot_2)\n                                    let dstPtr := keccak256(_4, _27)\n                                    let i_3 := _4\n                                    for { } lt(i_3, loopEnd) { i_3 := add(i_3, _27) }\n                                    {\n                                        sstore(dstPtr, mload(add(array_1, srcOffset)))\n                                        dstPtr := add(dstPtr, 1)\n                                        srcOffset := add(srcOffset, _27)\n                                    }\n                                    if lt(loopEnd, newLen)\n                                    {\n                                        let lastValue := mload(add(array_1, srcOffset))\n                                        sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                                    }\n                                    sstore(dataSlot_2, add(shl(1, newLen), 1))\n                                }\n                                default {\n                                    let value_7 := _4\n                                    if newLen\n                                    {\n                                        value_7 := mload(add(array_1, srcOffset))\n                                    }\n                                    sstore(dataSlot_2, or(and(value_7, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n                                }\n                                let _32 := sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let memPtr_4 := mload(_2)\n                                finalize_allocation_14953(memPtr_4)\n                                mstore(memPtr_4, _4)\n                                /// @src 29:10018:10105  \"if (to == address(0)) {...\"\n                                if /** @src 29:10022:10038  \"to == address(0)\" */ iszero(/** @src 43:511:521  \"msg.sender\" */ caller())\n                                /// @src 29:10018:10105  \"if (to == address(0)) {...\"\n                                {\n                                    /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    let _33 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    mstore(_33, shl(225, 0x32505749))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ add(_33, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                    /// @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\"\n                                    revert(_33, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                }\n                                mstore(_4, _32)\n                                mstore(_27, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let cleaned_1 := and(sload(keccak256(_4, _2)), sub(shl(160, 1), 1))\n                                /// @src 29:9161:9179  \"from != address(0)\"\n                                let _34 := iszero(iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned_1))\n                                /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                if /** @src 29:9161:9179  \"from != address(0)\" */ _34\n                                /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                                {\n                                    /// @src 29:9319:9324  \"false\"\n                                    fun_approve(_32)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(_4, cleaned_1)\n                                    mstore(_27, /** @src 29:9368:9377  \"_balances\" */ 0x03)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let dataSlot_3 := keccak256(_4, _2)\n                                    sstore(dataSlot_3, add(sload(/** @src 29:9368:9388  \"_balances[from] -= 1\" */ dataSlot_3), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ not(0)))\n                                }\n                                mstore(_4, /** @src 43:511:521  \"msg.sender\" */ caller())\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_27, /** @src 29:9487:9496  \"_balances\" */ 0x03)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let dataSlot_4 := keccak256(_4, _2)\n                                sstore(dataSlot_4, add(sload(/** @src 29:9487:9505  \"_balances[to] += 1\" */ dataSlot_4), /** @src 29:9427:9443  \"to != address(0)\" */ 1))\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                mstore(_4, _32)\n                                mstore(_27, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _35 := keccak256(_4, _2)\n                                sstore(_35, or(and(sload(_35), shl(160, 0xffffffffffffffffffffffff)), /** @src 43:511:521  \"msg.sender\" */ caller()))\n                                /// @src 29:9577:9604  \"Transfer(from, to, tokenId)\"\n                                log4(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, _4, /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned_1, /** @src 43:511:521  \"msg.sender\" */ caller(), /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ _32)\n                                /// @src 29:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                if /** @src 29:10184:10211  \"previousOwner != address(0)\" */ _34\n                                /// @src 29:10180:10276  \"if (previousOwner != address(0)) {...\"\n                                {\n                                    /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    let _36 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    mstore(_36, shl(225, 0x39e35637))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:10234:10265  \"ERC721InvalidSender(address(0))\" */ add(_36, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), _4)\n                                    /// @src 29:10234:10265  \"ERC721InvalidSender(address(0))\"\n                                    revert(_36, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                }\n                                /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                if /** @src 29:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 29:17034:17048  \"to.code.length\" */ extcodesize(/** @src 43:511:521  \"msg.sender\" */ caller())))\n                                /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                                {\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let _37 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                    let _38 := shl(225, 0x0a85bd01)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    mstore(_37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _38)\n                                    mstore(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29), _4)\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), _32)\n                                    mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100), 128)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let trySuccessCondition := call(gas(), /** @src 43:511:521  \"msg.sender\" */ caller(), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, sub(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ abi_encode_string(memPtr_4, add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 132)), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _37), _37, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27)\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    let expr_5 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4\n                                    /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                    if trySuccessCondition\n                                    {\n                                        let _39 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27\n                                        /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        if gt(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ returndatasize()) { _39 := returndatasize() }\n                                        finalize_allocation(_37, _39)\n                                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                        if slt(sub(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_37, _39), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _37), _27) { revert(_4, _4) }\n                                        let value_8 := mload(_37)\n                                        if iszero(eq(value_8, and(value_8, shl(224, 0xffffffff)))) { revert(_4, _4) }\n                                        /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                        expr_5 := value_8\n                                    }\n                                    /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    switch iszero(trySuccessCondition)\n                                    case 0 {\n                                        /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        if /** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr_5, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0xffffffff)), _38))\n                                        /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                        {\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            let _40 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_40, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_40, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                            /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                            revert(_40, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                        }\n                                    }\n                                    default /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                                    {\n                                        /// @src 29:17331:17684  \"catch (bytes memory reason) {...\"\n                                        let data_1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4\n                                        switch returndatasize()\n                                        case 0 { data_1 := 96 }\n                                        default {\n                                            let _41 := returndatasize()\n                                            let _42 := array_allocation_size_bytes(_41)\n                                            let memPtr_5 := mload(_2)\n                                            finalize_allocation(memPtr_5, _42)\n                                            mstore(memPtr_5, _41)\n                                            data_1 := memPtr_5\n                                            returndatacopy(add(memPtr_5, _27), _4, returndatasize())\n                                        }\n                                        let _43 := mload(/** @src 29:17381:17394  \"reason.length\" */ data_1)\n                                        /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                        switch /** @src 29:17381:17399  \"reason.length == 0\" */ iszero(_43)\n                                        case /** @src 29:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                            /// @src 29:17557:17652  \"assembly {...\"\n                                            revert(add(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _27, /** @src 29:17557:17652  \"assembly {...\" */ data_1), _43)\n                                        }\n                                        default /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                        {\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            let _44 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_2)\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            mstore(_44, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                            mstore(/** @src 29:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_44, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 43:511:521  \"msg.sender\" */ caller())\n                                            /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                            revert(_44, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _29)\n                                        }\n                                    }\n                                }\n                                let _45 := sload(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let sum := add(_45, /** @src 29:9427:9443  \"to != address(0)\" */ 1)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                if gt(_45, sum)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x11)\n                                    revert(_4, _29)\n                                }\n                                sstore(/** @src 43:465:479  \"s_tokenCounter\" */ 0x07, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ sum)\n                                return(_4, _4)\n                            }\n                            case 0xe985e9c5 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_3 := abi_decode_address()\n                                let value1_1 := abi_decode_address_7869()\n                                let _46 := sub(shl(160, 1), 1)\n                                mstore(_4, and(value0_3, _46))\n                                mstore(32, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let _47 := keccak256(_4, _2)\n                                mstore(_4, and(value1_1, _46))\n                                mstore(32, _47)\n                                let value_9 := and(sload(keccak256(_4, _2)), 0xff)\n                                let memPos_7 := mload(_2)\n                                mstore(memPos_7, iszero(iszero(value_9)))\n                                return(memPos_7, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function abi_encode_string(value, pos) -> end\n                    {\n                        let length := mload(value)\n                        mstore(pos, length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 0x20) }\n                        {\n                            let _1 := 0x20\n                            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                        }\n                        mstore(add(add(pos, length), 0x20), 0)\n                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                    }\n                    function abi_decode_address() -> value\n                    {\n                        value := calldataload(4)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_address_7869() -> value\n                    {\n                        value := calldataload(36)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_addresst_addresst_uint256(dataEnd) -> value0, value1, value2\n                    {\n                        if slt(add(dataEnd, not(3)), 96) { revert(0, 0) }\n                        let value := calldataload(4)\n                        let _1 := sub(shl(160, 1), 1)\n                        if iszero(eq(value, and(value, _1)))\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        value0 := value\n                        let value_1 := calldataload(36)\n                        if iszero(eq(value_1, and(value_1, _1)))\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        value1 := value_1\n                        value2 := calldataload(68)\n                    }\n                    function finalize_allocation_14953(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 0x20)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size := add(and(add(length, 31), not(31)), 0x20)\n                    }\n                    function abi_decode_available_length_bytes(src, length, end) -> array\n                    {\n                        let _1 := array_allocation_size_bytes(length)\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, _1)\n                        array := memPtr\n                        mstore(memPtr, length)\n                        if gt(add(src, length), end)\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        calldatacopy(add(memPtr, 0x20), src, length)\n                        mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                    }\n                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                    function extract_byte_array_length(data) -> length\n                    {\n                        length := shr(1, data)\n                        let outOfPlaceEncoding := and(data, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                    }\n                    /// @ast-id 47997 @src 29:4143:4721  \"function transferFrom(address from, address to, uint256 tokenId) public virtual {...\"\n                    function fun_transferFrom(var_from, var_to, var_tokenId)\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _1 := sub(shl(160, 1), 1)\n                        let _2 := and(/** @src 29:4237:4253  \"to == address(0)\" */ var_to, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                        /// @src 29:4233:4320  \"if (to == address(0)) {...\"\n                        if /** @src 29:4237:4253  \"to == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                        /// @src 29:4233:4320  \"if (to == address(0)) {...\"\n                        {\n                            /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            let _3 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                            /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            mstore(_3, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\" */ add(_3, 4), /** @src 29:4251:4252  \"0\" */ 0x00)\n                            /// @src 29:4276:4309  \"ERC721InvalidReceiver(address(0))\"\n                            revert(_3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                        }\n                        /// @src -1:-1:-1\n                        let _4 := 0\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                        let _5 := 0x20\n                        mstore(_5, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _6 := 0x40\n                        let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), _1)\n                        /// @src 29:9035:9053  \"auth != address(0)\"\n                        let _7 := iszero(iszero(/** @src 34:735:745  \"msg.sender\" */ caller()))\n                        /// @src 29:9031:9117  \"if (auth != address(0)) {...\"\n                        if /** @src 29:9035:9053  \"auth != address(0)\" */ _7\n                        /// @src 29:9031:9117  \"if (auth != address(0)) {...\"\n                        {\n                            /// @src 29:6514:6641  \"spender != address(0) &&...\"\n                            let expr := _7\n                            if _7\n                            {\n                                /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                let expr_1 := /** @src 29:6552:6568  \"owner == spender\" */ eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                if iszero(expr_1)\n                                {\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                    mstore(_5, /** @src 29:4039:4057  \"_operatorApprovals\" */ 0x05)\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    let _8 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(_5, _8)\n                                    /// @src 29:6552:6604  \"owner == spender || isApprovedForAll(owner, spender)\"\n                                    expr_1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), 0xff)\n                                }\n                                /// @src 29:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                let expr_2 := expr_1\n                                if iszero(expr_1)\n                                {\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                    mstore(_5, /** @src 29:6034:6049  \"_tokenApprovals\" */ 0x04)\n                                    /// @src 29:6552:6640  \"owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender\"\n                                    expr_2 := /** @src 29:6608:6640  \"_getApproved(tokenId) == spender\" */ eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(sload(keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)), _1), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                }\n                                /// @src 29:6514:6641  \"spender != address(0) &&...\"\n                                expr := expr_2\n                            }\n                            /// @src 29:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                            if /** @src 29:7193:7232  \"!_isAuthorized(owner, spender, tokenId)\" */ iszero(/** @src 29:7194:7232  \"_isAuthorized(owner, spender, tokenId)\" */ expr)\n                            /// @src 29:7189:7444  \"if (!_isAuthorized(owner, spender, tokenId)) {...\"\n                            {\n                                /// @src 29:7248:7434  \"if (owner == address(0)) {...\"\n                                switch /** @src 29:7252:7271  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                                case /** @src 29:7248:7434  \"if (owner == address(0)) {...\" */ 0 {\n                                    /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                                    /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    mstore(_9, shl(224, 0x177e802f))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ add(_9, 4), /** @src 34:735:745  \"msg.sender\" */ caller())\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(add(/** @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\" */ _9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), var_tokenId)\n                                    /// @src 29:7375:7419  \"ERC721InsufficientApproval(spender, tokenId)\"\n                                    revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68)\n                                }\n                                default /// @src 29:7248:7434  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    let _10 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                                    /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    mstore(_10, shl(224, 0x7e273289))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ add(_10, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                                    /// @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\"\n                                    revert(_10, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                            }\n                        }\n                        /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                        if /** @src 29:9161:9179  \"from != address(0)\" */ iszero(iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned))\n                        /// @src 29:9157:9413  \"if (from != address(0)) {...\"\n                        {\n                            /// @src 29:9319:9324  \"false\"\n                            fun_approve(var_tokenId)\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                            mstore(_5, /** @src 29:9368:9377  \"_balances\" */ 0x03)\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let dataSlot := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                            sstore(dataSlot, add(sload(/** @src 29:9368:9388  \"_balances[from] -= 1\" */ dataSlot), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ not(0)))\n                        }\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                        mstore(_5, /** @src 29:9487:9496  \"_balances\" */ 0x03)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let dataSlot_1 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                        sstore(dataSlot_1, add(sload(/** @src 29:9487:9505  \"_balances[to] += 1\" */ dataSlot_1), /** @src 29:9427:9443  \"to != address(0)\" */ 1))\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                        mstore(_5, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _11 := keccak256(/** @src -1:-1:-1 */ _4, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _6)\n                        sstore(_11, or(and(sload(_11), shl(160, 0xffffffffffffffffffffffff)), _2))\n                        /// @src 29:9577:9604  \"Transfer(from, to, tokenId)\"\n                        log4(/** @src -1:-1:-1 */ _4, _4, /** @src 29:9577:9604  \"Transfer(from, to, tokenId)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, cleaned, _2, var_tokenId)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _12 := and(/** @src 29:4610:4631  \"previousOwner != from\" */ var_from, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                        /// @src 29:4606:4715  \"if (previousOwner != from) {...\"\n                        if /** @src 29:4610:4631  \"previousOwner != from\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned, _12))\n                        /// @src 29:4606:4715  \"if (previousOwner != from) {...\"\n                        {\n                            /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            let _13 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(_6)\n                            /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            mstore(_13, shl(224, 0x64283d7b))\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ add(_13, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _12)\n                            mstore(add(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), var_tokenId)\n                            mstore(add(/** @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\" */ _13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), cleaned)\n                            /// @src 29:4654:4704  \"ERC721IncorrectOwner(from, tokenId, previousOwner)\"\n                            revert(_13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100)\n                        }\n                    }\n                    /// @ast-id 48558 @src 29:14720:15382  \"function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {...\"\n                    function fun_approve(var_tokenId)\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(0, var_tokenId)\n                        mstore(0x20, /** @src 29:15346:15361  \"_tokenApprovals\" */ 0x04)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let _1 := keccak256(0, 0x40)\n                        sstore(_1, and(sload(_1), shl(160, 0xffffffffffffffffffffffff)))\n                    }\n                    /// @ast-id 48624 @src 29:16138:16379  \"function _requireOwned(uint256 tokenId) internal view returns (address) {...\"\n                    function fun_requireOwned(var_tokenId) -> var\n                    {\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                        mstore(0x20, /** @src 29:5799:5806  \"_owners\" */ 0x02)\n                        /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                        let cleaned := and(sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 0x40)), sub(shl(160, 1), 1))\n                        /// @src 29:16263:16351  \"if (owner == address(0)) {...\"\n                        if /** @src 29:16267:16286  \"owner == address(0)\" */ iszero(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ cleaned)\n                        /// @src 29:16263:16351  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            let _1 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(0x40)\n                            /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            mstore(_1, /** @src 29:7298:7329  \"ERC721NonexistentToken(tokenId)\" */ shl(224, 0x7e273289))\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(/** @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\" */ add(_1, 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ var_tokenId)\n                            /// @src 29:16309:16340  \"ERC721NonexistentToken(tokenId)\"\n                            revert(_1, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                        }\n                        /// @src 29:16360:16372  \"return owner\"\n                        var := cleaned\n                    }\n                    /// @ast-id 48688 @src 29:16918:17700  \"function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {...\"\n                    function fun_checkOnERC721Received(var_from, var_to, var_tokenId, var_data_mpos)\n                    {\n                        /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                        if /** @src 29:17034:17052  \"to.code.length > 0\" */ iszero(iszero(/** @src 29:17034:17048  \"to.code.length\" */ extcodesize(var_to)))\n                        /// @src 29:17030:17694  \"if (to.code.length > 0) {...\"\n                        {\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            let _1 := sub(shl(160, 1), 1)\n                            let _2 := and(/** @src 29:17072:17091  \"IERC721Receiver(to)\" */ var_to, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _1)\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let _3 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                            let _4 := shl(225, 0x0a85bd01)\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            mstore(_3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _4)\n                            mstore(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, 4), /** @src 34:735:745  \"msg.sender\" */ caller())\n                            /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36), and(var_from, _1))\n                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 68), var_tokenId)\n                            mstore(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 100), 128)\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let _5 := 32\n                            let _6 := sub(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ abi_encode_string(var_data_mpos, add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 132)), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3)\n                            /// @src 29:17051:17052  \"0\"\n                            let _7 := 0x00\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            let trySuccessCondition := call(gas(), _2, /** @src 29:17051:17052  \"0\" */ _7, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _3, _6, _3, _5)\n                            let expr := /** @src 29:17051:17052  \"0\" */ _7\n                            /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                            if trySuccessCondition\n                            {\n                                let _8 := _5\n                                if gt(_5, returndatasize()) { _8 := returndatasize() }\n                                finalize_allocation(_3, _8)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                if slt(sub(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ add(_3, _8), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _3), /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5)\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                {\n                                    revert(/** @src 29:17051:17052  \"0\" */ _7, _7)\n                                }\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                let value := mload(_3)\n                                if iszero(eq(value, and(value, shl(224, 0xffffffff))))\n                                {\n                                    revert(/** @src 29:17051:17052  \"0\" */ _7, _7)\n                                }\n                                /// @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\"\n                                expr := value\n                            }\n                            /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                            switch iszero(trySuccessCondition)\n                            case 0 {\n                                /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                if /** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ iszero(eq(/** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ and(/** @src 29:17190:17241  \"retval != IERC721Receiver.onERC721Received.selector\" */ expr, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ shl(224, 0xffffffff)), _4))\n                                /// @src 29:17186:17316  \"if (retval != IERC721Receiver.onERC721Received.selector) {...\"\n                                {\n                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    let _9 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    mstore(_9, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:17272:17297  \"ERC721InvalidReceiver(to)\" */ add(_9, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                    /// @src 29:17272:17297  \"ERC721InvalidReceiver(to)\"\n                                    revert(_9, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                            }\n                            default /// @src 29:17068:17684  \"try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {...\"\n                            {\n                                /// @src 29:17331:17684  \"catch (bytes memory reason) {...\"\n                                let data := /** @src 29:17051:17052  \"0\" */ _7\n                                /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                switch returndatasize()\n                                case 0 { data := 96 }\n                                default {\n                                    let _10 := returndatasize()\n                                    let _11 := array_allocation_size_bytes(_10)\n                                    let memPtr := mload(64)\n                                    finalize_allocation(memPtr, _11)\n                                    mstore(memPtr, _10)\n                                    data := memPtr\n                                    returndatacopy(add(memPtr, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5), /** @src 29:17051:17052  \"0\" */ _7, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ returndatasize())\n                                }\n                                let _12 := mload(/** @src 29:17381:17394  \"reason.length\" */ data)\n                                /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                switch /** @src 29:17381:17399  \"reason.length == 0\" */ iszero(_12)\n                                case /** @src 29:17377:17670  \"if (reason.length == 0) {...\" */ 0 {\n                                    /// @src 29:17557:17652  \"assembly {...\"\n                                    revert(add(/** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ _5, /** @src 29:17557:17652  \"assembly {...\" */ data), _12)\n                                }\n                                default /// @src 29:17377:17670  \"if (reason.length == 0) {...\"\n                                {\n                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    let _13 := /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ mload(64)\n                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    mstore(_13, /** @src 29:10061:10094  \"ERC721InvalidReceiver(address(0))\" */ shl(225, 0x32505749))\n                                    /// @src 43:130:931  \"contract BasicNft is ERC721 {...\"\n                                    mstore(/** @src 29:17430:17455  \"ERC721InvalidReceiver(to)\" */ add(_13, /** @src 29:17072:17143  \"IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\" */ 4), /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ _2)\n                                    /// @src 29:17430:17455  \"ERC721InvalidReceiver(to)\"\n                                    revert(_13, /** @src 43:130:931  \"contract BasicNft is ERC721 {...\" */ 36)\n                                }\n                            }\n                        }\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000814000a\"\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000814000a\"\n    }\n}\n","hash":"0100038786cc16b54d317d0d6ebf6f2b38ea676e647226a0a011576ffa249b61","factoryDependencies":{"0100006bff5413d8b428de93e30da9357ea26082606e96551b69c7d2c06f72cc":"script/DeployBasicNft.s.sol:DeployBasicNft","0100024102d875090b6b9cc1edad56782a1343cbeb68eb20263d9d2f402f09ca":"src/BasicNft.sol:BasicNft"},"id":47}